<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="18:BlinkAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2b0f56373d60"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2b0f561bd220"/></to>
    </wire>
    <wire loc="72:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2b0f561bd220"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2b0f561bb878"/></to>
    </wire>
    <wire loc="19:BlinkAppC.nc">
      <from><interface-ref name="LCD128x64" scoped="" ref="0x2b0f56371020"/></from>
      <to><interface-ref name="LCD128x64" scoped="" ref="0x2b0f563b9020"/></to>
    </wire>
    <wire loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64C.nc">
      <from><interface-ref name="LCD128x64" scoped="" ref="0x2b0f563b9020"/></from>
      <to><interface-ref name="LCD128x64" scoped="" ref="0x2b0f563e3c98"/></to>
    </wire>
    <wire loc="20:BlinkAppC.nc">
      <from><interface-ref name="Timer0" scoped="" ref="0x2b0f56391578"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b0f564b2420"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x2b0f564b2420"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2b0f564a96a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="21:BlinkAppC.nc">
      <from><interface-ref name="TouchScreen" scoped="" ref="0x2b0f5639bba0"/></from>
      <to><interface-ref name="TouchScreen" scoped="" ref="0x2b0f56662730"/></to>
    </wire>
    <wire loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="TouchScreen" scoped="" ref="0x2b0f56662730"/></from>
      <to><interface-ref name="TouchScreen" scoped="" ref="0x2b0f56673628"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b0f561bc620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b0f56c05e38"/></to>
    </wire>
    <wire loc="53:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b0f561bc620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b0f564bb0f0"/></to>
    </wire>
    <wire loc="67:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2b0f5636c020"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2b0f560c5600"/></to>
    </wire>
    <wire loc="53:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2b0f560c5600"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2b0f5617c448"/></to>
    </wire>
    <wire loc="68:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2b0f5636c9f8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b0f561bf620"/></to>
    </wire>
    <wire loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b0f561bf620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b0f561ce600"/></to>
    </wire>
    <wire loc="71:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b0f5636b140"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x2b0f561bc620"/></to>
    </wire>
    <wire loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2b0f561ba380"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b0f566efd48"/></to>
    </wire>
    <wire loc="59:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b0f561c2618"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b0f5634f8f0"/></to>
    </wire>
    <wire loc="61:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x2b0f561cd398"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b0f5634f2c0"/></to>
    </wire>
    <wire loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x2b0f561ceca0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2b0f561c7b98"/></to>
    </wire>
    <wire loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2b0f561c7b98"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2b0f561d1698"/></to>
    </wire>
    <wire loc="63:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2b0f561d4360"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2b0f561ba380"/></to>
    </wire>
    <wire loc="29:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2b0f561d0b08"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2b0f561d4360"/></to>
    </wire>
    <wire loc="191:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x2b0f56219af0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f562f2970"/></to>
    </wire>
    <wire loc="165:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x2b0f561fb658"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b0f56299020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b0f56299020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f569d2480"/></to>
    </wire>
    <wire loc="176:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x2b0f5620c658"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b0f562a8d60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b0f562a8d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56a1d480"/></to>
    </wire>
    <wire loc="185:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x2b0f56211348"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b0f562aa5b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b0f562aa5b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56aa5480"/></to>
    </wire>
    <wire loc="143:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x2b0f561e7348"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b0f56270740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b0f56270740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f5689a480"/></to>
    </wire>
    <wire loc="183:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x2b0f56213020"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b0f562ac2a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b0f562ac2a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56aab480"/></to>
    </wire>
    <wire loc="146:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x2b0f561e5658"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b0f56278930"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b0f56278930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f568ed3e0"/></to>
    </wire>
    <wire loc="157:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x2b0f561f67e0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b0f56287740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b0f56287740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56957480"/></to>
    </wire>
    <wire loc="168:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x2b0f56206af0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b0f56295430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b0f56295430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f569c9480"/></to>
    </wire>
    <wire loc="179:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x2b0f56209af0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b0f562a4120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b0f562a4120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56a42480"/></to>
    </wire>
    <wire loc="138:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x2b0f561dfaf0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b0f56265020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b0f56265020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56882480"/></to>
    </wire>
    <wire loc="149:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x2b0f561f0af0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b0f56275d60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b0f56275d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f5690e480"/></to>
    </wire>
    <wire loc="160:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x2b0f561f3c78"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b0f56284bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b0f56284bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56979480"/></to>
    </wire>
    <wire loc="171:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x2b0f56202020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b0f562928c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b0f562928c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f569ed480"/></to>
    </wire>
    <wire loc="188:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x2b0f5620e7e0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b0f562b9a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b0f562b9a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56a9b480"/></to>
    </wire>
    <wire loc="194:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x2b0f562157e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56307020"/></to>
    </wire>
    <wire loc="174:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x2b0f56200348"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b0f5629aa50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b0f5629aa50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56a23480"/></to>
    </wire>
    <wire loc="141:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x2b0f561e9020"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b0f56262430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b0f56262430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f568a0480"/></to>
    </wire>
    <wire loc="152:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x2b0f561ec1a0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b0f56281120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b0f56281120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56904480"/></to>
    </wire>
    <wire loc="192:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x2b0f562174d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f562ffab0"/></to>
    </wire>
    <wire loc="155:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x2b0f561f84d0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b0f56289500"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b0f56289500"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f5695d3e0"/></to>
    </wire>
    <wire loc="166:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x2b0f561fa7e0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b0f56298120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b0f56298120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f569cf480"/></to>
    </wire>
    <wire loc="177:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x2b0f5620b7e0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b0f562a7e18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b0f562a7e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56a49480"/></to>
    </wire>
    <wire loc="186:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x2b0f562104d0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b0f562bb740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b0f562bb740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56aa2480"/></to>
    </wire>
    <wire loc="144:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x2b0f561e64d0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b0f5626f8c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b0f5626f8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56897480"/></to>
    </wire>
    <wire loc="147:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x2b0f561e47e0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b0f56277a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b0f56277a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f568ea480"/></to>
    </wire>
    <wire loc="158:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x2b0f561f5968"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b0f562868c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b0f562868c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56954480"/></to>
    </wire>
    <wire loc="169:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x2b0f56205c78"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b0f562945b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b0f562945b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f569c5480"/></to>
    </wire>
    <wire loc="180:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x2b0f56208c78"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b0f562a32a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b0f562a32a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56a3f480"/></to>
    </wire>
    <wire loc="139:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x2b0f561dec78"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b0f56264120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b0f56264120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f568a7480"/></to>
    </wire>
    <wire loc="150:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x2b0f561efc78"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b0f56274e18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b0f56274e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f5690a480"/></to>
    </wire>
    <wire loc="161:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x2b0f561f2e00"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b0f56282d60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b0f56282d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56976480"/></to>
    </wire>
    <wire loc="189:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x2b0f5621a968"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b0f562b8bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b0f562b8bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56a98480"/></to>
    </wire>
    <wire loc="164:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x2b0f561fc1a0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b0f5628be40"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b0f5628be40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f569d53e0"/></to>
    </wire>
    <wire loc="175:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x2b0f5620d4d0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b0f562a9bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b0f562a9bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56a20480"/></to>
    </wire>
    <wire loc="184:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x2b0f562121a0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b0f562ab430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b0f562ab430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56aa8480"/></to>
    </wire>
    <wire loc="195:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x2b0f56222968"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56314180"/></to>
    </wire>
    <wire loc="142:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x2b0f561e81a0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b0f562715b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b0f562715b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f5689d480"/></to>
    </wire>
    <wire loc="153:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x2b0f561eb348"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b0f562802a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b0f562802a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56901480"/></to>
    </wire>
    <wire loc="182:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x2b0f56207e00"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b0f562ad1e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b0f562ad1e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56a7e3e0"/></to>
    </wire>
    <wire loc="156:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x2b0f561f7658"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b0f562885b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b0f562885b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f5695a480"/></to>
    </wire>
    <wire loc="167:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x2b0f561f9968"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b0f562962a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b0f562962a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f569cc480"/></to>
    </wire>
    <wire loc="178:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x2b0f5620a968"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b0f562a5020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b0f562a5020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56a45480"/></to>
    </wire>
    <wire loc="187:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x2b0f5620f658"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b0f562ba8c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b0f562ba8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56a9f480"/></to>
    </wire>
    <wire loc="137:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x2b0f561d2870"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b0f56267dc0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b0f56267dc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56885448"/></to>
    </wire>
    <wire loc="148:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x2b0f561f1968"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b0f56276bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b0f56276bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f568e7480"/></to>
    </wire>
    <wire loc="159:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x2b0f561f4af0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b0f56285a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b0f56285a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f5697c480"/></to>
    </wire>
    <wire loc="170:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x2b0f56204e00"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b0f56293740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b0f56293740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f569c2480"/></to>
    </wire>
    <wire loc="193:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x2b0f56216658"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f562fbc38"/></to>
    </wire>
    <wire loc="173:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x2b0f562011a0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b0f5629b930"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b0f5629b930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56a263e0"/></to>
    </wire>
    <wire loc="162:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x2b0f561fd020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b0f56291e18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b0f56291e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56973480"/></to>
    </wire>
    <wire loc="140:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x2b0f561dde00"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b0f562632a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b0f562632a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f568a3480"/></to>
    </wire>
    <wire loc="151:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x2b0f561ed020"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b0f56272020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b0f56272020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b0f56907480"/></to>
    </wire>
    <wire loc="54:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x2b0f560c81c8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b0f5617b2b0"/></to>
    </wire>
    <wire loc="55:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x2b0f56184758"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x2b0f5619b660"/></to>
    </wire>
    <wire loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x2b0f561a12b0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x2b0f56562268"/></to>
    </wire>
    <wire loc="179:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeRectangle" scoped="" ref="0x2b0f56419368"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b0f560c81c8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="230:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeString" scoped="" ref="0x2b0f5642e798"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b0f560c81c8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeCircle" scoped="" ref="0x2b0f564287e8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b0f560c81c8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="290:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeLine" scoped="" ref="0x2b0f564473e8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b0f560c81c8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="41:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="wait4Controller" scoped="" ref="0x2b0f563f27d0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b0f560c81c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="369:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeBar" scoped="" ref="0x2b0f5645e568"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b0f560c81c8"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="259:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="clearScreenNB" scoped="" ref="0x2b0f56450080"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b0f560c81c8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x2b0f564a96a0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2b0f564bbde8"/></to>
    </wire>
    <wire loc="61:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x2b0f564bbde8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b0f56647020"/></to>
    </wire>
    <wire loc="59:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b0f564bb0f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b0f564ccb90"/></to>
    </wire>
    <wire loc="65:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x2b0f564cb338"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x2b0f56659c38"/></to>
    </wire>
    <wire loc="35:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b0f564ccb90"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b0f565ce190"/></to>
    </wire>
    <wire loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x2b0f56641208"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b0f565fbab0"/></to>
    </wire>
    <wire loc="63:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x2b0f565f6c70"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x2b0f564d9748"/></to>
    </wire>
    <wire loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x2b0f564d9748"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x2b0f565ce938"/></to>
    </wire>
    <wire loc="66:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x2b0f56658e48"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x2b0f564d2e40"/></to>
    </wire>
    <wire loc="37:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x2b0f564d2e40"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x2b0f565caa90"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Counter" scoped="" ref="0x2b0f565caa90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x2b0f56b65a90"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Init" scoped="" ref="0x2b0f565ce190"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b0f56b69210"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Alarm" scoped="" ref="0x2b0f565ce938"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x2b0f56b699b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x2b0f56b63b98"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b0f56546e00"/></to>
    </wire>
    <wire loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x2b0f56546e00"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b0f5656c180"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x2b0f56b5eb60"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x2b0f56559020"/></to>
    </wire>
    <wire loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x2b0f56559020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x2b0f56567160"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Compare" scoped="" ref="0x2b0f56b9bb58"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x2b0f56558020"/></to>
    </wire>
    <wire loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x2b0f56558020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x2b0f56566190"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerSync" scoped="" ref="0x2b0f56b98bb0"/></from>
      <to><interface-ref name="TimerSync" scoped="" ref="0x2b0f56554218"/></to>
    </wire>
    <wire loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="TimerSync" scoped="" ref="0x2b0f56554218"/></from>
      <to><interface-ref name="TimerSync" scoped="" ref="0x2b0f56562958"/></to>
    </wire>
    <wire>
      <from><interface-ref name="fired" scoped="" ref="0x2b0f565f2cf0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b0f560c81c8"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x2b0f5665c478"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b0f560c81c8"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x2b0f56676580"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b0f5685c830"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Read" scoped="" ref="0x2b0f5685c830"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b0f566c83f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b0f5685bde0"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b0f56670b90"/></to>
    </wire>
    <wire loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="LCD128x64" scoped="" ref="0x2b0f56679b40"/></from>
      <to><interface-ref name="LCD128x64" scoped="" ref="0x2b0f563b9020"/></to>
    </wire>
    <wire loc="33:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <from><interface-ref name="checkTS" scoped="" ref="0x2b0f5668c948"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b0f560c81c8"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b0f566c0020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b0f5685bde0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2b0f566bf1c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b0f566dcca8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b0f566d7890"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b0f568596c8"/></to>
    </wire>
    <wire loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Read" scoped="" ref="0x2b0f566c83f0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b0f5682c020"/></to>
    </wire>
    <wire loc="31:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x2b0f566c52f0"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x2b0f56805880"/></to>
    </wire>
    <wire loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2b0f5683a020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b0f566bf1c8"/></to>
    </wire>
    <wire loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b0f56803e78"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b0f566c0020"/></to>
    </wire>
    <wire loc="35:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x2b0f5683d860"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b0f56808c68"/></to>
    </wire>
    <wire loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b0f56803020"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b0f566d4d50"/></to>
    </wire>
    <wire loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b0f566d4d50"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b0f566eb488"/></to>
    </wire>
    <wire loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b0f566f09b0"/></from>
      <to><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b0f566ebde0"/></to>
    </wire>
    <wire loc="66:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2b0f566dcca8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b0f567e0e50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2b0f567e0e50"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b0f56c02630"/></to>
    </wire>
    <wire loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b0f567dd8a0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b0f566d7890"/></to>
    </wire>
    <wire loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b0f566fc940"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b0f56731020"/></to>
    </wire>
    <wire loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b0f56731020"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b0f5672c1e8"/></to>
    </wire>
    <wire loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b0f566e7d30"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b0f561c2618"/></to>
    </wire>
    <wire loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x2b0f567ff478"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x2b0f566e9c10"/></to>
    </wire>
    <wire loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b0f56810268"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b0f567de3f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b0f567de3f0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b0f56c01ac8"/></to>
    </wire>
    <wire loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x2b0f5672a640"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x2b0f561a4a80"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x2b0f567dfb70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x2b0f56c01388"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2b0f567dd020"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2b0f56bff700"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b0f56bfe020"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b0f567dd8a0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Queue" scoped="" ref="0x2b0f56bfe7a0"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x2b0f56c04448"/></to>
    </wire>
    <wire>
      <from><interface-ref name="grantedTask" scoped="" ref="0x2b0f56bfca90"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b0f560c81c8"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x2b0f56c36020"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x2b0f567ff478"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b0f56c36740"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b0f567ffb98"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b0f56c36cd8"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b0f56810268"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2b0f56c35908"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2b0f56810e20"/></to>
    </wire>
    <wire loc="108:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <from><interface-ref name="acquiredData" scoped="" ref="0x2b0f56818080"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b0f560c81c8"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <documentation loc="45:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
        <short>&#10; Initialisation component for mica-family platforms.</short>
        <long>&#10; Initialisation component for mica-family platforms. See TEP107. Each &#10; mica-family member must also provide a MotePlatformC with initialisation&#10; specific to that member.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
        <short>&#10; Internal platform boot code.</short>
        <long>&#10; Internal platform boot code.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc" safe="">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:59">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:58">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:57">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:56">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:53">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc" safe="">
      <documentation loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc" safe="">
      <documentation loc="49:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.11 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BlinkC" loc="18:BlinkC.nc" safe="">
      <module/>
    </component>
    <component qname="LCD128x64C" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64C.nc">
      <configuration/>
    </component>
    <component qname="LCD128x64P" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <module/>
    </component>
    <component qname="BlinkAppC.TIMER0" loc="44(BlinkAppC.TIMER0):/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmSyncC" loc="30(AlarmCounterMilliP.Atm128AlarmSyncC):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmSyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP" loc="30(AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmSyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2b0f564d0c68"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer0SyncC" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer0SyncP" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
        <short>&#10; HPL interface to Atmega128 timer 0 in SYNC mode.</short>
        <long>&#10; HPL interface to Atmega128 timer 0 in SYNC mode. This is a specialised&#10; HPL component that assumes that timer 0 is used in SYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;--> CHANGED TO SYNC-Mode(CPL_CLK)&#9;hglanzer&#10;--> AS0=0 in ASSR&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TouchScreenC" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <configuration/>
    </component>
    <component qname="TouchScreenP" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <module/>
    </component>
    <component qname="TouchScreenC.AdcReadClientC" loc="21(TouchScreenC.AdcReadClientC):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcP" loc="16:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
        <short>&#10; Support component for AdcReadClientC and AdcReadNowClientC.</short>
        <long>&#10; Support component for AdcReadClientC and AdcReadNowClientC.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcC" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <documentation loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
        <short>&#10; HAL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HAL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcP" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc" safe="">
      <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
        <short>&#10; Internal component of the Atmega128 A/D HAL.</short>
        <long>&#10; Internal component of the Atmega128 A/D HAL.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Phil Buonadonna&#10; @author Hu Siquan &#60;husq@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128AdcC" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128AdcP" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc" safe="">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter" loc="89(Atm128AdcC.AdcArbiter):/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:atm128adc.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Queue" loc="42(Atm128AdcC.AdcArbiter.Queue):/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Arbiter" loc="52(Atm128AdcC.AdcArbiter.Arbiter):/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.PM" loc="67(Atm128AdcC.PM):/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.PM.PowerManager" loc="58(Atm128AdcC.PM.PowerManager):/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AdcP" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc" safe="">
      <documentation loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
        <short>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.</short>
        <long>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcP.ArbitrateRead" loc="23(WireAdcP.ArbitrateRead):/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2b0f5621fba0" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2b0f56229020" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2b0f56229368" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2b0f5622d610" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2b0f5622d978" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2b0f5622dce0" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2b0f5622a060" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2b0f562c1020" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2b0f562c1388" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2b0f562c16f0" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2b0f562c1a20" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmSyncC" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc" abstract="">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x2b0f564d0c68" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
          <component-ref qname="Atm128AlarmSyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2b0f564d0c68"/></type-var>
        </typedef>
        <constant name="divider" ref="0x2b0f564cd020" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
          <component-ref qname="Atm128AlarmSyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmSyncP" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc" abstract="" safe="">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x2b0f564dc410" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
          <component-ref qname="Atm128AlarmSyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2b0f564dc410"/></type-var>
        </typedef>
        <constant name="divider" ref="0x2b0f564dc700" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
          <component-ref qname="Atm128AlarmSyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b0f564c9c68" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b0f564c9c68"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b0f5660ecd0" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b0f5660ecd0"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x2b0f5660b020" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b0f56657510" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b0f56657510"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadClientC" loc="21:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc" abstract="">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinArbiterC" loc="89:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc" abstract="">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x2b0f56764b08" loc="89:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
          <component-ref qname="RoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x2b0f56775748" loc="42:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x2b0f5679e5c0" loc="52:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ArbitratedReadC" loc="23:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc" abstract="" safe="">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0x2b0f56809da0" loc="23:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0x2b0f56809da0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x2b0f561bc620" loc="58:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2b0f561bc620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f561bc970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2b0f561bd220" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b0f561bd220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b0f561bd570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2b0f561ba380" loc="52:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2b0f561ba380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f561ba6d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b0f561bf620" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b0f561bf620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f561bf970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2b0f561c2618" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b0f561c2618"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b0f561c2968"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b0f561c2af0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b0f561c2c78"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b0f561c2e00"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b0f561ba020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x2b0f561ceca0" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x2b0f561ceca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f561cd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b0f561ce600" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b0f561ce600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f561ce950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x2b0f561cd398" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x2b0f561cd398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f561cd6e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2b0f561d4360" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2b0f561d4360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f561d46b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2b0f561c7b98" loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b0f561c7b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f561d4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2b0f561d0b08" loc="19:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2b0f561d0b08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f561d0e58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x2b0f561d88d8" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x2b0f561d88d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561d8c28"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561d8db0"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561d0020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561d01a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f561d0330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561d04b8"/>
        <function-ref name="set" scoped="" ref="0x2b0f561d0640"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561d07c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2b0f561d1698" loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b0f561d1698"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f561d19e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x2b0f56219af0" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x2b0f56219af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562185e8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56218770"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562188f8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56218a80"/>
        <function-ref name="get" scoped="" ref="0x2b0f56218c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56218d90"/>
        <function-ref name="set" scoped="" ref="0x2b0f56217020"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562171a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x2b0f561fb658" loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x2b0f561fb658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561fb9a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561fbb30"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561fbcb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561fbe40"/>
        <function-ref name="get" scoped="" ref="0x2b0f561fa020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561fa1a8"/>
        <function-ref name="set" scoped="" ref="0x2b0f561fa330"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561fa4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x2b0f5620c658" loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x2b0f5620c658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5620c9a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5620cb30"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5620ccb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5620ce40"/>
        <function-ref name="get" scoped="" ref="0x2b0f5620b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5620b1a8"/>
        <function-ref name="set" scoped="" ref="0x2b0f5620b330"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5620b4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x2b0f56211348" loc="94:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x2b0f56211348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56211698"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56211820"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562119a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56211b30"/>
        <function-ref name="get" scoped="" ref="0x2b0f56211cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56211e40"/>
        <function-ref name="set" scoped="" ref="0x2b0f56210020"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562101a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x2b0f561e7348" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x2b0f561e7348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561e7698"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561e7820"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561e79a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561e7b30"/>
        <function-ref name="get" scoped="" ref="0x2b0f561e7cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561e7e40"/>
        <function-ref name="set" scoped="" ref="0x2b0f561e6020"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561e61a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x2b0f56213020" loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x2b0f56213020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56213370"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562134f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56213680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56213808"/>
        <function-ref name="get" scoped="" ref="0x2b0f56213990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56213b18"/>
        <function-ref name="set" scoped="" ref="0x2b0f56213ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56213e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x2b0f561e5658" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x2b0f561e5658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561e59a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561e5b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561e5cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561e5e40"/>
        <function-ref name="get" scoped="" ref="0x2b0f561e4020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561e41a8"/>
        <function-ref name="set" scoped="" ref="0x2b0f561e4330"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561e44b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x2b0f561f67e0" loc="66:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x2b0f561f67e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561f6b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561f6cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561f6e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561f5020"/>
        <function-ref name="get" scoped="" ref="0x2b0f561f51a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561f5330"/>
        <function-ref name="set" scoped="" ref="0x2b0f561f54b8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561f5640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x2b0f56206af0" loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x2b0f56206af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56206e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56205020"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562051a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56205330"/>
        <function-ref name="get" scoped="" ref="0x2b0f562054b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56205640"/>
        <function-ref name="set" scoped="" ref="0x2b0f562057c8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56205950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x2b0f56209af0" loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x2b0f56209af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56209e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56208020"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562081a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56208330"/>
        <function-ref name="get" scoped="" ref="0x2b0f562084b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56208640"/>
        <function-ref name="set" scoped="" ref="0x2b0f562087c8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56208950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x2b0f561dfaf0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x2b0f561dfaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561dfe40"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561de020"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561de1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561de330"/>
        <function-ref name="get" scoped="" ref="0x2b0f561de4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561de640"/>
        <function-ref name="set" scoped="" ref="0x2b0f561de7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561de950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x2b0f561f0af0" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x2b0f561f0af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561f0e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561ef020"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561ef1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561ef330"/>
        <function-ref name="get" scoped="" ref="0x2b0f561ef4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561ef640"/>
        <function-ref name="set" scoped="" ref="0x2b0f561ef7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561ef950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x2b0f561f3c78" loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x2b0f561f3c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561f2020"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561f21a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561f2330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561f24b8"/>
        <function-ref name="get" scoped="" ref="0x2b0f561f2640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561f27c8"/>
        <function-ref name="set" scoped="" ref="0x2b0f561f2950"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561f2ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x2b0f56202020" loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x2b0f56202020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56202370"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562024f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56202680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56202808"/>
        <function-ref name="get" scoped="" ref="0x2b0f56202990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56202b18"/>
        <function-ref name="set" scoped="" ref="0x2b0f56202ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56202e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x2b0f5620e7e0" loc="97:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x2b0f5620e7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5620eb30"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5620ecb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5620ee40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5621a020"/>
        <function-ref name="get" scoped="" ref="0x2b0f5621a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5621a330"/>
        <function-ref name="set" scoped="" ref="0x2b0f5621a4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5621a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x2b0f562157e0" loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x2b0f562157e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56215b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56215cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56215e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56222020"/>
        <function-ref name="get" scoped="" ref="0x2b0f562221a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56222330"/>
        <function-ref name="set" scoped="" ref="0x2b0f562224b8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56222640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x2b0f56200348" loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x2b0f56200348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56200698"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56200820"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562009a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56200b30"/>
        <function-ref name="get" scoped="" ref="0x2b0f56200cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56200e40"/>
        <function-ref name="set" scoped="" ref="0x2b0f5620d020"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5620d1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x2b0f561e9020" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x2b0f561e9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561e9370"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561e94f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561e9680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561e9808"/>
        <function-ref name="get" scoped="" ref="0x2b0f561e9990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561e9b18"/>
        <function-ref name="set" scoped="" ref="0x2b0f561e9ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561e9e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x2b0f561ec1a0" loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x2b0f561ec1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561ec4f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561ec678"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561ec800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561ec988"/>
        <function-ref name="get" scoped="" ref="0x2b0f561ecb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561ecc98"/>
        <function-ref name="set" scoped="" ref="0x2b0f561ece20"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561eb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x2b0f562174d0" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x2b0f562174d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56217820"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562179a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56217b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56217cb8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56217e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56216020"/>
        <function-ref name="set" scoped="" ref="0x2b0f562161a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56216330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x2b0f561f84d0" loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x2b0f561f84d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561f8820"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561f89a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561f8b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561f8cb8"/>
        <function-ref name="get" scoped="" ref="0x2b0f561f8e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561f7020"/>
        <function-ref name="set" scoped="" ref="0x2b0f561f71a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561f7330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x2b0f561fa7e0" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x2b0f561fa7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561fab30"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561facb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561fae40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561f9020"/>
        <function-ref name="get" scoped="" ref="0x2b0f561f91a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561f9330"/>
        <function-ref name="set" scoped="" ref="0x2b0f561f94b8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561f9640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x2b0f5620b7e0" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x2b0f5620b7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5620bb30"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5620bcb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5620be40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5620a020"/>
        <function-ref name="get" scoped="" ref="0x2b0f5620a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5620a330"/>
        <function-ref name="set" scoped="" ref="0x2b0f5620a4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5620a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x2b0f562104d0" loc="95:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x2b0f562104d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56210820"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562109a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56210b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56210cb8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56210e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5620f020"/>
        <function-ref name="set" scoped="" ref="0x2b0f5620f1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5620f330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x2b0f561e64d0" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x2b0f561e64d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561e6820"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561e69a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561e6b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561e6cb8"/>
        <function-ref name="get" scoped="" ref="0x2b0f561e6e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561e5020"/>
        <function-ref name="set" scoped="" ref="0x2b0f561e51a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561e5330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x2b0f561e47e0" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x2b0f561e47e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561e4b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561e4cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561e4e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561f1020"/>
        <function-ref name="get" scoped="" ref="0x2b0f561f11a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561f1330"/>
        <function-ref name="set" scoped="" ref="0x2b0f561f14b8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561f1640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x2b0f561f5968" loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x2b0f561f5968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561f5cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561f5e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561f4020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561f41a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f561f4330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561f44b8"/>
        <function-ref name="set" scoped="" ref="0x2b0f561f4640"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561f47c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x2b0f56205c78" loc="78:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x2b0f56205c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56204020"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562041a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56204330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562044b8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56204640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562047c8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56204950"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56204ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x2b0f56208c78" loc="89:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x2b0f56208c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56207020"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562071a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56207330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562074b8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56207640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562077c8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56207950"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56207ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x2b0f561dec78" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x2b0f561dec78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561dd020"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561dd1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561dd330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561dd4b8"/>
        <function-ref name="get" scoped="" ref="0x2b0f561dd640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561dd7c8"/>
        <function-ref name="set" scoped="" ref="0x2b0f561dd950"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561ddad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x2b0f561efc78" loc="59:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x2b0f561efc78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561ee0f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561ee278"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561ee400"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561ee588"/>
        <function-ref name="get" scoped="" ref="0x2b0f561ee710"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561ee898"/>
        <function-ref name="set" scoped="" ref="0x2b0f561eea20"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561eeba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x2b0f561f2e00" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x2b0f561f2e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561ff1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561ff330"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561ff4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561ff640"/>
        <function-ref name="get" scoped="" ref="0x2b0f561ff7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561ff950"/>
        <function-ref name="set" scoped="" ref="0x2b0f561ffad8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561ffc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x2b0f5621a968" loc="98:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x2b0f5621a968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5621acb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5621ae40"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56219020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562191a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56219330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562194b8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56219640"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562197c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x2b0f561fc1a0" loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x2b0f561fc1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561fc6f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561fc878"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561fca00"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561fcb88"/>
        <function-ref name="get" scoped="" ref="0x2b0f561fcd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561fb020"/>
        <function-ref name="set" scoped="" ref="0x2b0f561fb1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561fb330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x2b0f5620d4d0" loc="84:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x2b0f5620d4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5620d820"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5620d9a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5620db30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5620dcb8"/>
        <function-ref name="get" scoped="" ref="0x2b0f5620de40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5620c020"/>
        <function-ref name="set" scoped="" ref="0x2b0f5620c1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5620c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x2b0f562121a0" loc="93:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x2b0f562121a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562124f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56212678"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56212800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56212988"/>
        <function-ref name="get" scoped="" ref="0x2b0f56212b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56212c98"/>
        <function-ref name="set" scoped="" ref="0x2b0f56212e20"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56211020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x2b0f56222968" loc="104:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x2b0f56222968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56222cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56222e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56221020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562211a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56221330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562214b8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56221640"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562217c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x2b0f561e81a0" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x2b0f561e81a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561e84f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561e8678"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561e8800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561e8988"/>
        <function-ref name="get" scoped="" ref="0x2b0f561e8b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561e8c98"/>
        <function-ref name="set" scoped="" ref="0x2b0f561e8e20"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561e7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x2b0f561eb348" loc="62:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x2b0f561eb348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561eb698"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561eb820"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561eb9a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561ebb30"/>
        <function-ref name="get" scoped="" ref="0x2b0f561ebcb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561ebe40"/>
        <function-ref name="set" scoped="" ref="0x2b0f561f8020"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561f81a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x2b0f56207e00" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x2b0f56207e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562141a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56214330"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562144b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56214640"/>
        <function-ref name="get" scoped="" ref="0x2b0f562147c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56214950"/>
        <function-ref name="set" scoped="" ref="0x2b0f56214ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56214c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x2b0f561f7658" loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x2b0f561f7658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561f79a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561f7b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561f7cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561f7e40"/>
        <function-ref name="get" scoped="" ref="0x2b0f561f6020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561f61a8"/>
        <function-ref name="set" scoped="" ref="0x2b0f561f6330"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561f64b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x2b0f561f9968" loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x2b0f561f9968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561f9cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561f9e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56206020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562061a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56206330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562064b8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56206640"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562067c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x2b0f5620a968" loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x2b0f5620a968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5620acb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5620ae40"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56209020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562091a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56209330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562094b8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56209640"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562097c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x2b0f5620f658" loc="96:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x2b0f5620f658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5620f9a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5620fb30"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5620fcb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5620fe40"/>
        <function-ref name="get" scoped="" ref="0x2b0f5620e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5620e1a8"/>
        <function-ref name="set" scoped="" ref="0x2b0f5620e330"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5620e4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x2b0f561d2870" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x2b0f561d2870"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561d2bc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561d2d48"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561df020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561df1a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f561df330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561df4b8"/>
        <function-ref name="set" scoped="" ref="0x2b0f561df640"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561df7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x2b0f561f1968" loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x2b0f561f1968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561f1cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561f1e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561f0020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561f01a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f561f0330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561f04b8"/>
        <function-ref name="set" scoped="" ref="0x2b0f561f0640"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561f07c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x2b0f561f4af0" loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x2b0f561f4af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561f4e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561f3020"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561f31a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561f3330"/>
        <function-ref name="get" scoped="" ref="0x2b0f561f34b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561f3640"/>
        <function-ref name="set" scoped="" ref="0x2b0f561f37c8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561f3950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x2b0f56204e00" loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x2b0f56204e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562031a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56203330"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562034b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56203640"/>
        <function-ref name="get" scoped="" ref="0x2b0f562037c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56203950"/>
        <function-ref name="set" scoped="" ref="0x2b0f56203ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56203c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x2b0f56216658" loc="102:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x2b0f56216658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562169a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56216b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56216cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56216e40"/>
        <function-ref name="get" scoped="" ref="0x2b0f56215020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562151a8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56215330"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562154b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x2b0f562011a0" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x2b0f562011a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562014f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56201678"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56201800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56201988"/>
        <function-ref name="get" scoped="" ref="0x2b0f56201b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56201c98"/>
        <function-ref name="set" scoped="" ref="0x2b0f56201e20"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56200020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x2b0f561fd020" loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x2b0f561fd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561fd370"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561fd4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561fd680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561fd808"/>
        <function-ref name="get" scoped="" ref="0x2b0f561fd990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561fdb18"/>
        <function-ref name="set" scoped="" ref="0x2b0f561fdca0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561fde28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x2b0f561dde00" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x2b0f561dde00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561ea1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561ea330"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561ea4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561ea640"/>
        <function-ref name="get" scoped="" ref="0x2b0f561ea7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561ea950"/>
        <function-ref name="set" scoped="" ref="0x2b0f561eaad8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561eac60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x2b0f561ed020" loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x2b0f561ed020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f561ed370"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f561ed4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f561ed680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f561ed808"/>
        <function-ref name="get" scoped="" ref="0x2b0f561ed990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f561edb18"/>
        <function-ref name="set" scoped="" ref="0x2b0f561edca0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f561ede28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b0f56264120" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b0f56264120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56264470"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562645f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56264780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56264908"/>
        <function-ref name="get" scoped="" ref="0x2b0f56264a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56264c18"/>
        <function-ref name="set" scoped="" ref="0x2b0f56264da0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56263020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b0f562715b8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b0f562715b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56271908"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56271a90"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56271c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56271da0"/>
        <function-ref name="get" scoped="" ref="0x2b0f56270020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562701a8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56270330"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562704b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b0f56267dc0" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b0f56267dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56266170"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562662f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56266480"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56266608"/>
        <function-ref name="get" scoped="" ref="0x2b0f56266790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56266918"/>
        <function-ref name="set" scoped="" ref="0x2b0f56266aa0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56266c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b0f562632a8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b0f562632a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562635f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56263780"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56263908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56263a90"/>
        <function-ref name="get" scoped="" ref="0x2b0f56263c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56263da0"/>
        <function-ref name="set" scoped="" ref="0x2b0f56262020"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562621a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b0f56270740" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b0f56270740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56270a90"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56270c18"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56270da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5626f020"/>
        <function-ref name="get" scoped="" ref="0x2b0f5626f1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5626f330"/>
        <function-ref name="set" scoped="" ref="0x2b0f5626f4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5626f640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b0f56265020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b0f56265020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56265370"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562654f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56265680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56265808"/>
        <function-ref name="get" scoped="" ref="0x2b0f56265990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56265b18"/>
        <function-ref name="set" scoped="" ref="0x2b0f56265ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56265e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b0f56262430" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b0f56262430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56262780"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56262908"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56262a90"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56262c18"/>
        <function-ref name="get" scoped="" ref="0x2b0f56262da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56271020"/>
        <function-ref name="set" scoped="" ref="0x2b0f562711a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56271330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b0f5626f8c8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b0f5626f8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5626fc18"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5626fda0"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5626e020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5626e1a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f5626e330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5626e4b8"/>
        <function-ref name="set" scoped="" ref="0x2b0f5626e640"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5626e7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56885448" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56885448"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56885798"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56885920"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56885aa8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56885c30"/>
        <function-ref name="get" scoped="" ref="0x2b0f56885db8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56884020"/>
        <function-ref name="set" scoped="" ref="0x2b0f568841a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56884330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56882480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56882480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f568827d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56882958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56882ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56882c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56882df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56881020"/>
        <function-ref name="set" scoped="" ref="0x2b0f568811a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56881330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f568a7480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f568a7480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f568a77d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f568a7958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f568a7ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f568a7c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f568a7df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f568a5020"/>
        <function-ref name="set" scoped="" ref="0x2b0f568a51a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f568a5330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f568a3480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f568a3480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f568a37d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f568a3958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f568a3ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f568a3c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f568a3df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f568a2020"/>
        <function-ref name="set" scoped="" ref="0x2b0f568a21a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f568a2330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f568a0480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f568a0480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f568a07d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f568a0958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f568a0ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f568a0c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f568a0df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5689f020"/>
        <function-ref name="set" scoped="" ref="0x2b0f5689f1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5689f330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f5689d480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f5689d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5689d7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5689d958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5689dae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5689dc68"/>
        <function-ref name="get" scoped="" ref="0x2b0f5689ddf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5689c020"/>
        <function-ref name="set" scoped="" ref="0x2b0f5689c1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5689c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f5689a480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f5689a480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5689a7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5689a958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5689aae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5689ac68"/>
        <function-ref name="get" scoped="" ref="0x2b0f5689adf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56899020"/>
        <function-ref name="set" scoped="" ref="0x2b0f568991a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56899330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56897480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56897480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f568977d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56897958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56897ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56897c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56897df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56896020"/>
        <function-ref name="set" scoped="" ref="0x2b0f568961a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56896330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b0f56276bd8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b0f56276bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56275020"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562751a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56275330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562754b8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56275640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562757c8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56275950"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56275ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b0f56272020" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b0f56272020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56272370"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562724f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56272680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56272808"/>
        <function-ref name="get" scoped="" ref="0x2b0f56272990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56272b18"/>
        <function-ref name="set" scoped="" ref="0x2b0f56272ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56272e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b0f56278930" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b0f56278930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56278c80"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56278e08"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56277020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562771a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56277330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562774b8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56277640"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562777c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b0f56275d60" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b0f56275d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562740d8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56274260"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562743e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56274570"/>
        <function-ref name="get" scoped="" ref="0x2b0f562746f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56274880"/>
        <function-ref name="set" scoped="" ref="0x2b0f56274a08"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56274b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b0f56281120" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b0f56281120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56281470"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562815f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56281780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56281908"/>
        <function-ref name="get" scoped="" ref="0x2b0f56281a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56281c18"/>
        <function-ref name="set" scoped="" ref="0x2b0f56281da0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56280020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b0f56277a50" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b0f56277a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56277da0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56276020"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562761a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56276330"/>
        <function-ref name="get" scoped="" ref="0x2b0f562764b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56276640"/>
        <function-ref name="set" scoped="" ref="0x2b0f562767c8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56276950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b0f56274e18" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b0f56274e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562731a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56273330"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562734b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56273640"/>
        <function-ref name="get" scoped="" ref="0x2b0f562737c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56273950"/>
        <function-ref name="set" scoped="" ref="0x2b0f56273ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56273c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b0f562802a8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b0f562802a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562805f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56280780"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56280908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56280a90"/>
        <function-ref name="get" scoped="" ref="0x2b0f56280c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56280da0"/>
        <function-ref name="set" scoped="" ref="0x2b0f5627f020"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5627f1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f568ed3e0" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f568ed3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f568ed730"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f568ed8b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f568eda40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f568edbc8"/>
        <function-ref name="get" scoped="" ref="0x2b0f568edd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f568ec020"/>
        <function-ref name="set" scoped="" ref="0x2b0f568ec1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f568ec330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f568ea480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f568ea480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f568ea7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f568ea958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f568eaae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f568eac68"/>
        <function-ref name="get" scoped="" ref="0x2b0f568eadf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f568e9020"/>
        <function-ref name="set" scoped="" ref="0x2b0f568e91a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f568e9330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f568e7480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f568e7480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f568e77d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f568e7958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f568e7ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f568e7c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f568e7df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56910020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569101a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56910330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f5690e480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f5690e480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5690e7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5690e958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5690eae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5690ec68"/>
        <function-ref name="get" scoped="" ref="0x2b0f5690edf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5690c020"/>
        <function-ref name="set" scoped="" ref="0x2b0f5690c1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5690c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f5690a480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f5690a480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5690a7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5690a958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5690aae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5690ac68"/>
        <function-ref name="get" scoped="" ref="0x2b0f5690adf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56909020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569091a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56909330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56907480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56907480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569077d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56907958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56907ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56907c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56907df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56906020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569061a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56906330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56904480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56904480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569047d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56904958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56904ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56904c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56904df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56903020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569031a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56903330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56901480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56901480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569017d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56901958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56901ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56901c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56901df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56900020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569001a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56900330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b0f56287740" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b0f56287740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56287a90"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56287c18"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56287da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56286020"/>
        <function-ref name="get" scoped="" ref="0x2b0f562861a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56286330"/>
        <function-ref name="set" scoped="" ref="0x2b0f562864b8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56286640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b0f56284bd8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b0f56284bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56282020"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562821a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56282330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562824b8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56282640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562827c8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56282950"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56282ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b0f56289500" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b0f56289500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56289850"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562899d8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56289b60"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56289ce8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56289e70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56288020"/>
        <function-ref name="set" scoped="" ref="0x2b0f562881a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56288330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b0f562868c8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b0f562868c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56286c18"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56286da0"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56285020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562851a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56285330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562854b8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56285640"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562857c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b0f56282d60" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b0f56282d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562910d8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56291260"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562913e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56291570"/>
        <function-ref name="get" scoped="" ref="0x2b0f562916f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56291880"/>
        <function-ref name="set" scoped="" ref="0x2b0f56291a08"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56291b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b0f562885b8" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b0f562885b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56288908"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56288a90"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56288c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56288da0"/>
        <function-ref name="get" scoped="" ref="0x2b0f56287020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562871a8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56287330"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562874b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b0f56285a50" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b0f56285a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56285da0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56284020"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562841a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56284330"/>
        <function-ref name="get" scoped="" ref="0x2b0f562844b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56284640"/>
        <function-ref name="set" scoped="" ref="0x2b0f562847c8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56284950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b0f56291e18" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b0f56291e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562901a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56290330"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562904b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56290640"/>
        <function-ref name="get" scoped="" ref="0x2b0f562907c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56290950"/>
        <function-ref name="set" scoped="" ref="0x2b0f56290ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56290c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f5695d3e0" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f5695d3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5695d730"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5695d8b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5695da40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5695dbc8"/>
        <function-ref name="get" scoped="" ref="0x2b0f5695dd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5695c020"/>
        <function-ref name="set" scoped="" ref="0x2b0f5695c1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5695c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f5695a480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f5695a480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5695a7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5695a958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5695aae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5695ac68"/>
        <function-ref name="get" scoped="" ref="0x2b0f5695adf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56959020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569591a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56959330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56957480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56957480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569577d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56957958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56957ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56957c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56957df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56956020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569561a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56956330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56954480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56954480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569547d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56954958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56954ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56954c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56954df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56952020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569521a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56952330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f5697c480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f5697c480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5697c7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5697c958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5697cae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5697cc68"/>
        <function-ref name="get" scoped="" ref="0x2b0f5697cdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5697b020"/>
        <function-ref name="set" scoped="" ref="0x2b0f5697b1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5697b330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56979480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56979480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569797d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56979958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56979ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56979c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56979df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56978020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569781a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56978330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56976480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56976480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569767d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56976958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56976ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56976c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56976df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56975020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569751a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56975330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56973480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56973480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569737d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56973958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56973ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56973c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56973df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56972020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569721a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56972330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b0f56298120" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b0f56298120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56298470"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562985f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56298780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56298908"/>
        <function-ref name="get" scoped="" ref="0x2b0f56298a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56298c18"/>
        <function-ref name="set" scoped="" ref="0x2b0f56298da0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56296020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b0f562945b8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b0f562945b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56294908"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56294a90"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56294c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56294da0"/>
        <function-ref name="get" scoped="" ref="0x2b0f56293020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562931a8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56293330"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562934b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b0f5628be40" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b0f5628be40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5628a1c0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5628a348"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5628a4d0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5628a658"/>
        <function-ref name="get" scoped="" ref="0x2b0f5628a7e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5628a968"/>
        <function-ref name="set" scoped="" ref="0x2b0f5628aaf0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5628ac78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b0f562962a8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b0f562962a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562965f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56296780"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56296908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56296a90"/>
        <function-ref name="get" scoped="" ref="0x2b0f56296c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56296da0"/>
        <function-ref name="set" scoped="" ref="0x2b0f56295020"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562951a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b0f56293740" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b0f56293740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56293a90"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56293c18"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56293da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56292020"/>
        <function-ref name="get" scoped="" ref="0x2b0f562921a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56292330"/>
        <function-ref name="set" scoped="" ref="0x2b0f562924b8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56292640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b0f56299020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b0f56299020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56299370"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562994f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56299680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56299808"/>
        <function-ref name="get" scoped="" ref="0x2b0f56299990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56299b18"/>
        <function-ref name="set" scoped="" ref="0x2b0f56299ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56299e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b0f56295430" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b0f56295430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56295780"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56295908"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56295a90"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56295c18"/>
        <function-ref name="get" scoped="" ref="0x2b0f56295da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56294020"/>
        <function-ref name="set" scoped="" ref="0x2b0f562941a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56294330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b0f562928c8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b0f562928c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56292c18"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56292da0"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562a1020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562a11a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f562a1330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562a14b8"/>
        <function-ref name="set" scoped="" ref="0x2b0f562a1640"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562a17c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f569d53e0" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f569d53e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569d5730"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f569d58b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f569d5a40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f569d5bc8"/>
        <function-ref name="get" scoped="" ref="0x2b0f569d5d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f569d4020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569d41a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f569d4330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f569d2480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f569d2480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569d27d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f569d2958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f569d2ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f569d2c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f569d2df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f569d1020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569d11a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f569d1330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f569cf480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f569cf480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569cf7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f569cf958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f569cfae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f569cfc68"/>
        <function-ref name="get" scoped="" ref="0x2b0f569cfdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f569ce020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569ce1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f569ce330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f569cc480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f569cc480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569cc7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f569cc958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f569ccae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f569ccc68"/>
        <function-ref name="get" scoped="" ref="0x2b0f569ccdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f569cb020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569cb1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f569cb330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f569c9480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f569c9480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569c97d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f569c9958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f569c9ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f569c9c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f569c9df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f569c7020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569c71a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f569c7330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f569c5480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f569c5480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569c57d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f569c5958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f569c5ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f569c5c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f569c5df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f569c4020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569c41a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f569c4330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f569c2480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f569c2480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569c27d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f569c2958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f569c2ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f569c2c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f569c2df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f569c1020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569c11a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f569c1330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f569ed480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f569ed480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f569ed7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f569ed958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f569edae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f569edc68"/>
        <function-ref name="get" scoped="" ref="0x2b0f569eddf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f569ec020"/>
        <function-ref name="set" scoped="" ref="0x2b0f569ec1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f569ec330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b0f562a9bd8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b0f562a9bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562a8020"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562a81a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562a8330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562a84b8"/>
        <function-ref name="get" scoped="" ref="0x2b0f562a8640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562a87c8"/>
        <function-ref name="set" scoped="" ref="0x2b0f562a8950"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562a8ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b0f562a5020" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b0f562a5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562a5370"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562a54f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562a5680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562a5808"/>
        <function-ref name="get" scoped="" ref="0x2b0f562a5990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562a5b18"/>
        <function-ref name="set" scoped="" ref="0x2b0f562a5ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562a5e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b0f5629b930" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b0f5629b930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5629bc80"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5629be08"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5629a020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5629a1a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f5629a330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5629a4b8"/>
        <function-ref name="set" scoped="" ref="0x2b0f5629a640"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5629a7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b0f562a8d60" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b0f562a8d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562a70d8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562a7260"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562a73e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562a7570"/>
        <function-ref name="get" scoped="" ref="0x2b0f562a76f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562a7880"/>
        <function-ref name="set" scoped="" ref="0x2b0f562a7a08"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562a7b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b0f562a4120" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b0f562a4120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562a4470"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562a45f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562a4780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562a4908"/>
        <function-ref name="get" scoped="" ref="0x2b0f562a4a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562a4c18"/>
        <function-ref name="set" scoped="" ref="0x2b0f562a4da0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562a3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b0f5629aa50" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b0f5629aa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5629ada0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562a9020"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562a91a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562a9330"/>
        <function-ref name="get" scoped="" ref="0x2b0f562a94b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562a9640"/>
        <function-ref name="set" scoped="" ref="0x2b0f562a97c8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562a9950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b0f562a7e18" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b0f562a7e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562a61a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562a6330"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562a64b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562a6640"/>
        <function-ref name="get" scoped="" ref="0x2b0f562a67c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562a6950"/>
        <function-ref name="set" scoped="" ref="0x2b0f562a6ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562a6c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b0f562a32a8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b0f562a32a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562a35f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562a3780"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562a3908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562a3a90"/>
        <function-ref name="get" scoped="" ref="0x2b0f562a3c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562a3da0"/>
        <function-ref name="set" scoped="" ref="0x2b0f562a2020"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562a21a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56a263e0" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56a263e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56a26730"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56a268b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56a26a40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56a26bc8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56a26d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56a25020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56a251a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56a25330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56a23480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56a23480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56a237d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56a23958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56a23ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56a23c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56a23df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56a22020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56a221a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56a22330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56a20480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56a20480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56a207d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56a20958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56a20ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56a20c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56a20df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56a1f020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56a1f1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56a1f330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56a1d480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56a1d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56a1d7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56a1d958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56a1dae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56a1dc68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56a1ddf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56a4b020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56a4b1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56a4b330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56a49480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56a49480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56a497d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56a49958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56a49ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56a49c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56a49df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56a47020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56a471a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56a47330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56a45480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56a45480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56a457d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56a45958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56a45ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56a45c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56a45df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56a44020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56a441a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56a44330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56a42480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56a42480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56a427d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56a42958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56a42ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56a42c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56a42df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56a41020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56a411a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56a41330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56a3f480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56a3f480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56a3f7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56a3f958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56a3fae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56a3fc68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56a3fdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56a3e020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56a3e1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56a3e330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b0f562ab430" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b0f562ab430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562ab780"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562ab908"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562aba90"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562abc18"/>
        <function-ref name="get" scoped="" ref="0x2b0f562abda0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562aa020"/>
        <function-ref name="set" scoped="" ref="0x2b0f562aa1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562aa330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b0f562ba8c8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b0f562ba8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562bac18"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562bada0"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562b9020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562b91a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f562b9330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562b94b8"/>
        <function-ref name="set" scoped="" ref="0x2b0f562b9640"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562b97c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b0f562ad1e8" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b0f562ad1e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562ad538"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562ad6c0"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562ad848"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562ad9d0"/>
        <function-ref name="get" scoped="" ref="0x2b0f562adb58"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562adce0"/>
        <function-ref name="set" scoped="" ref="0x2b0f562ade68"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562ac020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b0f562aa5b8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b0f562aa5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562aa908"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562aaa90"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562aac18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562aada0"/>
        <function-ref name="get" scoped="" ref="0x2b0f562bb020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562bb1a8"/>
        <function-ref name="set" scoped="" ref="0x2b0f562bb330"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562bb4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b0f562b9a50" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b0f562b9a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562b9da0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562b8020"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562b81a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562b8330"/>
        <function-ref name="get" scoped="" ref="0x2b0f562b84b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562b8640"/>
        <function-ref name="set" scoped="" ref="0x2b0f562b87c8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562b8950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b0f562ac2a8" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b0f562ac2a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562ac5f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562ac780"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562ac908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562aca90"/>
        <function-ref name="get" scoped="" ref="0x2b0f562acc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562acda0"/>
        <function-ref name="set" scoped="" ref="0x2b0f562ab020"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562ab1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b0f562bb740" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b0f562bb740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562bba90"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562bbc18"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562bbda0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562ba020"/>
        <function-ref name="get" scoped="" ref="0x2b0f562ba1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562ba330"/>
        <function-ref name="set" scoped="" ref="0x2b0f562ba4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562ba640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b0f562b8bd8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b0f562b8bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562b6020"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562b61a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562b6330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562b64b8"/>
        <function-ref name="get" scoped="" ref="0x2b0f562b6640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562b67c8"/>
        <function-ref name="set" scoped="" ref="0x2b0f562b6950"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562b6ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56a7e3e0" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56a7e3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56a7e730"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56a7e8b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56a7ea40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56a7ebc8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56a7ed50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56a7d020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56a7d1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56a7d330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56aab480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56aab480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56aab7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56aab958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56aabae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56aabc68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56aabdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56aaa020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56aaa1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56aaa330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56aa8480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56aa8480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56aa87d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56aa8958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56aa8ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56aa8c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56aa8df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56aa7020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56aa71a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56aa7330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56aa5480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56aa5480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56aa57d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56aa5958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56aa5ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56aa5c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56aa5df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56aa4020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56aa41a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56aa4330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56aa2480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56aa2480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56aa27d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56aa2958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56aa2ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56aa2c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56aa2df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56aa1020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56aa11a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56aa1330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56a9f480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56a9f480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56a9f7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56a9f958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56a9fae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56a9fc68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56a9fdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56a9d020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56a9d1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56a9d330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56a9b480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56a9b480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56a9b7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56a9b958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56a9bae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56a9bc68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56a9bdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56a9a020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56a9a1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56a9a330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56a98480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56a98480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56a987d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56a98958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56a98ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56a98c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f56a98df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56a97020"/>
        <function-ref name="set" scoped="" ref="0x2b0f56a971a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56a97330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f562c2ac0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f562c2ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562c2e10"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562d0020"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562d01a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562d0330"/>
        <function-ref name="get" scoped="" ref="0x2b0f562d04b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562d0640"/>
        <function-ref name="set" scoped="" ref="0x2b0f562d07c8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562d0950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f562dfdb8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f562dfdb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562de170"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562de2f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562de480"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562de608"/>
        <function-ref name="get" scoped="" ref="0x2b0f562de790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562de918"/>
        <function-ref name="set" scoped="" ref="0x2b0f562deaa0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562dec28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f562d93e0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f562d93e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562d9730"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562d98b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562d9a40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562d9bc8"/>
        <function-ref name="get" scoped="" ref="0x2b0f562d9d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562d8020"/>
        <function-ref name="set" scoped="" ref="0x2b0f562d81a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562d8330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f562e67e8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f562e67e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562e6b38"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562e6cc0"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562e6e48"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562e5020"/>
        <function-ref name="get" scoped="" ref="0x2b0f562e51a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562e5330"/>
        <function-ref name="set" scoped="" ref="0x2b0f562e54b8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562e5640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f562e2c38" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f562e2c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562e1020"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562e11a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562e1330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562e14b8"/>
        <function-ref name="get" scoped="" ref="0x2b0f562e1640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562e17c8"/>
        <function-ref name="set" scoped="" ref="0x2b0f562e1950"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562e1ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f562ee020" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f562ee020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562ee370"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562ee4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562ee680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562ee808"/>
        <function-ref name="get" scoped="" ref="0x2b0f562ee990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562eeb18"/>
        <function-ref name="set" scoped="" ref="0x2b0f562eeca0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562eee28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f562e9480" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f562e9480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562e97d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562e9958"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562e9ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562e9c68"/>
        <function-ref name="get" scoped="" ref="0x2b0f562e9df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562fa020"/>
        <function-ref name="set" scoped="" ref="0x2b0f562fa1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562fa330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f562f77e8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f562f77e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562f7b38"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562f7cc0"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562f7e48"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562f6020"/>
        <function-ref name="get" scoped="" ref="0x2b0f562f61a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562f6330"/>
        <function-ref name="set" scoped="" ref="0x2b0f562f64b8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562f6640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f562f2970" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f562f2970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562f2cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562f2e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56303020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f563031a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56303330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f563034b8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56303640"/>
        <function-ref name="clr" scoped="" ref="0x2b0f563037c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f562ffab0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f562ffab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f562ffe00"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f562fe020"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f562fe1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f562fe330"/>
        <function-ref name="get" scoped="" ref="0x2b0f562fe4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f562fe640"/>
        <function-ref name="set" scoped="" ref="0x2b0f562fe7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b0f562fe950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f562fbc38" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f562fbc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f5630c020"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f5630c1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f5630c330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f5630c4b8"/>
        <function-ref name="get" scoped="" ref="0x2b0f5630c640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f5630c7c8"/>
        <function-ref name="set" scoped="" ref="0x2b0f5630c950"/>
        <function-ref name="clr" scoped="" ref="0x2b0f5630cad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56307020" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56307020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f56307370"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f563074f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f56307680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56307808"/>
        <function-ref name="get" scoped="" ref="0x2b0f56307990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56307b18"/>
        <function-ref name="set" scoped="" ref="0x2b0f56307ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56307e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b0f56314180" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b0f56314180"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b0f563144d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b0f56314658"/>
        <function-ref name="toggle" scoped="" ref="0x2b0f563147e0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b0f56314968"/>
        <function-ref name="get" scoped="" ref="0x2b0f56314af0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b0f56314c78"/>
        <function-ref name="set" scoped="" ref="0x2b0f56314e00"/>
        <function-ref name="clr" scoped="" ref="0x2b0f56313020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b0f5634f2c0" loc="27:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b0f5634f2c0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x2b0f560c0128"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x2b0f560c0128"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f5634f610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2b0f5634f8f0" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b0f5634f8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b0f5634fc40"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b0f5634fdc8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b0f5634e020"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b0f5634e1a8"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b0f5634e330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x2b0f5636b140" loc="60:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2b0f5636b140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f5636b490"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2b0f561bb878" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b0f561bb878"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b0f561bbbc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x2b0f5636c9f8" loc="59:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b0f5636c9f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f5636cd48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x2b0f5636c020" loc="58:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b0f5636c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f5636c370"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b0f5636c4f8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b0f5636c680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2b0f560c81c8" loc="48:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2b0f560c81c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b0f560c8518"/>
        <function-ref name="runTask" scoped="" ref="0x2b0f560c86a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2b0f560c5600" loc="47:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b0f560c5600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f560c5950"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b0f560c5ad8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b0f560c5c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2b0f5617b2b0" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2b0f5617b2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b0f5617b600"/>
        <function-ref name="runTask" scoped="" ref="0x2b0f5617b788"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x2b0f56184758" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2b0f56184758"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2b0f56184aa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2b0f5617c448" loc="55:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b0f5617c448"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f5617c798"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b0f5617c920"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b0f5617caa8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x2b0f561a12b0" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2b0f561a12b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2b0f561a1600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x2b0f5619b660" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2b0f5619b660"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2b0f5619b9b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x2b0f561a4a80" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2b0f561a4a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2b0f561a4dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer0" ref="0x2b0f56391578" loc="22:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer0" scoped="" ref="0x2b0f56391578"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b0f5638f8f0"/>
        <function-ref name="fired" scoped="" ref="0x2b0f56390020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b0f56390d10"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b0f563908c0"/>
        <function-ref name="getdt" scoped="" ref="0x2b0f5638e1c0"/>
        <function-ref name="gett0" scoped="" ref="0x2b0f5638fd40"/>
        <function-ref name="isRunning" scoped="" ref="0x2b0f56390470"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b0f563850f8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b0f5638f320"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b0f56385598"/>
        <function-ref name="stop" scoped="" ref="0x2b0f56385a38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x2b0f56373d60" loc="20:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b0f56373d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b0f563720d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LCD128x64" ref="0x2b0f56371020" loc="21:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LCD128x64" scoped="" ref="0x2b0f56371020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b0f56371370"/>
        <function-ref name="initDone" scoped="" ref="0x2b0f563714f8"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b0f56371680"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b0f56371808"/>
        <function-ref name="barWritten" scoped="" ref="0x2b0f56371990"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b0f56371b18"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b0f56371ca0"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b0f56371e28"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b0f56370020"/>
        <function-ref name="writeByte" scoped="" ref="0x2b0f563701a8"/>
        <function-ref name="setPixel" scoped="" ref="0x2b0f56370330"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b0f563704b8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b0f56370640"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b0f563708c8"/>
        <function-ref name="writePixel" scoped="" ref="0x2b0f56370a50"/>
        <function-ref name="initLCD" scoped="" ref="0x2b0f56370bd8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b0f56370d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TouchScreen" ref="0x2b0f5639bba0" loc="24:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TouchScreen" scoped="" ref="0x2b0f5639bba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TouchScreen"/>
      </instance>
      <interface-functions>
        <function-ref name="tsPressed" scoped="" ref="0x2b0f5638c020"/>
        <function-ref name="isPressed" scoped="" ref="0x2b0f5638c1a8"/>
        <function-ref name="calibrateTouchScreen" scoped="" ref="0x2b0f5638c330"/>
        <function-ref name="getXY" scoped="" ref="0x2b0f5638c4b8"/>
        <function-ref name="calibrated" scoped="" ref="0x2b0f5638c640"/>
        <function-ref name="xyReady" scoped="" ref="0x2b0f5638c7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LCD128x64" ref="0x2b0f563b9020" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64C.nc">
      <component-ref qname="LCD128x64C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LCD128x64" scoped="" ref="0x2b0f563b9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b0f563b9370"/>
        <function-ref name="initDone" scoped="" ref="0x2b0f563b94f8"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b0f563b9680"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b0f563b9808"/>
        <function-ref name="barWritten" scoped="" ref="0x2b0f563b9990"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b0f563b9b18"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b0f563b9ca0"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b0f563b9e28"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b0f563b8020"/>
        <function-ref name="writeByte" scoped="" ref="0x2b0f563b81a8"/>
        <function-ref name="setPixel" scoped="" ref="0x2b0f563b8330"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b0f563b84b8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b0f563b8640"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b0f563b88c8"/>
        <function-ref name="writePixel" scoped="" ref="0x2b0f563b8a50"/>
        <function-ref name="initLCD" scoped="" ref="0x2b0f563b8bd8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b0f563b8d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeRectangle" ref="0x2b0f56419368" loc="179:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeRectangle" scoped="" ref="0x2b0f56419368"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b0f564196b8"/>
        <function-ref name="runTask" scoped="" ref="0x2b0f56419840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LCD128x64" ref="0x2b0f563e3c98" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LCD128x64" scoped="" ref="0x2b0f563e3c98"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b0f563e2020"/>
        <function-ref name="initDone" scoped="" ref="0x2b0f563e21a8"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b0f563e2330"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b0f563e24b8"/>
        <function-ref name="barWritten" scoped="" ref="0x2b0f563e2640"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b0f563e27c8"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b0f563e2950"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b0f563e2ad8"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b0f563e2c60"/>
        <function-ref name="writeByte" scoped="" ref="0x2b0f563e2de8"/>
        <function-ref name="setPixel" scoped="" ref="0x2b0f563e1020"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b0f563e11a8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b0f563e1330"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b0f563e15b8"/>
        <function-ref name="writePixel" scoped="" ref="0x2b0f563e1740"/>
        <function-ref name="initLCD" scoped="" ref="0x2b0f563e18c8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b0f563e1a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeString" ref="0x2b0f5642e798" loc="230:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeString" scoped="" ref="0x2b0f5642e798"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b0f5642eae8"/>
        <function-ref name="runTask" scoped="" ref="0x2b0f5642ec70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeCircle" ref="0x2b0f564287e8" loc="196:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeCircle" scoped="" ref="0x2b0f564287e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b0f56428b38"/>
        <function-ref name="runTask" scoped="" ref="0x2b0f56428cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeLine" ref="0x2b0f564473e8" loc="290:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeLine" scoped="" ref="0x2b0f564473e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b0f56447738"/>
        <function-ref name="runTask" scoped="" ref="0x2b0f564478c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="wait4Controller" ref="0x2b0f563f27d0" loc="41:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="wait4Controller" scoped="" ref="0x2b0f563f27d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b0f563f2b20"/>
        <function-ref name="runTask" scoped="" ref="0x2b0f563f2ca8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeBar" ref="0x2b0f5645e568" loc="369:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeBar" scoped="" ref="0x2b0f5645e568"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b0f5645e8b8"/>
        <function-ref name="runTask" scoped="" ref="0x2b0f5645ea40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="clearScreenNB" ref="0x2b0f56450080" loc="259:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="clearScreenNB" scoped="" ref="0x2b0f56450080"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b0f564503d0"/>
        <function-ref name="runTask" scoped="" ref="0x2b0f56450558"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b0f564b2420" loc="45:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
      <component-ref qname="BlinkAppC.TIMER0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b0f564b2420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b0f566656c8"/>
        <function-ref name="fired" scoped="" ref="0x2b0f56667db0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b0f56666ad8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b0f56666688"/>
        <function-ref name="getdt" scoped="" ref="0x2b0f56663020"/>
        <function-ref name="gett0" scoped="" ref="0x2b0f56665b18"/>
        <function-ref name="isRunning" scoped="" ref="0x2b0f56666238"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b0f56667020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b0f566650f8"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b0f566674c0"/>
        <function-ref name="stop" scoped="" ref="0x2b0f56667960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x2b0f564a96a0" loc="49:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x2b0f564a96a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b0f564a6a18"/>
        <function-ref name="fired" scoped="" ref="0x2b0f564a7158"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b0f564a7e48"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b0f564a79f8"/>
        <function-ref name="getdt" scoped="" ref="0x2b0f564be2e8"/>
        <function-ref name="gett0" scoped="" ref="0x2b0f564a6e68"/>
        <function-ref name="isRunning" scoped="" ref="0x2b0f564a75a8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b0f564a8370"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b0f564a6448"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b0f564a8810"/>
        <function-ref name="stop" scoped="" ref="0x2b0f564a8cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x2b0f564bbde8" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x2b0f564bbde8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b0f564b60c0"/>
        <function-ref name="fired" scoped="" ref="0x2b0f564b8798"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b0f564b74d8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b0f564b7088"/>
        <function-ref name="getdt" scoped="" ref="0x2b0f564b6960"/>
        <function-ref name="gett0" scoped="" ref="0x2b0f564b6510"/>
        <function-ref name="isRunning" scoped="" ref="0x2b0f564b8be8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b0f564ba9e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b0f564b7aa8"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b0f564bae80"/>
        <function-ref name="stop" scoped="" ref="0x2b0f564b8348"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x2b0f564cb338" loc="47:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x2b0f564cb338"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b0f564b3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b0f564bb0f0" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b0f564bb0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f564bb440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x2b0f564d2e40" loc="29:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x2b0f564d2e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b0f564d6be8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b0f564d1548"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b0f564d10c0"/>
        <function-ref name="overflow" scoped="" ref="0x2b0f564d19d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b0f564ccb90" loc="27:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b0f564ccb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f564c8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x2b0f564d9748" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x2b0f564d9748"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b0f564d8020"/>
        <function-ref name="fired" scoped="" ref="0x2b0f564c6020"/>
        <function-ref name="startAt" scoped="" ref="0x2b0f564c6930"/>
        <function-ref name="isRunning" scoped="" ref="0x2b0f564c64a8"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b0f564d84a8"/>
        <function-ref name="start" scoped="" ref="0x2b0f564c7578"/>
        <function-ref name="stop" scoped="" ref="0x2b0f564c7a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x2b0f565ce938" loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2b0f565ce938"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b0f565ca020"/>
        <function-ref name="fired" scoped="" ref="0x2b0f565cc088"/>
        <function-ref name="startAt" scoped="" ref="0x2b0f565cc998"/>
        <function-ref name="isRunning" scoped="" ref="0x2b0f565cc510"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b0f565ca4a8"/>
        <function-ref name="start" scoped="" ref="0x2b0f565cd6b0"/>
        <function-ref name="stop" scoped="" ref="0x2b0f565cdb88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b0f565ce190" loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b0f565ce190"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x2b0f560c1d88"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x2b0f560c1d88"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f565ce4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x2b0f565caa90" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2b0f565caa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b0f565c9828"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b0f565c8190"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b0f565c9cb0"/>
        <function-ref name="overflow" scoped="" ref="0x2b0f565c8618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x2b0f56b5eb60" loc="38:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2b0f56b5eb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2b0f56b9b020"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2b0f56b9b1a8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2b0f56b9b330"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2b0f56b9b4b8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2b0f56b9b640"/>
        <function-ref name="setControl" scoped="" ref="0x2b0f56b9b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x2b0f56b699b8" loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2b0f56b699b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b0f56b65020"/>
        <function-ref name="fired" scoped="" ref="0x2b0f56b670c0"/>
        <function-ref name="startAt" scoped="" ref="0x2b0f56b679d0"/>
        <function-ref name="isRunning" scoped="" ref="0x2b0f56b67548"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b0f56b654a8"/>
        <function-ref name="start" scoped="" ref="0x2b0f56b68730"/>
        <function-ref name="stop" scoped="" ref="0x2b0f56b68c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b0f56b69210" loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b0f56b69210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f56b69560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x2b0f56b65a90" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2b0f56b65a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b0f56b64828"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b0f56b63190"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b0f56b64cb0"/>
        <function-ref name="overflow" scoped="" ref="0x2b0f56b63618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerSync" ref="0x2b0f56b98bb0" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerSync" scoped="" ref="0x2b0f56b98bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
      </instance>
      <interface-functions>
        <function-ref name="setAssr" scoped="" ref="0x2b0f56b977c8"/>
        <function-ref name="controlBusy" scoped="" ref="0x2b0f56b971a8"/>
        <function-ref name="compareBusy" scoped="" ref="0x2b0f56b97330"/>
        <function-ref name="countBusy" scoped="" ref="0x2b0f56b974b8"/>
        <function-ref name="getAssr" scoped="" ref="0x2b0f56b97640"/>
        <function-ref name="setTimer0Synchronous" scoped="" ref="0x2b0f56b97020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x2b0f56b9bb58" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2b0f56b9bb58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2b0f56b98310"/>
        <function-ref name="fired" scoped="" ref="0x2b0f56b990c0"/>
        <function-ref name="get" scoped="" ref="0x2b0f56b9a728"/>
        <function-ref name="reset" scoped="" ref="0x2b0f56b99548"/>
        <function-ref name="isOn" scoped="" ref="0x2b0f56b98798"/>
        <function-ref name="set" scoped="" ref="0x2b0f56b9abb0"/>
        <function-ref name="start" scoped="" ref="0x2b0f56b999d0"/>
        <function-ref name="stop" scoped="" ref="0x2b0f56b99e58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x2b0f56b63b98" loc="37:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b0f56b63b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2b0f56b5fdb8"/>
        <function-ref name="test" scoped="" ref="0x2b0f56b5f4a8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56b62760"/>
        <function-ref name="setScale" scoped="" ref="0x2b0f56b5e270"/>
        <function-ref name="getScale" scoped="" ref="0x2b0f56b5e748"/>
        <function-ref name="reset" scoped="" ref="0x2b0f56b60580"/>
        <function-ref name="overflow" scoped="" ref="0x2b0f56b600f8"/>
        <function-ref name="isOn" scoped="" ref="0x2b0f56b5f930"/>
        <function-ref name="set" scoped="" ref="0x2b0f56b62be8"/>
        <function-ref name="start" scoped="" ref="0x2b0f56b60a08"/>
        <function-ref name="stop" scoped="" ref="0x2b0f56b5f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x2b0f56559020" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2b0f56559020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2b0f56559370"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2b0f565594f8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2b0f56559680"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2b0f56559808"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2b0f56559990"/>
        <function-ref name="setControl" scoped="" ref="0x2b0f56559b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerSync" ref="0x2b0f56554218" loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerSync" scoped="" ref="0x2b0f56554218"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
      </instance>
      <interface-functions>
        <function-ref name="setAssr" scoped="" ref="0x2b0f56554d10"/>
        <function-ref name="controlBusy" scoped="" ref="0x2b0f565546f0"/>
        <function-ref name="compareBusy" scoped="" ref="0x2b0f56554878"/>
        <function-ref name="countBusy" scoped="" ref="0x2b0f56554a00"/>
        <function-ref name="getAssr" scoped="" ref="0x2b0f56554b88"/>
        <function-ref name="setTimer0Synchronous" scoped="" ref="0x2b0f56554568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x2b0f56558020" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2b0f56558020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2b0f565567a8"/>
        <function-ref name="fired" scoped="" ref="0x2b0f56557560"/>
        <function-ref name="get" scoped="" ref="0x2b0f56558ba0"/>
        <function-ref name="reset" scoped="" ref="0x2b0f565579e8"/>
        <function-ref name="isOn" scoped="" ref="0x2b0f56556c30"/>
        <function-ref name="set" scoped="" ref="0x2b0f56557088"/>
        <function-ref name="start" scoped="" ref="0x2b0f56557e70"/>
        <function-ref name="stop" scoped="" ref="0x2b0f56556320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b0f56546e00" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b0f56546e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2b0f5655b0f8"/>
        <function-ref name="test" scoped="" ref="0x2b0f5655c798"/>
        <function-ref name="get" scoped="" ref="0x2b0f5655fa18"/>
        <function-ref name="setScale" scoped="" ref="0x2b0f5655b580"/>
        <function-ref name="getScale" scoped="" ref="0x2b0f5655ba58"/>
        <function-ref name="reset" scoped="" ref="0x2b0f5655d980"/>
        <function-ref name="overflow" scoped="" ref="0x2b0f5655d4f8"/>
        <function-ref name="isOn" scoped="" ref="0x2b0f5655cc20"/>
        <function-ref name="set" scoped="" ref="0x2b0f5655d020"/>
        <function-ref name="start" scoped="" ref="0x2b0f5655de08"/>
        <function-ref name="stop" scoped="" ref="0x2b0f5655c310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x2b0f56567160" loc="62:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2b0f56567160"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2b0f565674b0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2b0f56567638"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2b0f565677c0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2b0f56567948"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2b0f56567ad0"/>
        <function-ref name="setControl" scoped="" ref="0x2b0f56567c58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x2b0f56562268" loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2b0f56562268"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2b0f565625b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerSync" ref="0x2b0f56562958" loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerSync" scoped="" ref="0x2b0f56562958"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
      </instance>
      <interface-functions>
        <function-ref name="setAssr" scoped="" ref="0x2b0f565614b8"/>
        <function-ref name="controlBusy" scoped="" ref="0x2b0f56562e30"/>
        <function-ref name="compareBusy" scoped="" ref="0x2b0f56561020"/>
        <function-ref name="countBusy" scoped="" ref="0x2b0f565611a8"/>
        <function-ref name="getAssr" scoped="" ref="0x2b0f56561330"/>
        <function-ref name="setTimer0Synchronous" scoped="" ref="0x2b0f56562ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x2b0f56566190" loc="63:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2b0f56566190"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2b0f56564930"/>
        <function-ref name="fired" scoped="" ref="0x2b0f565656d0"/>
        <function-ref name="get" scoped="" ref="0x2b0f56566d10"/>
        <function-ref name="reset" scoped="" ref="0x2b0f56565b58"/>
        <function-ref name="isOn" scoped="" ref="0x2b0f56564db8"/>
        <function-ref name="set" scoped="" ref="0x2b0f565651f8"/>
        <function-ref name="start" scoped="" ref="0x2b0f56564020"/>
        <function-ref name="stop" scoped="" ref="0x2b0f565644a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b0f5656c180" loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b0f5656c180"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2b0f56568270"/>
        <function-ref name="test" scoped="" ref="0x2b0f5656a930"/>
        <function-ref name="get" scoped="" ref="0x2b0f5656cd00"/>
        <function-ref name="setScale" scoped="" ref="0x2b0f565686f8"/>
        <function-ref name="getScale" scoped="" ref="0x2b0f56568bd0"/>
        <function-ref name="reset" scoped="" ref="0x2b0f5656bb58"/>
        <function-ref name="overflow" scoped="" ref="0x2b0f5656b6d0"/>
        <function-ref name="isOn" scoped="" ref="0x2b0f5656adb8"/>
        <function-ref name="set" scoped="" ref="0x2b0f5656b1f8"/>
        <function-ref name="start" scoped="" ref="0x2b0f5656a020"/>
        <function-ref name="stop" scoped="" ref="0x2b0f5656a4a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x2b0f565f2cf0" loc="74:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x2b0f565f2cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b0f565f10a0"/>
        <function-ref name="runTask" scoped="" ref="0x2b0f565f1228"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x2b0f565f6c70" loc="49:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2b0f565f6c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b0f565f2410"/>
        <function-ref name="fired" scoped="" ref="0x2b0f565f34a8"/>
        <function-ref name="startAt" scoped="" ref="0x2b0f565f3db8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b0f565f3930"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b0f565f2898"/>
        <function-ref name="start" scoped="" ref="0x2b0f565f59f0"/>
        <function-ref name="stop" scoped="" ref="0x2b0f565f3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b0f565fbab0" loc="48:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b0f565fbab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b0f565f7d60"/>
        <function-ref name="fired" scoped="" ref="0x2b0f565f9470"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b0f565f71c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b0f565f9d10"/>
        <function-ref name="getdt" scoped="" ref="0x2b0f565f6648"/>
        <function-ref name="gett0" scoped="" ref="0x2b0f565f61f8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b0f565f98c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b0f565fa620"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b0f565f7790"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b0f565faac0"/>
        <function-ref name="stop" scoped="" ref="0x2b0f565f9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x2b0f5665c478" loc="71:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x2b0f5665c478"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b0f5665c7c8"/>
        <function-ref name="runTask" scoped="" ref="0x2b0f5665c950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x2b0f56641208" loc="49:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x2b0f56641208"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b0f5663d5f0"/>
        <function-ref name="fired" scoped="" ref="0x2b0f56640b28"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b0f5663e8c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b0f5663e470"/>
        <function-ref name="getdt" scoped="" ref="0x2b0f5665c020"/>
        <function-ref name="gett0" scoped="" ref="0x2b0f5663da40"/>
        <function-ref name="isRunning" scoped="" ref="0x2b0f5663e020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b0f56641d50"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b0f5663d020"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b0f56640238"/>
        <function-ref name="stop" scoped="" ref="0x2b0f566406d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b0f56647020" loc="48:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b0f56647020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b0f56642358"/>
        <function-ref name="fired" scoped="" ref="0x2b0f566469b8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b0f56644748"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b0f566442d8"/>
        <function-ref name="getdt" scoped="" ref="0x2b0f56642c38"/>
        <function-ref name="gett0" scoped="" ref="0x2b0f566427c8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b0f56646e28"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b0f56647b88"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b0f56644d38"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b0f56646088"/>
        <function-ref name="stop" scoped="" ref="0x2b0f56646548"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x2b0f56659c38" loc="48:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x2b0f56659c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b0f56658820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x2b0f56658e48" loc="49:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2b0f56658e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b0f56141530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b0f56141888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b0f5664ebe8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b0f5664d548"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b0f5664d0c0"/>
        <function-ref name="overflow" scoped="" ref="0x2b0f5664d9d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TouchScreen" ref="0x2b0f56662730" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <component-ref qname="TouchScreenC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TouchScreen" scoped="" ref="0x2b0f56662730"/></type-interface>
      <instance>
        <interfacedef-ref qname="TouchScreen"/>
      </instance>
      <interface-functions>
        <function-ref name="tsPressed" scoped="" ref="0x2b0f56662a80"/>
        <function-ref name="isPressed" scoped="" ref="0x2b0f56662c08"/>
        <function-ref name="calibrateTouchScreen" scoped="" ref="0x2b0f56662d90"/>
        <function-ref name="getXY" scoped="" ref="0x2b0f5665f020"/>
        <function-ref name="calibrated" scoped="" ref="0x2b0f5665f1a8"/>
        <function-ref name="xyReady" scoped="" ref="0x2b0f5665f330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read" ref="0x2b0f56676580" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b0f56676580"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b0f566790f8"/>
        <function-ref name="readDone" scoped="" ref="0x2b0f56679548"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcConfig" ref="0x2b0f56670b90" loc="23:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b0f56670b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b0f56673020"/>
        <function-ref name="getChannel" scoped="" ref="0x2b0f566731a8"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b0f56673330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LCD128x64" ref="0x2b0f56679b40" loc="21:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LCD128x64" scoped="" ref="0x2b0f56679b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b0f56675020"/>
        <function-ref name="initDone" scoped="" ref="0x2b0f566751a8"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b0f56675330"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b0f566754b8"/>
        <function-ref name="barWritten" scoped="" ref="0x2b0f56675640"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b0f566757c8"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b0f56675950"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b0f56675ad8"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b0f56675c60"/>
        <function-ref name="writeByte" scoped="" ref="0x2b0f56675de8"/>
        <function-ref name="setPixel" scoped="" ref="0x2b0f56674020"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b0f566741a8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b0f56674330"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b0f566745b8"/>
        <function-ref name="writePixel" scoped="" ref="0x2b0f56674740"/>
        <function-ref name="initLCD" scoped="" ref="0x2b0f566748c8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b0f56674a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="checkTS" ref="0x2b0f5668c948" loc="33:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="checkTS" scoped="" ref="0x2b0f5668c948"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b0f5668cc98"/>
        <function-ref name="runTask" scoped="" ref="0x2b0f5668ce20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TouchScreen" ref="0x2b0f56673628" loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TouchScreen" scoped="" ref="0x2b0f56673628"/></type-interface>
      <instance>
        <interfacedef-ref qname="TouchScreen"/>
      </instance>
      <interface-functions>
        <function-ref name="tsPressed" scoped="" ref="0x2b0f56673978"/>
        <function-ref name="isPressed" scoped="" ref="0x2b0f56673b00"/>
        <function-ref name="calibrateTouchScreen" scoped="" ref="0x2b0f56673c88"/>
        <function-ref name="getXY" scoped="" ref="0x2b0f56673e10"/>
        <function-ref name="calibrated" scoped="" ref="0x2b0f56672020"/>
        <function-ref name="xyReady" scoped="" ref="0x2b0f566721a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b0f568596c8" loc="25:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="TouchScreenC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b0f568596c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b0f56859a18"/>
        <function-ref name="configure" scoped="" ref="0x2b0f56859ba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b0f5685c830" loc="22:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="TouchScreenC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b0f5685c830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b0f5685b3d8"/>
        <function-ref name="readDone" scoped="" ref="0x2b0f5685b828"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2b0f5685bde0" loc="24:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="TouchScreenC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b0f5685bde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b0f56859170"/>
        <function-ref name="getChannel" scoped="" ref="0x2b0f568592f8"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b0f56859480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b0f566c83f0" loc="18:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b0f566c83f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b0f566c7020"/>
        <function-ref name="readDone" scoped="" ref="0x2b0f566c7470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2b0f566c52f0" loc="19:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2b0f566c52f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b0f566c5e70"/>
        <function-ref name="readDone" scoped="" ref="0x2b0f566c4320"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2b0f566c0020" loc="22:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b0f566c0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b0f566c0370"/>
        <function-ref name="getChannel" scoped="" ref="0x2b0f566c04f8"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b0f566c0680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2b0f566bf1c8" loc="23:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b0f566bf1c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b0f566bf518"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b0f566bf6a0"/>
        <function-ref name="request" scoped="" ref="0x2b0f566bf828"/>
        <function-ref name="granted" scoped="" ref="0x2b0f566bf9b0"/>
        <function-ref name="isOwner" scoped="" ref="0x2b0f566bfb38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b0f566d7890" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b0f566d7890"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b0f566d7be0"/>
        <function-ref name="configure" scoped="" ref="0x2b0f566d7d68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x2b0f566f09b0" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b0f566f09b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b0f566f0d00"/>
        <function-ref name="dataReady" scoped="" ref="0x2b0f566d7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x2b0f566d4d50" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b0f566d4d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b0f566d80d8"/>
        <function-ref name="cancel" scoped="" ref="0x2b0f566d8260"/>
        <function-ref name="dataReady" scoped="" ref="0x2b0f566d83e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b0f566dcca8" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b0f566dcca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b0f566d9020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b0f566d91a8"/>
        <function-ref name="request" scoped="" ref="0x2b0f566d9330"/>
        <function-ref name="granted" scoped="" ref="0x2b0f566d94b8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b0f566d9640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b0f566efd48" loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b0f566efd48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f566ec0d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x2b0f566ebde0" loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b0f566ebde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b0f566ea170"/>
        <function-ref name="dataReady" scoped="" ref="0x2b0f566ea2f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x2b0f566eb488" loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b0f566eb488"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b0f566eb7d8"/>
        <function-ref name="cancel" scoped="" ref="0x2b0f566eb960"/>
        <function-ref name="dataReady" scoped="" ref="0x2b0f566ebae8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Adc" ref="0x2b0f566fc940" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b0f566fc940"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2b0f566fcc90"/>
        <function-ref name="getAdmux" scoped="" ref="0x2b0f566fce18"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2b0f566e8020"/>
        <function-ref name="isEnabled" scoped="" ref="0x2b0f566e81a8"/>
        <function-ref name="enableAdc" scoped="" ref="0x2b0f566e8330"/>
        <function-ref name="setAdmux" scoped="" ref="0x2b0f566e84b8"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2b0f566e8640"/>
        <function-ref name="isComplete" scoped="" ref="0x2b0f566e87c8"/>
        <function-ref name="cancel" scoped="" ref="0x2b0f566e8950"/>
        <function-ref name="disableAdc" scoped="" ref="0x2b0f566e8ad8"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2b0f566e8c60"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2b0f566e8de8"/>
        <function-ref name="startConversion" scoped="" ref="0x2b0f566e7020"/>
        <function-ref name="isStarted" scoped="" ref="0x2b0f566e72a8"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2b0f566e7430"/>
        <function-ref name="setContinuous" scoped="" ref="0x2b0f566e75b8"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2b0f566e7740"/>
        <function-ref name="getValue" scoped="" ref="0x2b0f566e78c8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b0f566e7a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x2b0f566e9c10" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b0f566e9c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b0f566eb020"/>
        <function-ref name="stop" scoped="" ref="0x2b0f566eb1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x2b0f566e7d30" loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b0f566e7d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b0f566fb0d8"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b0f566fb260"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b0f566fb3e8"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b0f566fb570"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b0f566fb6f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x2b0f56731020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <component-ref qname="HplAtm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b0f56731020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2b0f56731370"/>
        <function-ref name="getAdmux" scoped="" ref="0x2b0f567314f8"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2b0f56731680"/>
        <function-ref name="isEnabled" scoped="" ref="0x2b0f56731808"/>
        <function-ref name="enableAdc" scoped="" ref="0x2b0f56731990"/>
        <function-ref name="setAdmux" scoped="" ref="0x2b0f56731b18"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2b0f56731ca0"/>
        <function-ref name="isComplete" scoped="" ref="0x2b0f56731e28"/>
        <function-ref name="cancel" scoped="" ref="0x2b0f56730020"/>
        <function-ref name="disableAdc" scoped="" ref="0x2b0f567301a8"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2b0f56730330"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2b0f567304b8"/>
        <function-ref name="startConversion" scoped="" ref="0x2b0f56730640"/>
        <function-ref name="isStarted" scoped="" ref="0x2b0f567308c8"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2b0f56730a50"/>
        <function-ref name="setContinuous" scoped="" ref="0x2b0f56730bd8"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2b0f56730d60"/>
        <function-ref name="getValue" scoped="" ref="0x2b0f5672f020"/>
        <function-ref name="dataReady" scoped="" ref="0x2b0f5672f1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x2b0f5672c1e8" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b0f5672c1e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2b0f5672c538"/>
        <function-ref name="getAdmux" scoped="" ref="0x2b0f5672c6c0"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2b0f5672c848"/>
        <function-ref name="isEnabled" scoped="" ref="0x2b0f5672c9d0"/>
        <function-ref name="enableAdc" scoped="" ref="0x2b0f5672cb58"/>
        <function-ref name="setAdmux" scoped="" ref="0x2b0f5672cce0"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2b0f5672ce68"/>
        <function-ref name="isComplete" scoped="" ref="0x2b0f5672b020"/>
        <function-ref name="cancel" scoped="" ref="0x2b0f5672b1a8"/>
        <function-ref name="disableAdc" scoped="" ref="0x2b0f5672b330"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2b0f5672b4b8"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2b0f5672b640"/>
        <function-ref name="startConversion" scoped="" ref="0x2b0f5672b7c8"/>
        <function-ref name="isStarted" scoped="" ref="0x2b0f5672ba50"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2b0f5672bbd8"/>
        <function-ref name="setContinuous" scoped="" ref="0x2b0f5672bd60"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2b0f5672a020"/>
        <function-ref name="getValue" scoped="" ref="0x2b0f5672a1a8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b0f5672a330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x2b0f5672a640" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2b0f5672a640"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2b0f5672a990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2b0f567dfb70" loc="92:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2b0f567dfb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2b0f567de020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b0f567de1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b0f567dd8a0" loc="96:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b0f567dd8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b0f567ddc10"/>
        <function-ref name="configure" scoped="" ref="0x2b0f567ddd98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x2b0f567de3f0" loc="93:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b0f567de3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b0f567de740"/>
        <function-ref name="requested" scoped="" ref="0x2b0f567de8c8"/>
        <function-ref name="granted" scoped="" ref="0x2b0f567dea50"/>
        <function-ref name="isOwner" scoped="" ref="0x2b0f567debd8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b0f567ded60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b0f567e0e50" loc="91:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b0f567e0e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b0f567df1e8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b0f567df370"/>
        <function-ref name="request" scoped="" ref="0x2b0f567df4f8"/>
        <function-ref name="granted" scoped="" ref="0x2b0f567df680"/>
        <function-ref name="isOwner" scoped="" ref="0x2b0f567df808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2b0f567dd020" loc="94:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b0f567dd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b0f567dd370"/>
        <function-ref name="userId" scoped="" ref="0x2b0f567dd4f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b0f56c05e38" loc="44:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b0f56c05e38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b0f56c041c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x2b0f56c04448" loc="45:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0x2b0f56c04448"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2b0f56c04798"/>
        <function-ref name="isEmpty" scoped="" ref="0x2b0f56c04920"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2b0f56c04aa8"/>
        <function-ref name="dequeue" scoped="" ref="0x2b0f56c04c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2b0f56c01388" loc="55:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2b0f56c01388"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2b0f56c016f8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b0f56c01880"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b0f56bfe020" loc="60:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b0f56bfe020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b0f56bfe390"/>
        <function-ref name="configure" scoped="" ref="0x2b0f56bfe518"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x2b0f56bfe7a0" loc="61:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x2b0f56bfe7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2b0f56bfeaf0"/>
        <function-ref name="isEmpty" scoped="" ref="0x2b0f56bfec78"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2b0f56bfee00"/>
        <function-ref name="dequeue" scoped="" ref="0x2b0f56bfd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x2b0f56c01ac8" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b0f56c01ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b0f56c01e18"/>
        <function-ref name="requested" scoped="" ref="0x2b0f56bff020"/>
        <function-ref name="granted" scoped="" ref="0x2b0f56bff1a8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b0f56bff330"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b0f56bff4b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x2b0f56bfd268" loc="62:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x2b0f56bfd268"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x2b0f56bfd5b8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x2b0f56bfd740"/>
        <function-ref name="led1On" scoped="" ref="0x2b0f56bfd8c8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x2b0f56bfda50"/>
        <function-ref name="led2Toggle" scoped="" ref="0x2b0f56bfdbd8"/>
        <function-ref name="get" scoped="" ref="0x2b0f56bfdd60"/>
        <function-ref name="led1Off" scoped="" ref="0x2b0f56bfc020"/>
        <function-ref name="setPort" scoped="" ref="0x2b0f56bfc1a8"/>
        <function-ref name="led0On" scoped="" ref="0x2b0f56bfc7c8"/>
        <function-ref name="set" scoped="" ref="0x2b0f56bfc4b8"/>
        <function-ref name="led2On" scoped="" ref="0x2b0f56bfc330"/>
        <function-ref name="led2Off" scoped="" ref="0x2b0f56bfc640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b0f56c02630" loc="54:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b0f56c02630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b0f56c029a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b0f56c02b28"/>
        <function-ref name="request" scoped="" ref="0x2b0f56c02cb0"/>
        <function-ref name="granted" scoped="" ref="0x2b0f56c02e38"/>
        <function-ref name="isOwner" scoped="" ref="0x2b0f56c01020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2b0f56bff700" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b0f56bff700"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b0f56bffa50"/>
        <function-ref name="userId" scoped="" ref="0x2b0f56bffbd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x2b0f56bfca90" loc="75:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x2b0f56bfca90"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b0f56bfcde0"/>
        <function-ref name="runTask" scoped="" ref="0x2b0f56bfb020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x2b0f567ffb98" loc="72:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b0f567ffb98"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x2b0f56810020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x2b0f56810268" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b0f56810268"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b0f568105b8"/>
        <function-ref name="requested" scoped="" ref="0x2b0f56810740"/>
        <function-ref name="granted" scoped="" ref="0x2b0f568108c8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b0f56810a50"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b0f56810bd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x2b0f567ff478" loc="70:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b0f567ff478"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b0f567ff7c8"/>
        <function-ref name="stop" scoped="" ref="0x2b0f567ff950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2b0f56810e20" loc="74:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b0f56810e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b0f5680f1a8"/>
        <function-ref name="userId" scoped="" ref="0x2b0f5680f330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x2b0f56c36740" loc="62:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b0f56c36740"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x2b0f56c36a90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x2b0f56c36cd8" loc="63:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b0f56c36cd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b0f56c350a0"/>
        <function-ref name="requested" scoped="" ref="0x2b0f56c35228"/>
        <function-ref name="granted" scoped="" ref="0x2b0f56c353b0"/>
        <function-ref name="isOwner" scoped="" ref="0x2b0f56c35538"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b0f56c356c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x2b0f56c36020" loc="60:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b0f56c36020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b0f56c36370"/>
        <function-ref name="stop" scoped="" ref="0x2b0f56c364f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2b0f56c35908" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b0f56c35908"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b0f56c35c58"/>
        <function-ref name="userId" scoped="" ref="0x2b0f56c35de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b0f56808c68" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b0f56808c68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b0f568077e8"/>
        <function-ref name="readDone" scoped="" ref="0x2b0f56807c38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2b0f56805880" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2b0f56805880"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b0f56804490"/>
        <function-ref name="readDone" scoped="" ref="0x2b0f56804918"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2b0f56803e78" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b0f56803e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b0f568021f8"/>
        <function-ref name="getChannel" scoped="" ref="0x2b0f56802380"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b0f56802508"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0x2b0f56803020" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b0f56803020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b0f56803370"/>
        <function-ref name="cancel" scoped="" ref="0x2b0f568034f8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b0f56803680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="acquiredData" ref="0x2b0f56818080" loc="108:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="acquiredData" scoped="" ref="0x2b0f56818080"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b0f568183d0"/>
        <function-ref name="runTask" scoped="" ref="0x2b0f56818558"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b0f5682c020" loc="24:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b0f5682c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b0f5682cb88"/>
        <function-ref name="readDone" scoped="" ref="0x2b0f5683d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x2b0f5683d860" loc="26:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x2b0f5683d860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b0f5683b458"/>
        <function-ref name="readDone" scoped="" ref="0x2b0f5683b8c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2b0f5683a020" loc="27:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b0f5683a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b0f5683a390"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b0f5683a518"/>
        <function-ref name="request" scoped="" ref="0x2b0f5683a6a0"/>
        <function-ref name="granted" scoped="" ref="0x2b0f5683a828"/>
        <function-ref name="isOwner" scoped="" ref="0x2b0f5683a9b0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:/homes/hglanzer/GIT/tinyos/tos/interfaces/Init.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2b0f561bc178" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/Init.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x2b0f561b4e40" loc="60:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
        <documentation loc="51:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x2b0f561c2290" loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x2b0f561c2020" loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x2b0f561c6940" loc="31:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="27:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x2b0f561c5378" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2b0f561c5108" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x2b0f561c5e00" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2b0f561c5b90" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x2b0f561c4698" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x2b0f561d90d8" loc="44:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x2b0f561d97a0" loc="45:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x2b0f561da328" loc="42:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x2b0f561d8570" loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b0f561da9c8" loc="43:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x2b0f561d9e58" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b0f561dc5a8" loc="40:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x2b0f561dcc18" loc="41:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2b0f560c73a0" loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="54:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x2b0f560c5290" loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x2b0f560c7ab8" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x2b0f560d1070" loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x2b0f560d1860" loc="75:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
        <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
      <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x2b0f56184450" loc="76:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x2b0f5619ad28" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x2b0f561201a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x2b0f561a46d8" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b0f563877a8" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b0f563877a8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2b0f56392020" loc="136:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="132:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2b0f56383ba0" loc="83:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="80:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x2b0f56394800" loc="114:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="100:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b0f56394268" loc="114:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2b0f56394580" loc="114:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x2b0f56382af8" loc="98:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="94:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x2b0f56391020" loc="151:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="146:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x2b0f56392740" loc="144:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="138:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2b0f56382360" loc="92:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="86:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x2b0f563842d0" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b0f56384060" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x2b0f563936f0" loc="129:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="116:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b0f56393158" loc="129:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2b0f56393470" loc="129:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x2b0f56384d10" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b0f56384aa0" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b0f56383500" loc="78:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LCD128x64" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
      <function command="" provided="0" name="startClearScreen" ref="0x2b0f56379c70" loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2b0f56379a00" loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="initDone" ref="0x2b0f56378328" loc="38:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteBar" ref="0x2b0f5637fc18" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b0f5637f020" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b0f5637f320" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x2b0f5637f650" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="width" ref="0x2b0f5637f978" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteLine" ref="0x2b0f56379300" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b0f5637a6d0" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b0f5637a9d0" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="xEnd" ref="0x2b0f5637acf0" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="yEnd" ref="0x2b0f56379060" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="barWritten" ref="0x2b0f563896a0" loc="48:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteRectangle" ref="0x2b0f5637d020" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b0f5637e320" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b0f5637e620" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="a" ref="0x2b0f5637e920" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="b" ref="0x2b0f5637ec20" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="screenCleared" ref="0x2b0f56389d40" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="lineWritten" ref="0x2b0f56389020" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteString" ref="0x2b0f5637a020" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b0f5637b718" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="x" ref="0x2b0f5637ba18" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b0f5637bd18" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="writeByte" ref="0x2b0f5636fd40" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b0f5636f490" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b0f5636f790" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x2b0f5636fab0" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPixel" ref="0x2b0f563808a0" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b0f56380320" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b0f56380620" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="circleWritten" ref="0x2b0f563789c8" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteCircle" ref="0x2b0f5637b040" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="xcenter" ref="0x2b0f5637d720" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="ycenter" ref="0x2b0f5637da58" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="radius" ref="0x2b0f5637dd88" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="rectangleWritten" ref="0x2b0f5638a858" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writePixel" ref="0x2b0f5636eca0" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b0f5636e408" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b0f5636e708" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="on" ref="0x2b0f5636ea10" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initLCD" ref="0x2b0f56372e10" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2b0f56372ba0" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stringWritten" ref="0x2b0f5638a098" loc="42:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TouchScreen" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
      <function event="" provided="0" name="tsPressed" ref="0x2b0f5639b908" loc="19:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isPressed" ref="0x2b0f5639c020" loc="8:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x2b0f5639dc98" loc="8:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateTouchScreen" ref="0x2b0f5639d020" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getXY" ref="0x2b0f5639d670" loc="6:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="calibrated" ref="0x2b0f5639b290" loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="xyReady" ref="0x2b0f5639cbe0" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b0f5639c660" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b0f5639c960" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b0f564b4560" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b0f564b4560"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x2b0f564b4df0" loc="61:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b0f55ec3db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b0f564d43f8" loc="57:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b0f564d43f8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2b0f564d4628" loc="57:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b0f564d4628"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x2b0f564d3020" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b0f564d4628"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x2b0f564d2070" loc="76:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x2b0f564d3838" loc="71:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x2b0f564d2760" loc="82:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="78:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b0f564c8ac8" loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b0f564c8ac8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2b0f564c8cf8" loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b0f564c8cf8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2b0f564c17a0" loc="109:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="105:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b0f564c8cf8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2b0f564c3770" loc="78:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x2b0f564c2d70" loc="103:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="90:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b0f564c8cf8"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b0f564c8cf8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b0f564c27d0" loc="103:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b0f564c8cf8"/></type-var>
          </variable>
          <variable name="dt" ref="0x2b0f564c2af0" loc="103:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b0f564c8cf8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2b0f564c2020" loc="88:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="81:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x2b0f564d9020" loc="116:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="111:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b0f564c8cf8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2b0f564c4810" loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b0f564c8cf8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b0f564c45a0" loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b0f564c8cf8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b0f564c3020" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="68:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControl" ref="0x2b0f564fba58" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <documentation loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b0f5614da08"/>
            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2b0f5614de10"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x2b0f564f5e18" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <documentation loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b0f5615a100"/>
            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2b0f5615a508"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x2b0f564f6c70" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b0f56151980"/>
            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2b0f56151d88"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x2b0f564f5678" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b0f56151980"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2b0f56151d88"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x2b0f564f5408" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b0f56151980"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2b0f56151d88"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x2b0f564f4828" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b0f5615a100"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2b0f5615a508"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x2b0f564f45b8" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b0f5615a100"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2b0f5615a508"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x2b0f564f64c8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b0f5614da08"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2b0f5614de10"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x2b0f564f6258" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b0f5614da08"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2b0f5614de10"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerSync" loc="22:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setTimer0Synchronous" ref="0x2b0f5651a328" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Turn on timer 0 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBusy" ref="0x2b0f5651aa30" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; @return TRUE if TCCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareBusy" ref="0x2b0f56519258" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; @return TRUE if OCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x2b0f56519a08" loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; @return TRUE if TCNT0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x2b0f56502110" loc="28:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="24:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Read timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer0 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b0f56154118"/>
            <typename><typedef-ref name="Atm128Assr_t" ref="0x2b0f56154520"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x2b0f56502ac0" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Set timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer0 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b0f56154118"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x2b0f56154520"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b0f56502850" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b0f56154118"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x2b0f56154520"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x2b0f5650c068" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b0f5650c068"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x2b0f56508738" loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2b0f5650a9d0" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b0f5650c920" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b0f5650c068"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x2b0f56509110" loc="62:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x2b0f56506020" loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b0f5650a290" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b0f5650c068"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x2b0f5650a020" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b0f5650c068"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2b0f56509808" loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b0f56508020" loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x2b0f564eb418" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b0f564eb418"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x2b0f56500900" loc="98:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="97:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x2b0f564e8a40" loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b0f564ebcb8" loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b0f564eb418"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x2b0f564ff290" loc="104:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x2b0f564ff020" loc="104:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x2b0f564ffa10" loc="110:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="106:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x2b0f564e94c0" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x2b0f564ead50" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x2b0f565001d8" loc="93:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="89:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b0f564ea630" loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b0f564eb418"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x2b0f564ea3c0" loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b0f564eb418"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2b0f564e9bb8" loc="78:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b0f564e8328" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x2b0f5667ab70" loc="49:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b0f5667ab70"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x2b0f566773e0" loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
        <documentation loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x2b0f566760b8" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b0f5667ab70"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x2b0f56677af0" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x2b0f56677df0" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b0f5667ab70"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcConfig" loc="19:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
      <documentation loc="13:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <short>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.</short>
        <long>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRefVoltage" ref="0x2b0f56670070" loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="27:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain reference voltage&#10; </short>
          <long>&#10; Obtain reference voltage&#10; @return The reference voltage to use. Must be one of the &#10;   ATM128_ADC_VREF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x2b0f56671858" loc="25:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="20:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain channel.</short>
          <long>&#10; Obtain channel.&#10; @return The A/D channel to use. Must be one of the ATM128_ADC_SNGL_xxx&#10;   or ATM128_ADC_DIFF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPrescaler" ref="0x2b0f56670850" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain prescaler value.</short>
          <long>&#10; Obtain prescaler value.&#10; @return The prescaler value to use. Must be one of the &#10;   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x2b0f566caa08" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x2b0f566ca258" loc="59:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x2b0f566c3378" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b0f566c3378"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x2b0f566c3be8" loc="58:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x2b0f566c28e8" loc="66:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
        <documentation loc="60:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b0f566c3378"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x2b0f566c2368" loc="66:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x2b0f566c2668" loc="66:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b0f566c3378"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
      <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x2b0f566dec78" loc="120:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="104:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x2b0f566dfd50" loc="97:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="90:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x2b0f566df460" loc="88:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="78:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x2b0f566de518" loc="102:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="99:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x2b0f566dd848" loc="128:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="122:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcMultiple" loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.&#10; &#60;p>&#10; Because of the possibility that samples may be imprecise after &#10; switching channels and/or reference voltages, and because there&#10; is a one sample delay on swithcing channels and reference voltages,&#10; Atm128ADCMultiple is complex. Two straightforward uses are:&#10; &#60;ol type=&#34;A&#34;>&#10; &#60;li>Acquire N samples from channel C:&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C at the desired rate&#10;       (note that the choice of prescalers is very limited, so you&#10;       don't have many choices for sampling rate)&#10;    &#60;li>ignore the first dataReady event&#10;    &#60;li>use the results of the next N dataReady() events, return FALSE&#10;       on the last one&#10;    &#60;/ol>&#10; &#60;li>Acquire one sample each from channels C1, ..., Cn (this pseudocode&#10;    assumes that none of these channels are differential)&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C1&#10;    &#60;li>on the ith dataReady event switch to channel Ci+1 by changing&#10;       *newChannel&#10;    &#60;li>the data passed to the ith dataReady event is for channel Ci-1&#10;       (the data from the first dataReady event is ignored)&#10;    &#60;/ol>&#10; &#60;/ol>&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x2b0f566d0768" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.</short>
          <long>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.&#10;&#10; @param channel Initial A/D conversion channel. The channel can &#10;   be changed in the dataReady event, though these changes happen&#10;   with a one-sample delay (this is a hardware restriction).&#10; @param refVoltage Initial A/D reference voltage. See the&#10;   ATM128_ADC_VREF_xxx constants in Atm128ADC.h. Like the channel,&#10;   the reference voltage can be changed in the dataReady event with&#10;   a one-sample delay.&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in reference voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x2b0f566d1a60" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x2b0f566d1db8" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x2b0f566d0178" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x2b0f566d04c8" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b0f566f03f0" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Returns the next sample in a free-running conversion.</short>
          <long>&#10; Returns the next sample in a free-running conversion. Allow the user&#10; to switch channels and/or reference voltages with a one sample delay.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if this conversion was precise, FALSE if it wasn't &#10;   (we assume that the second conversion after a change of reference&#10;   voltage or after switching to a differential channel is precise)&#10; @param channel Channel this sample was from.&#10; @param newChannel Change this parameter to switch to a new channel&#10;   for the second next sample.&#10; @param newRefVoltage Change this parameter to change the reference &#10;   voltage for the second next sample.&#10;&#10; @return TRUE to continue sampling, FALSE to stop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b0f566cf368" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x2b0f566cf688" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0x2b0f566cf9c0" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="newChannel" ref="0x2b0f566cfd70" loc="120:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="newRefVoltage" ref="0x2b0f566f0140" loc="120:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcSingle" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x2b0f566d50d8" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Initiates an ADC conversion on a given channel.</short>
          <long>&#10; Initiates an ADC conversion on a given channel.&#10;&#10; @param channel A/D conversion channel.&#10; @param refVoltage Select reference voltage for A/D conversion. See&#10;   the ATM128_ADC_VREF_xxx constants in Atm128ADC.h&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in refernce voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x2b0f566d63d8" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x2b0f566d6730" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x2b0f566d6a98" loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x2b0f566d6de8" loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2b0f566d4930" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Cancel an outstanding getData operation.</short>
          <long>&#10; Cancel an outstanding getData operation. Use with care, to&#10; avoid problems with races between the dataReady event and cancel.&#10; @return TRUE if a conversion was in-progress or an interrupt&#10;   was pending. dataReady will not be signaled. FALSE if the&#10;   conversion was already complete. dataReady will be (or has&#10;   already been) signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b0f566d40b8" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.</short>
          <long>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if the conversion precise, FALSE if it wasn't. This&#10;   values matches the result from the &#60;code>getData&#60;/code> call.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b0f566d5ae0" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x2b0f566d5e00" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Adc" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <short>&#10; HPL interface to the Atmega128 A/D conversion subsystem.</short>
        <long>&#10; HPL interface to the Atmega128 A/D conversion subsystem. Please see the&#10; Atmega128 manual for full details on the functioning of this subsystem.&#10; &#60;p>&#10; A word of warning: the Atmega128 SLEEP instruction initiates an A/D&#10; conversion when the ADC and ADC interrupt are enabled.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0x2b0f567000d8" loc="114:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="111:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdmux" ref="0x2b0f566e61d8" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Read the ADMUX (ADC selection) register&#10; @return Current ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b0f5613a478"/>
            <typename><typedef-ref name="Atm128Admux_t" ref="0x2b0f5613a930"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPrescaler" ref="0x2b0f566fe338" loc="140:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="135:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set ADC prescaler selection bits&#10; </short>
          <long>&#10; Set ADC prescaler selection bits&#10; @param scale New ADC prescaler. Must be one of the ATM128_ADC_PRESCALE_xxx&#10;   values from Atm128Adc.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x2b0f566fe0c8" loc="140:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x2b0f56700918" loc="122:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="118:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is ADC enabled?&#10; </short>
          <long>&#10; Is ADC enabled?&#10; @return TRUE if the ADC is enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAdc" ref="0x2b0f566e3d18" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdmux" ref="0x2b0f566e6bb0" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Set the ADMUX (ADC selection) register&#10; @param admux New ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b0f5613a478"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x2b0f5613a930"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="admux" ref="0x2b0f566e6940" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b0f5613a478"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x2b0f5613a930"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterruption" ref="0x2b0f566e2b88" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isComplete" ref="0x2b0f566ff870" loc="133:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="128:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.</short>
          <long>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.&#10; @return TRUE if the A/D conversion is complete, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2b0f566fead0" loc="150:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="142:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Cancel A/D conversion and any pending A/D interrupt.</short>
          <long>&#10; Cancel A/D conversion and any pending A/D interrupt. Also disables the&#10; ADC interruption (otherwise a sample might start at the next sleep&#10; instruction). This command can assume that the A/D converter is enabled. &#10; @return TRUE if an A/D conversion was in progress or an A/D interrupt&#10;   was pending, FALSE otherwise. In single conversion mode, a return&#10;   of TRUE implies that the dataReady event will not be signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAdc" ref="0x2b0f566e2448" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetInterrupt" ref="0x2b0f566e1a48" loc="99:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="96:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Clear the ADC interrupt flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterruption" ref="0x2b0f566e1328" loc="95:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x2b0f567011d8" loc="106:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Start ADC conversion.</short>
          <long>&#10; Start ADC conversion. If ADC interrupts are enabled, the dataReady event&#10; will be signaled once (in non-continuous mode) or repeatedly (in&#10; continuous mode).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isStarted" ref="0x2b0f566ff0d8" loc="127:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="123:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion in progress?&#10; </short>
          <long>&#10; Is A/D conversion in progress?&#10; @return TRUE if the A/D conversion is in progress, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdcsra" ref="0x2b0f566e5dd0" loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Set the ADCSRA (ADC control) register&#10; @param adcsra New ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b0f56142020"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2b0f561426e8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adcsra" ref="0x2b0f566e5b60" loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b0f56142020"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2b0f561426e8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setContinuous" ref="0x2b0f56701990" loc="110:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="107:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdcsra" ref="0x2b0f566e53e0" loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Read the ADCSRA (ADC control) register&#10; @return Current ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b0f56142020"/>
            <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2b0f561426e8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x2b0f566e35b8" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the latest A/D conversion result&#10; </short>
          <long>&#10; Read the latest A/D conversion result&#10; @return A/D value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b0f566fc640" loc="156:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="152:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; A/D interrupt occured&#10; </short>
          <long>&#10; A/D interrupt occured&#10; @param data Latest A/D conversion result&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b0f566fc3d0" loc="156:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b0f55ec3378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x2b0f566e9020" loc="95:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b0f566e97f8" loc="105:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x2b0f5675fc98" loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x2b0f5675c5c0" loc="61:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x2b0f5675aa78" loc="56:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x2b0f5677ca70" loc="73:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x2b0f5675a258" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x2b0f5677c2a8" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x2b0f5677b360" loc="81:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x2b0f56779020" loc="90:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x2b0f56779810" loc="98:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x2b0f5676e020" loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b0f560cbae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b0f56775218"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x2b0f5676fc60" loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b0f56775218"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x2b0f567700d8" loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x2b0f56770b58" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b0f560c24c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b0f56775218"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x2b0f567708e8" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b0f56775218"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x2b0f5676f428" loc="70:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x2b0f56775218"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x2b0f56792550" loc="61:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="58:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x2b0f56792c88" loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x2b0f56791420" loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x2b0f567902a8" loc="83:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x2b0f567b28b0" loc="100:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="96:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b0f567b1070" loc="117:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="103:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x2b0f56791b38" loc="77:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="74:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b0f567b1b70" loc="134:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="120:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x2b0f567b1900" loc="134:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPort" ref="0x2b0f567b0a08" loc="137:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x2b0f567b0468" loc="137:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
          <variable name="pval" ref="0x2b0f567b0788" loc="137:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b0f55ec1910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x2b0f56793df8" loc="56:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x2b0f56790a18" loc="89:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="86:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x2b0f567b2178" loc="94:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="91:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x2b0f567fb110" loc="62:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
