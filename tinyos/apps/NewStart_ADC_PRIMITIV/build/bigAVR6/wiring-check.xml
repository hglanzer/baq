<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="17:BlinkAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2b31ed581840"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2b31ed57e220"/></to>
    </wire>
    <wire loc="72:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2b31ed57e220"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2b31ed57c878"/></to>
    </wire>
    <wire loc="18:BlinkAppC.nc">
      <from><interface-ref name="LCD128x64" scoped="" ref="0x2b31ed748470"/></from>
      <to><interface-ref name="Lcd128x64" scoped="" ref="0x2b31ed787a98"/></to>
    </wire>
    <wire loc="9:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64C.nc">
      <from><interface-ref name="Lcd128x64" scoped="" ref="0x2b31ed787a98"/></from>
      <to><interface-ref name="LCD128x64" scoped="" ref="0x2b31ed7ae468"/></to>
    </wire>
    <wire loc="19:BlinkAppC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b31ed743678"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b31ed844920"/></to>
    </wire>
    <wire loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b31ed844920"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b31ed866488"/></to>
    </wire>
    <wire loc="20:BlinkAppC.nc">
      <from><interface-ref name="Timer0" scoped="" ref="0x2b31ed75cc08"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b31ed9e8420"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x2b31ed9e8420"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2b31ed9e07d8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="21:BlinkAppC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x2b31ed746020"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b31ed97ae30"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Read" scoped="" ref="0x2b31ed97ae30"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b31ed98f4c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b31ed57d620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b31ed9f60f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b31ed57d620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b31edea4e68"/></to>
    </wire>
    <wire loc="67:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2b31ed72d020"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2b31ed486600"/></to>
    </wire>
    <wire loc="53:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2b31ed486600"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2b31ed53d448"/></to>
    </wire>
    <wire loc="68:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2b31ed72d9f8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b31ed580620"/></to>
    </wire>
    <wire loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b31ed580620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b31ed58f600"/></to>
    </wire>
    <wire loc="71:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b31ed72c140"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x2b31ed57d620"/></to>
    </wire>
    <wire loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2b31ed57b380"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b31ed85ad48"/></to>
    </wire>
    <wire loc="59:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b31ed583618"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b31ed7108f0"/></to>
    </wire>
    <wire loc="61:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x2b31ed58e398"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b31ed7102c0"/></to>
    </wire>
    <wire loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x2b31ed58fca0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2b31ed588b98"/></to>
    </wire>
    <wire loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2b31ed588b98"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2b31ed592698"/></to>
    </wire>
    <wire loc="63:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2b31ed595360"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2b31ed57b380"/></to>
    </wire>
    <wire loc="29:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2b31ed591b08"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2b31ed595360"/></to>
    </wire>
    <wire loc="191:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x2b31ed5daaf0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31ed6b3970"/></to>
    </wire>
    <wire loc="165:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x2b31ed5bc658"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b31ed65a020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b31ed65a020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edcfe710"/></to>
    </wire>
    <wire loc="176:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x2b31ed5cd658"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b31ed669d60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b31ed669d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edd6e710"/></to>
    </wire>
    <wire loc="185:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x2b31ed5d2348"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b31ed66b5b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b31ed66b5b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edded710"/></to>
    </wire>
    <wire loc="143:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x2b31ed5a8348"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b31ed631740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b31ed631740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edbe2970"/></to>
    </wire>
    <wire loc="183:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x2b31ed5d4020"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b31ed66d2a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b31ed66d2a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31eddf3710"/></to>
    </wire>
    <wire loc="146:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x2b31ed5a6658"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b31ed639930"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b31ed639930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edc2d6a8"/></to>
    </wire>
    <wire loc="157:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x2b31ed5b77e0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b31ed648740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b31ed648740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edcb7710"/></to>
    </wire>
    <wire loc="168:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x2b31ed5c7af0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b31ed656430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b31ed656430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edd21710"/></to>
    </wire>
    <wire loc="179:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x2b31ed5caaf0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b31ed665120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b31ed665120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edd93710"/></to>
    </wire>
    <wire loc="138:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x2b31ed5a0af0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b31ed626020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b31ed626020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edbcc970"/></to>
    </wire>
    <wire loc="149:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x2b31ed5b1af0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b31ed636d60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b31ed636d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edc4c710"/></to>
    </wire>
    <wire loc="160:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x2b31ed5b4c78"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b31ed645bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b31ed645bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edcae710"/></to>
    </wire>
    <wire loc="171:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x2b31ed5c3020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b31ed6538c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b31ed6538c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edd18710"/></to>
    </wire>
    <wire loc="188:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x2b31ed5cf7e0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b31ed67aa50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b31ed67aa50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edde4710"/></to>
    </wire>
    <wire loc="194:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x2b31ed5d67e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31ed6c8020"/></to>
    </wire>
    <wire loc="174:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x2b31ed5c1348"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b31ed65ba50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b31ed65ba50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edd74710"/></to>
    </wire>
    <wire loc="141:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x2b31ed5aa020"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b31ed623430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b31ed623430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edbe9970"/></to>
    </wire>
    <wire loc="152:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x2b31ed5ad1a0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b31ed642120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b31ed642120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edc43710"/></to>
    </wire>
    <wire loc="192:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x2b31ed5d84d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31ed6c0ab0"/></to>
    </wire>
    <wire loc="155:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x2b31ed5b94d0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b31ed64a500"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b31ed64a500"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edc936a8"/></to>
    </wire>
    <wire loc="166:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x2b31ed5bb7e0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b31ed659120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b31ed659120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edd27710"/></to>
    </wire>
    <wire loc="177:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x2b31ed5cc7e0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b31ed668e18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b31ed668e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edd6b710"/></to>
    </wire>
    <wire loc="186:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x2b31ed5d14d0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b31ed67c740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b31ed67c740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31eddea710"/></to>
    </wire>
    <wire loc="144:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x2b31ed5a74d0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b31ed6308c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b31ed6308c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edbdf970"/></to>
    </wire>
    <wire loc="147:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x2b31ed5a57e0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b31ed638a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b31ed638a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edc52710"/></to>
    </wire>
    <wire loc="158:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x2b31ed5b6968"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b31ed6478c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b31ed6478c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edcb4710"/></to>
    </wire>
    <wire loc="169:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x2b31ed5c6c78"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b31ed6555b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b31ed6555b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edd1e710"/></to>
    </wire>
    <wire loc="180:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x2b31ed5c9c78"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b31ed6642a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b31ed6642a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edd90710"/></to>
    </wire>
    <wire loc="139:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x2b31ed59fc78"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b31ed625120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b31ed625120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edbef970"/></to>
    </wire>
    <wire loc="150:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x2b31ed5b0c78"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b31ed635e18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b31ed635e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edc49710"/></to>
    </wire>
    <wire loc="161:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x2b31ed5b3e00"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b31ed643d60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b31ed643d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edcab710"/></to>
    </wire>
    <wire loc="189:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x2b31ed5db968"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b31ed679bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b31ed679bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edde1710"/></to>
    </wire>
    <wire loc="164:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x2b31ed5bd1a0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b31ed64ce40"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b31ed64ce40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edd016a8"/></to>
    </wire>
    <wire loc="175:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x2b31ed5ce4d0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b31ed66abd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b31ed66abd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edd71710"/></to>
    </wire>
    <wire loc="184:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x2b31ed5d31a0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b31ed66c430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b31ed66c430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31eddf0710"/></to>
    </wire>
    <wire loc="195:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x2b31ed5e3968"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31ed6d5180"/></to>
    </wire>
    <wire loc="142:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x2b31ed5a91a0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b31ed6325b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b31ed6325b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edbe6970"/></to>
    </wire>
    <wire loc="153:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x2b31ed5ac348"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b31ed6412a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b31ed6412a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edc67710"/></to>
    </wire>
    <wire loc="182:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x2b31ed5c8e00"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b31ed66e1e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b31ed66e1e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31eddc86a8"/></to>
    </wire>
    <wire loc="156:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x2b31ed5b8658"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b31ed6495b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b31ed6495b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edcba710"/></to>
    </wire>
    <wire loc="167:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x2b31ed5ba968"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b31ed6572a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b31ed6572a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edd24710"/></to>
    </wire>
    <wire loc="178:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x2b31ed5cb968"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b31ed666020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b31ed666020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edd96710"/></to>
    </wire>
    <wire loc="187:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x2b31ed5d0658"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b31ed67b8c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b31ed67b8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edde7710"/></to>
    </wire>
    <wire loc="137:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x2b31ed593870"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b31ed628dc0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b31ed628dc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edbcf970"/></to>
    </wire>
    <wire loc="148:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x2b31ed5b2968"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b31ed637bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b31ed637bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edc4f710"/></to>
    </wire>
    <wire loc="159:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x2b31ed5b5af0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b31ed646a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b31ed646a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edcb1710"/></to>
    </wire>
    <wire loc="170:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x2b31ed5c5e00"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b31ed654740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b31ed654740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edd1b710"/></to>
    </wire>
    <wire loc="193:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x2b31ed5d7658"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31ed6bcc38"/></to>
    </wire>
    <wire loc="173:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x2b31ed5c21a0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b31ed65c930"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b31ed65c930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edd776a8"/></to>
    </wire>
    <wire loc="162:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x2b31ed5be020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b31ed652e18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b31ed652e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edcd1710"/></to>
    </wire>
    <wire loc="140:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x2b31ed59ee00"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b31ed6242a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b31ed6242a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edbec970"/></to>
    </wire>
    <wire loc="151:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x2b31ed5ae020"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b31ed633020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b31ed633020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b31edc46710"/></to>
    </wire>
    <wire loc="54:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed4891c8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed53c2b0"/></to>
    </wire>
    <wire loc="55:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x2b31ed545758"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x2b31ed55c660"/></to>
    </wire>
    <wire loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x2b31ed5622b0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x2b31edaaa268"/></to>
    </wire>
    <wire loc="28:BlinkC.nc">
      <from><interface-ref name="calc_xy" scoped="" ref="0x2b31ed757a90"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed4891c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="51:BlinkC.nc">
      <from><interface-ref name="update_display" scoped="" ref="0x2b31ed762ad0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed4891c8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="182:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeRectangle" scoped="" ref="0x2b31ed7f64d8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed4891c8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="262:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="clearScreen" scoped="" ref="0x2b31ed81a420"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed4891c8"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="230:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeString" scoped="" ref="0x2b31ed80f368"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed4891c8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="198:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeCircle" scoped="" ref="0x2b31ed806020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed4891c8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeLine" scoped="" ref="0x2b31ed816b28"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed4891c8"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="wait4Controller" scoped="" ref="0x2b31ed7be4e8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed4891c8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b31ed854420"/></from>
      <to><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b31ed866de0"/></to>
    </wire>
    <wire loc="66:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2b31ed785c00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b31ed964e50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2b31ed964e50"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b31edea0630"/></to>
    </wire>
    <wire loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b31ed9608a0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b31ed8528b0"/></to>
    </wire>
    <wire loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b31ed86f940"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b31ed8a5020"/></to>
    </wire>
    <wire loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b31ed8a5020"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b31ed8a01e8"/></to>
    </wire>
    <wire loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b31ed862d30"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b31ed583618"/></to>
    </wire>
    <wire loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x2b31ed95dc30"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x2b31ed864c10"/></to>
    </wire>
    <wire loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b31ed95c988"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b31ed9613f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b31ed9613f0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b31ede9fac8"/></to>
    </wire>
    <wire loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x2b31ed89e640"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x2b31ed565a80"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x2b31ed963b70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x2b31ede9f388"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2b31ed960020"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2b31ededb700"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b31ededa020"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b31ed9608a0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Queue" scoped="" ref="0x2b31ededa7a0"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x2b31edea2470"/></to>
    </wire>
    <wire>
      <from><interface-ref name="grantedTask" scoped="" ref="0x2b31eded7a90"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed4891c8"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x2b31edf0a020"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x2b31ed95dc30"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b31edf0a740"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b31ed95c3f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b31edf0acd8"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b31ed95c988"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2b31edf09908"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2b31ed982578"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b31ed988020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b31ed9ec420"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2b31ed988e38"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b31ed785c00"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b31ed8528b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b31ed9eccc8"/></to>
    </wire>
    <wire loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Read" scoped="" ref="0x2b31ed98f4c0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b31ed9b4680"/></to>
    </wire>
    <wire loc="31:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x2b31ed98d2f0"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x2b31ed99fdd8"/></to>
    </wire>
    <wire loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2b31ed9d7720"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b31ed988e38"/></to>
    </wire>
    <wire loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b31ed99b510"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b31ed988020"/></to>
    </wire>
    <wire loc="35:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x2b31ed9d8060"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b31ed9a01c8"/></to>
    </wire>
    <wire loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b31ed99c690"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b31ed844920"/></to>
    </wire>
    <wire loc="108:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <from><interface-ref name="acquiredData" scoped="" ref="0x2b31ed9aa940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed4891c8"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x2b31ed9e07d8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2b31ed9f6de8"/></to>
    </wire>
    <wire loc="61:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x2b31ed9f6de8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b31edb7c020"/></to>
    </wire>
    <wire loc="59:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b31ed9f60f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b31eda0cb90"/></to>
    </wire>
    <wire loc="65:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x2b31eda0b338"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x2b31edb95c38"/></to>
    </wire>
    <wire loc="35:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b31eda0cb90"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b31edaf9190"/></to>
    </wire>
    <wire loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x2b31edb76208"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b31edb38ab0"/></to>
    </wire>
    <wire loc="63:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x2b31edb33c70"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x2b31eda00748"/></to>
    </wire>
    <wire loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x2b31eda00748"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x2b31edaf9938"/></to>
    </wire>
    <wire loc="66:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x2b31edb94e48"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x2b31eda18e40"/></to>
    </wire>
    <wire loc="37:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x2b31eda18e40"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x2b31edb1aa90"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Counter" scoped="" ref="0x2b31edb1aa90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x2b31edf1b3d0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Init" scoped="" ref="0x2b31edaf9190"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b31edf1f980"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Alarm" scoped="" ref="0x2b31edaf9938"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x2b31edf1e160"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x2b31edf185a0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b31eda81e00"/></to>
    </wire>
    <wire loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x2b31eda81e00"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b31eda92180"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x2b31edf134a0"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x2b31eda9b020"/></to>
    </wire>
    <wire loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x2b31eda9b020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x2b31edaaf160"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Compare" scoped="" ref="0x2b31edf123b0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x2b31eda9a020"/></to>
    </wire>
    <wire loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x2b31eda9a020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x2b31edaad190"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerSync" scoped="" ref="0x2b31edf42510"/></from>
      <to><interface-ref name="TimerSync" scoped="" ref="0x2b31eda96218"/></to>
    </wire>
    <wire loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="TimerSync" scoped="" ref="0x2b31eda96218"/></from>
      <to><interface-ref name="TimerSync" scoped="" ref="0x2b31edaaa958"/></to>
    </wire>
    <wire>
      <from><interface-ref name="fired" scoped="" ref="0x2b31edb30cf0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed4891c8"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x2b31edb97478"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed4891c8"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <documentation loc="45:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
        <short>&#10; Initialisation component for mica-family platforms.</short>
        <long>&#10; Initialisation component for mica-family platforms. See TEP107. Each &#10; mica-family member must also provide a MotePlatformC with initialisation&#10; specific to that member.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
        <short>&#10; Internal platform boot code.</short>
        <long>&#10; Internal platform boot code.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc" safe="">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:59">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:58">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:57">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:56">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:53">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc" safe="">
      <documentation loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc" safe="">
      <documentation loc="49:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.11 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BlinkC" loc="12:BlinkC.nc" safe="">
      <module/>
    </component>
    <component qname="LCD128x64C" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64C.nc">
      <configuration/>
    </component>
    <component qname="LCD128x64P" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <module/>
    </component>
    <component qname="Atm128AdcC" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <documentation loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
        <short>&#10; HAL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HAL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcP" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc" safe="">
      <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
        <short>&#10; Internal component of the Atmega128 A/D HAL.</short>
        <long>&#10; Internal component of the Atmega128 A/D HAL.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Phil Buonadonna&#10; @author Hu Siquan &#60;husq@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128AdcC" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128AdcP" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc" safe="">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter" loc="89(Atm128AdcC.AdcArbiter):/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:atm128adc.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Queue" loc="42(Atm128AdcC.AdcArbiter.Queue):/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Arbiter" loc="52(Atm128AdcC.AdcArbiter.Arbiter):/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.PM" loc="67(Atm128AdcC.PM):/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.PM.PowerManager" loc="58(Atm128AdcC.PM.PowerManager):/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="BlinkAppC.ADC0" loc="21(BlinkAppC.ADC0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcP" loc="16:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
        <short>&#10; Support component for AdcReadClientC and AdcReadNowClientC.</short>
        <long>&#10; Support component for AdcReadClientC and AdcReadNowClientC.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AdcP" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc" safe="">
      <documentation loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
        <short>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.</short>
        <long>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcP.ArbitrateRead" loc="23(WireAdcP.ArbitrateRead):/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BlinkAppC.TIMER0" loc="44(BlinkAppC.TIMER0):/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmSyncC" loc="30(AlarmCounterMilliP.Atm128AlarmSyncC):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmSyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP" loc="30(AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmSyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2b31eda17c68"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer0SyncC" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer0SyncP" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
        <short>&#10; HPL interface to Atmega128 timer 0 in SYNC mode.</short>
        <long>&#10; HPL interface to Atmega128 timer 0 in SYNC mode. This is a specialised&#10; HPL component that assumes that timer 0 is used in SYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;--> CHANGED TO SYNC-Mode(CPL_CLK)&#9;hglanzer&#10;--> AS0=0 in ASSR&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2b31ed5e0ba0" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2b31ed5ea020" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2b31ed5ea368" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2b31ed5ee610" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2b31ed5ee978" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2b31ed5eece0" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2b31ed5eb060" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2b31ed682020" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2b31ed682388" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2b31ed6826f0" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2b31ed682a20" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="RoundRobinArbiterC" loc="89:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc" abstract="">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x2b31ed8d3b08" loc="89:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
          <component-ref qname="RoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x2b31ed8f5748" loc="42:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x2b31ed90e5c0" loc="52:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadClientC" loc="21:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc" abstract="">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="ArbitratedReadC" loc="23:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc" abstract="" safe="">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0x2b31ed9b65e8" loc="23:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0x2b31ed9b65e8"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmSyncC" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc" abstract="">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x2b31eda17c68" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
          <component-ref qname="Atm128AlarmSyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2b31eda17c68"/></type-var>
        </typedef>
        <constant name="divider" ref="0x2b31eda13020" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
          <component-ref qname="Atm128AlarmSyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmSyncP" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc" abstract="" safe="">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x2b31eda29410" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
          <component-ref qname="Atm128AlarmSyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2b31eda29410"/></type-var>
        </typedef>
        <constant name="divider" ref="0x2b31eda29700" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
          <component-ref qname="Atm128AlarmSyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b31eda09c68" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b31eda09c68"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b31edb2dcd0" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b31edb2dcd0"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x2b31edb4e020" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b31edb93510" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b31edb93510"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x2b31ed57d620" loc="58:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2b31ed57d620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed57d970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2b31ed57e220" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b31ed57e220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b31ed57e570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2b31ed57b380" loc="52:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2b31ed57b380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed57b6d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b31ed580620" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b31ed580620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed580970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2b31ed583618" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b31ed583618"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b31ed583968"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b31ed583af0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b31ed583c78"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b31ed583e00"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b31ed57b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x2b31ed58fca0" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x2b31ed58fca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed58e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b31ed58f600" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b31ed58f600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed58f950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x2b31ed58e398" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x2b31ed58e398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed58e6e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2b31ed595360" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2b31ed595360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed5956b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2b31ed588b98" loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b31ed588b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed595020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2b31ed591b08" loc="19:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2b31ed591b08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed591e58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x2b31ed5998d8" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x2b31ed5998d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed599c28"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed599db0"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed591020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5911a8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed591330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5914b8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed591640"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5917c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2b31ed592698" loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b31ed592698"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed5929e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x2b31ed5daaf0" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x2b31ed5daaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5d95e8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5d9770"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5d98f8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5d9a80"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5d9c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5d9d90"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5d8020"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5d81a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x2b31ed5bc658" loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x2b31ed5bc658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5bc9a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5bcb30"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5bccb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5bce40"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5bb020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5bb1a8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5bb330"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5bb4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x2b31ed5cd658" loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x2b31ed5cd658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5cd9a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5cdb30"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5cdcb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5cde40"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5cc020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5cc1a8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5cc330"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5cc4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x2b31ed5d2348" loc="94:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x2b31ed5d2348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5d2698"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5d2820"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5d29a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5d2b30"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5d2cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5d2e40"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5d1020"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5d11a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x2b31ed5a8348" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x2b31ed5a8348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5a8698"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5a8820"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5a89a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5a8b30"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5a8cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5a8e40"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5a7020"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5a71a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x2b31ed5d4020" loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x2b31ed5d4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5d4370"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5d44f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5d4680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5d4808"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5d4990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5d4b18"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5d4ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5d4e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x2b31ed5a6658" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x2b31ed5a6658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5a69a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5a6b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5a6cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5a6e40"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5a5020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5a51a8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5a5330"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5a54b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x2b31ed5b77e0" loc="66:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x2b31ed5b77e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5b7b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5b7cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5b7e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5b6020"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5b61a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5b6330"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5b64b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5b6640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x2b31ed5c7af0" loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x2b31ed5c7af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5c7e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5c6020"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5c61a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5c6330"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5c64b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5c6640"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5c67c8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5c6950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x2b31ed5caaf0" loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x2b31ed5caaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5cae40"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5c9020"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5c91a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5c9330"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5c94b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5c9640"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5c97c8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5c9950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x2b31ed5a0af0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x2b31ed5a0af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5a0e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed59f020"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed59f1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed59f330"/>
        <function-ref name="get" scoped="" ref="0x2b31ed59f4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed59f640"/>
        <function-ref name="set" scoped="" ref="0x2b31ed59f7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed59f950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x2b31ed5b1af0" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x2b31ed5b1af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5b1e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5b0020"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5b01a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5b0330"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5b04b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5b0640"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5b07c8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5b0950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x2b31ed5b4c78" loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x2b31ed5b4c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5b3020"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5b31a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5b3330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5b34b8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5b3640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5b37c8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5b3950"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5b3ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x2b31ed5c3020" loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x2b31ed5c3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5c3370"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5c34f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5c3680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5c3808"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5c3990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5c3b18"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5c3ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5c3e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x2b31ed5cf7e0" loc="97:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x2b31ed5cf7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5cfb30"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5cfcb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5cfe40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5db020"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5db1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5db330"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5db4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5db640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x2b31ed5d67e0" loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x2b31ed5d67e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5d6b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5d6cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5d6e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5e3020"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5e31a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5e3330"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5e34b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5e3640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x2b31ed5c1348" loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x2b31ed5c1348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5c1698"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5c1820"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5c19a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5c1b30"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5c1cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5c1e40"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5ce020"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5ce1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x2b31ed5aa020" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x2b31ed5aa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5aa370"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5aa4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5aa680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5aa808"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5aa990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5aab18"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5aaca0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5aae28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x2b31ed5ad1a0" loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x2b31ed5ad1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5ad4f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5ad678"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5ad800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5ad988"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5adb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5adc98"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5ade20"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5ac020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x2b31ed5d84d0" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x2b31ed5d84d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5d8820"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5d89a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5d8b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5d8cb8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5d8e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5d7020"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5d71a8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5d7330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x2b31ed5b94d0" loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x2b31ed5b94d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5b9820"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5b99a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5b9b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5b9cb8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5b9e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5b8020"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5b81a8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5b8330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x2b31ed5bb7e0" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x2b31ed5bb7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5bbb30"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5bbcb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5bbe40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5ba020"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5ba1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5ba330"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5ba4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5ba640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x2b31ed5cc7e0" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x2b31ed5cc7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5ccb30"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5cccb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5cce40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5cb020"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5cb1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5cb330"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5cb4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5cb640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x2b31ed5d14d0" loc="95:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x2b31ed5d14d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5d1820"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5d19a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5d1b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5d1cb8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5d1e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5d0020"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5d01a8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5d0330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x2b31ed5a74d0" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x2b31ed5a74d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5a7820"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5a79a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5a7b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5a7cb8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5a7e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5a6020"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5a61a8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5a6330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x2b31ed5a57e0" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x2b31ed5a57e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5a5b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5a5cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5a5e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5b2020"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5b21a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5b2330"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5b24b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5b2640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x2b31ed5b6968" loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x2b31ed5b6968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5b6cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5b6e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5b5020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5b51a8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5b5330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5b54b8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5b5640"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5b57c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x2b31ed5c6c78" loc="78:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x2b31ed5c6c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5c5020"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5c51a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5c5330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5c54b8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5c5640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5c57c8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5c5950"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5c5ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x2b31ed5c9c78" loc="89:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x2b31ed5c9c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5c8020"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5c81a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5c8330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5c84b8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5c8640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5c87c8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5c8950"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5c8ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x2b31ed59fc78" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x2b31ed59fc78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed59e020"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed59e1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed59e330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed59e4b8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed59e640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed59e7c8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed59e950"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed59ead8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x2b31ed5b0c78" loc="59:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x2b31ed5b0c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5af0f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5af278"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5af400"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5af588"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5af710"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5af898"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5afa20"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5afba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x2b31ed5b3e00" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x2b31ed5b3e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5c01a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5c0330"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5c04b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5c0640"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5c07c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5c0950"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5c0ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5c0c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x2b31ed5db968" loc="98:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x2b31ed5db968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5dbcb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5dbe40"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5da020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5da1a8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5da330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5da4b8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5da640"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5da7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x2b31ed5bd1a0" loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x2b31ed5bd1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5bd6f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5bd878"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5bda00"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5bdb88"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5bdd10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5bc020"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5bc1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5bc330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x2b31ed5ce4d0" loc="84:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x2b31ed5ce4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5ce820"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5ce9a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5ceb30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5cecb8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5cee40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5cd020"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5cd1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5cd330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x2b31ed5d31a0" loc="93:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x2b31ed5d31a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5d34f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5d3678"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5d3800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5d3988"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5d3b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5d3c98"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5d3e20"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5d2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x2b31ed5e3968" loc="104:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x2b31ed5e3968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5e3cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5e3e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5e2020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5e21a8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5e2330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5e24b8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5e2640"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5e27c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x2b31ed5a91a0" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x2b31ed5a91a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5a94f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5a9678"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5a9800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5a9988"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5a9b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5a9c98"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5a9e20"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5a8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x2b31ed5ac348" loc="62:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x2b31ed5ac348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5ac698"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5ac820"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5ac9a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5acb30"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5accb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5ace40"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5b9020"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5b91a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x2b31ed5c8e00" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x2b31ed5c8e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5d51a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5d5330"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5d54b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5d5640"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5d57c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5d5950"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5d5ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5d5c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x2b31ed5b8658" loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x2b31ed5b8658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5b89a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5b8b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5b8cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5b8e40"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5b7020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5b71a8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5b7330"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5b74b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x2b31ed5ba968" loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x2b31ed5ba968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5bacb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5bae40"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5c7020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5c71a8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5c7330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5c74b8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5c7640"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5c77c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x2b31ed5cb968" loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x2b31ed5cb968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5cbcb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5cbe40"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5ca020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5ca1a8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5ca330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5ca4b8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5ca640"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5ca7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x2b31ed5d0658" loc="96:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x2b31ed5d0658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5d09a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5d0b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5d0cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5d0e40"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5cf020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5cf1a8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5cf330"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5cf4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x2b31ed593870" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x2b31ed593870"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed593bc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed593d48"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5a0020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5a01a8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5a0330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5a04b8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5a0640"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5a07c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x2b31ed5b2968" loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x2b31ed5b2968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5b2cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5b2e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5b1020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5b11a8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5b1330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5b14b8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5b1640"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5b17c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x2b31ed5b5af0" loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x2b31ed5b5af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5b5e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5b4020"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5b41a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5b4330"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5b44b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5b4640"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5b47c8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5b4950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x2b31ed5c5e00" loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x2b31ed5c5e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5c41a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5c4330"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5c44b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5c4640"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5c47c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5c4950"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5c4ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5c4c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x2b31ed5d7658" loc="102:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x2b31ed5d7658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5d79a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5d7b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5d7cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5d7e40"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5d6020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5d61a8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5d6330"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5d64b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x2b31ed5c21a0" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x2b31ed5c21a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5c24f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5c2678"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5c2800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5c2988"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5c2b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5c2c98"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5c2e20"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5c1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x2b31ed5be020" loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x2b31ed5be020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5be370"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5be4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5be680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5be808"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5be990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5beb18"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5beca0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5bee28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x2b31ed59ee00" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x2b31ed59ee00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5ab1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5ab330"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5ab4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5ab640"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5ab7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5ab950"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5abad8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5abc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x2b31ed5ae020" loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x2b31ed5ae020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed5ae370"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed5ae4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed5ae680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed5ae808"/>
        <function-ref name="get" scoped="" ref="0x2b31ed5ae990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed5aeb18"/>
        <function-ref name="set" scoped="" ref="0x2b31ed5aeca0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed5aee28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b31ed625120" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b31ed625120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed625470"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6255f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed625780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed625908"/>
        <function-ref name="get" scoped="" ref="0x2b31ed625a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed625c18"/>
        <function-ref name="set" scoped="" ref="0x2b31ed625da0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed624020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b31ed6325b8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b31ed6325b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed632908"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed632a90"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed632c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed632da0"/>
        <function-ref name="get" scoped="" ref="0x2b31ed631020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6311a8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed631330"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6314b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b31ed628dc0" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b31ed628dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed627170"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6272f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed627480"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed627608"/>
        <function-ref name="get" scoped="" ref="0x2b31ed627790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed627918"/>
        <function-ref name="set" scoped="" ref="0x2b31ed627aa0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed627c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b31ed6242a8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b31ed6242a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6245f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed624780"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed624908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed624a90"/>
        <function-ref name="get" scoped="" ref="0x2b31ed624c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed624da0"/>
        <function-ref name="set" scoped="" ref="0x2b31ed623020"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6231a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b31ed631740" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b31ed631740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed631a90"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed631c18"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed631da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed630020"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6301a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed630330"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6304b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed630640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b31ed626020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b31ed626020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed626370"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6264f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed626680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed626808"/>
        <function-ref name="get" scoped="" ref="0x2b31ed626990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed626b18"/>
        <function-ref name="set" scoped="" ref="0x2b31ed626ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed626e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b31ed623430" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b31ed623430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed623780"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed623908"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed623a90"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed623c18"/>
        <function-ref name="get" scoped="" ref="0x2b31ed623da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed632020"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6321a8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed632330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b31ed6308c8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b31ed6308c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed630c18"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed630da0"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed62f020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed62f1a8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed62f330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed62f4b8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed62f640"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed62f7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edbcf970" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edbcf970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edbcfcc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edbcfe48"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edbce020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edbce1a8"/>
        <function-ref name="get" scoped="" ref="0x2b31edbce330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edbce4b8"/>
        <function-ref name="set" scoped="" ref="0x2b31edbce640"/>
        <function-ref name="clr" scoped="" ref="0x2b31edbce7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edbcc970" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edbcc970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edbcccc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edbcce48"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edbcb020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edbcb1a8"/>
        <function-ref name="get" scoped="" ref="0x2b31edbcb330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edbcb4b8"/>
        <function-ref name="set" scoped="" ref="0x2b31edbcb640"/>
        <function-ref name="clr" scoped="" ref="0x2b31edbcb7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edbef970" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edbef970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edbefcc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edbefe48"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edbee020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edbee1a8"/>
        <function-ref name="get" scoped="" ref="0x2b31edbee330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edbee4b8"/>
        <function-ref name="set" scoped="" ref="0x2b31edbee640"/>
        <function-ref name="clr" scoped="" ref="0x2b31edbee7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edbec970" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edbec970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edbeccc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edbece48"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edbeb020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edbeb1a8"/>
        <function-ref name="get" scoped="" ref="0x2b31edbeb330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edbeb4b8"/>
        <function-ref name="set" scoped="" ref="0x2b31edbeb640"/>
        <function-ref name="clr" scoped="" ref="0x2b31edbeb7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edbe9970" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edbe9970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edbe9cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edbe9e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edbe8020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edbe81a8"/>
        <function-ref name="get" scoped="" ref="0x2b31edbe8330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edbe84b8"/>
        <function-ref name="set" scoped="" ref="0x2b31edbe8640"/>
        <function-ref name="clr" scoped="" ref="0x2b31edbe87c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edbe6970" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edbe6970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edbe6cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edbe6e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edbe4020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edbe41a8"/>
        <function-ref name="get" scoped="" ref="0x2b31edbe4330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edbe44b8"/>
        <function-ref name="set" scoped="" ref="0x2b31edbe4640"/>
        <function-ref name="clr" scoped="" ref="0x2b31edbe47c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edbe2970" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edbe2970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edbe2cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edbe2e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edbe1020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edbe11a8"/>
        <function-ref name="get" scoped="" ref="0x2b31edbe1330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edbe14b8"/>
        <function-ref name="set" scoped="" ref="0x2b31edbe1640"/>
        <function-ref name="clr" scoped="" ref="0x2b31edbe17c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edbdf970" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edbdf970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edbdfcc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edbdfe48"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edbde020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edbde1a8"/>
        <function-ref name="get" scoped="" ref="0x2b31edbde330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edbde4b8"/>
        <function-ref name="set" scoped="" ref="0x2b31edbde640"/>
        <function-ref name="clr" scoped="" ref="0x2b31edbde7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b31ed637bd8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b31ed637bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed636020"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6361a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed636330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6364b8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed636640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6367c8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed636950"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed636ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b31ed633020" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b31ed633020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed633370"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6334f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed633680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed633808"/>
        <function-ref name="get" scoped="" ref="0x2b31ed633990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed633b18"/>
        <function-ref name="set" scoped="" ref="0x2b31ed633ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed633e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b31ed639930" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b31ed639930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed639c80"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed639e08"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed638020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6381a8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed638330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6384b8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed638640"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6387c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b31ed636d60" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b31ed636d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6350d8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed635260"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6353e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed635570"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6356f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed635880"/>
        <function-ref name="set" scoped="" ref="0x2b31ed635a08"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed635b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b31ed642120" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b31ed642120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed642470"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6425f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed642780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed642908"/>
        <function-ref name="get" scoped="" ref="0x2b31ed642a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed642c18"/>
        <function-ref name="set" scoped="" ref="0x2b31ed642da0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed641020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b31ed638a50" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b31ed638a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed638da0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed637020"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6371a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed637330"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6374b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed637640"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6377c8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed637950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b31ed635e18" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b31ed635e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6341a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed634330"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6344b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed634640"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6347c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed634950"/>
        <function-ref name="set" scoped="" ref="0x2b31ed634ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed634c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b31ed6412a8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b31ed6412a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6415f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed641780"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed641908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed641a90"/>
        <function-ref name="get" scoped="" ref="0x2b31ed641c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed641da0"/>
        <function-ref name="set" scoped="" ref="0x2b31ed640020"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6401a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edc2d6a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edc2d6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edc2d9f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edc2db80"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edc2dd08"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edc54020"/>
        <function-ref name="get" scoped="" ref="0x2b31edc541a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edc54330"/>
        <function-ref name="set" scoped="" ref="0x2b31edc544b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edc54640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edc52710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edc52710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edc52a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edc52be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edc52d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edc51020"/>
        <function-ref name="get" scoped="" ref="0x2b31edc511a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edc51330"/>
        <function-ref name="set" scoped="" ref="0x2b31edc514b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edc51640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edc4f710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edc4f710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edc4fa60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edc4fbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edc4fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edc4e020"/>
        <function-ref name="get" scoped="" ref="0x2b31edc4e1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edc4e330"/>
        <function-ref name="set" scoped="" ref="0x2b31edc4e4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edc4e640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edc4c710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edc4c710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edc4ca60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edc4cbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edc4cd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edc4b020"/>
        <function-ref name="get" scoped="" ref="0x2b31edc4b1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edc4b330"/>
        <function-ref name="set" scoped="" ref="0x2b31edc4b4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edc4b640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edc49710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edc49710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edc49a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edc49be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edc49d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edc48020"/>
        <function-ref name="get" scoped="" ref="0x2b31edc481a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edc48330"/>
        <function-ref name="set" scoped="" ref="0x2b31edc484b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edc48640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edc46710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edc46710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edc46a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edc46be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edc46d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edc45020"/>
        <function-ref name="get" scoped="" ref="0x2b31edc451a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edc45330"/>
        <function-ref name="set" scoped="" ref="0x2b31edc454b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edc45640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edc43710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edc43710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edc43a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edc43be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edc43d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edc41020"/>
        <function-ref name="get" scoped="" ref="0x2b31edc411a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edc41330"/>
        <function-ref name="set" scoped="" ref="0x2b31edc414b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edc41640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edc67710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edc67710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edc67a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edc67be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edc67d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edc66020"/>
        <function-ref name="get" scoped="" ref="0x2b31edc661a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edc66330"/>
        <function-ref name="set" scoped="" ref="0x2b31edc664b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edc66640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b31ed648740" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b31ed648740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed648a90"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed648c18"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed648da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed647020"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6471a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed647330"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6474b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed647640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b31ed645bd8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b31ed645bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed643020"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6431a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed643330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6434b8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed643640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6437c8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed643950"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed643ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b31ed64a500" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b31ed64a500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed64a850"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed64a9d8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed64ab60"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed64ace8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed64ae70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed649020"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6491a8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed649330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b31ed6478c8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b31ed6478c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed647c18"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed647da0"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed646020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6461a8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed646330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6464b8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed646640"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6467c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b31ed643d60" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b31ed643d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6520d8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed652260"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6523e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed652570"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6526f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed652880"/>
        <function-ref name="set" scoped="" ref="0x2b31ed652a08"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed652b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b31ed6495b8" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b31ed6495b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed649908"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed649a90"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed649c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed649da0"/>
        <function-ref name="get" scoped="" ref="0x2b31ed648020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6481a8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed648330"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6484b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b31ed646a50" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b31ed646a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed646da0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed645020"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6451a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed645330"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6454b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed645640"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6457c8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed645950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b31ed652e18" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b31ed652e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6511a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed651330"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6514b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed651640"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6517c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed651950"/>
        <function-ref name="set" scoped="" ref="0x2b31ed651ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed651c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edc936a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edc936a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edc939f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edc93b80"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edc93d08"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edcbc020"/>
        <function-ref name="get" scoped="" ref="0x2b31edcbc1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edcbc330"/>
        <function-ref name="set" scoped="" ref="0x2b31edcbc4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edcbc640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edcba710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edcba710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edcbaa60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edcbabe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edcbad70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edcb9020"/>
        <function-ref name="get" scoped="" ref="0x2b31edcb91a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edcb9330"/>
        <function-ref name="set" scoped="" ref="0x2b31edcb94b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edcb9640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edcb7710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edcb7710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edcb7a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edcb7be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edcb7d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edcb6020"/>
        <function-ref name="get" scoped="" ref="0x2b31edcb61a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edcb6330"/>
        <function-ref name="set" scoped="" ref="0x2b31edcb64b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edcb6640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edcb4710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edcb4710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edcb4a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edcb4be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edcb4d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edcb3020"/>
        <function-ref name="get" scoped="" ref="0x2b31edcb31a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edcb3330"/>
        <function-ref name="set" scoped="" ref="0x2b31edcb34b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edcb3640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edcb1710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edcb1710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edcb1a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edcb1be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edcb1d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edcb0020"/>
        <function-ref name="get" scoped="" ref="0x2b31edcb01a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edcb0330"/>
        <function-ref name="set" scoped="" ref="0x2b31edcb04b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edcb0640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edcae710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edcae710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edcaea60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edcaebe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edcaed70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edcad020"/>
        <function-ref name="get" scoped="" ref="0x2b31edcad1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edcad330"/>
        <function-ref name="set" scoped="" ref="0x2b31edcad4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edcad640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edcab710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edcab710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edcaba60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edcabbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edcabd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edca9020"/>
        <function-ref name="get" scoped="" ref="0x2b31edca91a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edca9330"/>
        <function-ref name="set" scoped="" ref="0x2b31edca94b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edca9640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edcd1710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edcd1710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edcd1a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edcd1be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edcd1d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edcd0020"/>
        <function-ref name="get" scoped="" ref="0x2b31edcd01a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edcd0330"/>
        <function-ref name="set" scoped="" ref="0x2b31edcd04b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edcd0640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b31ed659120" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b31ed659120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed659470"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6595f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed659780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed659908"/>
        <function-ref name="get" scoped="" ref="0x2b31ed659a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed659c18"/>
        <function-ref name="set" scoped="" ref="0x2b31ed659da0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed657020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b31ed6555b8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b31ed6555b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed655908"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed655a90"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed655c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed655da0"/>
        <function-ref name="get" scoped="" ref="0x2b31ed654020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6541a8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed654330"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6544b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b31ed64ce40" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b31ed64ce40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed64b1c0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed64b348"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed64b4d0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed64b658"/>
        <function-ref name="get" scoped="" ref="0x2b31ed64b7e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed64b968"/>
        <function-ref name="set" scoped="" ref="0x2b31ed64baf0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed64bc78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b31ed6572a8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b31ed6572a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6575f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed657780"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed657908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed657a90"/>
        <function-ref name="get" scoped="" ref="0x2b31ed657c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed657da0"/>
        <function-ref name="set" scoped="" ref="0x2b31ed656020"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6561a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b31ed654740" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b31ed654740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed654a90"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed654c18"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed654da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed653020"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6531a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed653330"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6534b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed653640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b31ed65a020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b31ed65a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed65a370"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed65a4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed65a680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed65a808"/>
        <function-ref name="get" scoped="" ref="0x2b31ed65a990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed65ab18"/>
        <function-ref name="set" scoped="" ref="0x2b31ed65aca0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed65ae28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b31ed656430" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b31ed656430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed656780"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed656908"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed656a90"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed656c18"/>
        <function-ref name="get" scoped="" ref="0x2b31ed656da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed655020"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6551a8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed655330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b31ed6538c8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b31ed6538c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed653c18"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed653da0"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed662020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6621a8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed662330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6624b8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed662640"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6627c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edd016a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edd016a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edd019f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edd01b80"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edd01d08"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edd00020"/>
        <function-ref name="get" scoped="" ref="0x2b31edd001a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edd00330"/>
        <function-ref name="set" scoped="" ref="0x2b31edd004b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edd00640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edcfe710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edcfe710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edcfea60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edcfebe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edcfed70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edcfd020"/>
        <function-ref name="get" scoped="" ref="0x2b31edcfd1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edcfd330"/>
        <function-ref name="set" scoped="" ref="0x2b31edcfd4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edcfd640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edd27710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edd27710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edd27a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edd27be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edd27d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edd26020"/>
        <function-ref name="get" scoped="" ref="0x2b31edd261a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edd26330"/>
        <function-ref name="set" scoped="" ref="0x2b31edd264b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edd26640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edd24710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edd24710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edd24a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edd24be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edd24d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edd23020"/>
        <function-ref name="get" scoped="" ref="0x2b31edd231a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edd23330"/>
        <function-ref name="set" scoped="" ref="0x2b31edd234b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edd23640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edd21710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edd21710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edd21a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edd21be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edd21d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edd20020"/>
        <function-ref name="get" scoped="" ref="0x2b31edd201a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edd20330"/>
        <function-ref name="set" scoped="" ref="0x2b31edd204b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edd20640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edd1e710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edd1e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edd1ea60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edd1ebe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edd1ed70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edd1d020"/>
        <function-ref name="get" scoped="" ref="0x2b31edd1d1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edd1d330"/>
        <function-ref name="set" scoped="" ref="0x2b31edd1d4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edd1d640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edd1b710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edd1b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edd1ba60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edd1bbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edd1bd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edd1a020"/>
        <function-ref name="get" scoped="" ref="0x2b31edd1a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edd1a330"/>
        <function-ref name="set" scoped="" ref="0x2b31edd1a4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edd1a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edd18710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edd18710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edd18a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edd18be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edd18d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edd16020"/>
        <function-ref name="get" scoped="" ref="0x2b31edd161a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edd16330"/>
        <function-ref name="set" scoped="" ref="0x2b31edd164b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edd16640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b31ed66abd8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b31ed66abd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed669020"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6691a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed669330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6694b8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed669640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6697c8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed669950"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed669ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b31ed666020" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b31ed666020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed666370"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6664f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed666680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed666808"/>
        <function-ref name="get" scoped="" ref="0x2b31ed666990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed666b18"/>
        <function-ref name="set" scoped="" ref="0x2b31ed666ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed666e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b31ed65c930" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b31ed65c930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed65cc80"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed65ce08"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed65b020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed65b1a8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed65b330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed65b4b8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed65b640"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed65b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b31ed669d60" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b31ed669d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6680d8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed668260"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6683e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed668570"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6686f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed668880"/>
        <function-ref name="set" scoped="" ref="0x2b31ed668a08"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed668b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b31ed665120" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b31ed665120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed665470"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6655f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed665780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed665908"/>
        <function-ref name="get" scoped="" ref="0x2b31ed665a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed665c18"/>
        <function-ref name="set" scoped="" ref="0x2b31ed665da0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed664020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b31ed65ba50" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b31ed65ba50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed65bda0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed66a020"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed66a1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed66a330"/>
        <function-ref name="get" scoped="" ref="0x2b31ed66a4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed66a640"/>
        <function-ref name="set" scoped="" ref="0x2b31ed66a7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed66a950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b31ed668e18" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b31ed668e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6671a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed667330"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6674b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed667640"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6677c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed667950"/>
        <function-ref name="set" scoped="" ref="0x2b31ed667ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed667c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b31ed6642a8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b31ed6642a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6645f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed664780"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed664908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed664a90"/>
        <function-ref name="get" scoped="" ref="0x2b31ed664c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed664da0"/>
        <function-ref name="set" scoped="" ref="0x2b31ed663020"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6631a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edd776a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edd776a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edd779f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edd77b80"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edd77d08"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edd76020"/>
        <function-ref name="get" scoped="" ref="0x2b31edd761a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edd76330"/>
        <function-ref name="set" scoped="" ref="0x2b31edd764b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edd76640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edd74710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edd74710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edd74a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edd74be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edd74d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edd73020"/>
        <function-ref name="get" scoped="" ref="0x2b31edd731a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edd73330"/>
        <function-ref name="set" scoped="" ref="0x2b31edd734b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edd73640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edd71710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edd71710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edd71a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edd71be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edd71d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edd70020"/>
        <function-ref name="get" scoped="" ref="0x2b31edd701a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edd70330"/>
        <function-ref name="set" scoped="" ref="0x2b31edd704b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edd70640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edd6e710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edd6e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edd6ea60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edd6ebe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edd6ed70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edd6d020"/>
        <function-ref name="get" scoped="" ref="0x2b31edd6d1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edd6d330"/>
        <function-ref name="set" scoped="" ref="0x2b31edd6d4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edd6d640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edd6b710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edd6b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edd6ba60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edd6bbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edd6bd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edd98020"/>
        <function-ref name="get" scoped="" ref="0x2b31edd981a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edd98330"/>
        <function-ref name="set" scoped="" ref="0x2b31edd984b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edd98640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edd96710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edd96710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edd96a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edd96be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edd96d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edd95020"/>
        <function-ref name="get" scoped="" ref="0x2b31edd951a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edd95330"/>
        <function-ref name="set" scoped="" ref="0x2b31edd954b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edd95640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edd93710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edd93710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edd93a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edd93be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edd93d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edd92020"/>
        <function-ref name="get" scoped="" ref="0x2b31edd921a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edd92330"/>
        <function-ref name="set" scoped="" ref="0x2b31edd924b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edd92640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edd90710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edd90710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edd90a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edd90be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edd90d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edd8e020"/>
        <function-ref name="get" scoped="" ref="0x2b31edd8e1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edd8e330"/>
        <function-ref name="set" scoped="" ref="0x2b31edd8e4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edd8e640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b31ed66c430" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b31ed66c430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed66c780"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed66c908"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed66ca90"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed66cc18"/>
        <function-ref name="get" scoped="" ref="0x2b31ed66cda0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed66b020"/>
        <function-ref name="set" scoped="" ref="0x2b31ed66b1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed66b330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b31ed67b8c8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b31ed67b8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed67bc18"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed67bda0"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed67a020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed67a1a8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed67a330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed67a4b8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed67a640"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed67a7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b31ed66e1e8" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b31ed66e1e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed66e538"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed66e6c0"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed66e848"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed66e9d0"/>
        <function-ref name="get" scoped="" ref="0x2b31ed66eb58"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed66ece0"/>
        <function-ref name="set" scoped="" ref="0x2b31ed66ee68"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed66d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b31ed66b5b8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b31ed66b5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed66b908"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed66ba90"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed66bc18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed66bda0"/>
        <function-ref name="get" scoped="" ref="0x2b31ed67c020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed67c1a8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed67c330"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed67c4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b31ed67aa50" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b31ed67aa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed67ada0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed679020"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6791a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed679330"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6794b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed679640"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6797c8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed679950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b31ed66d2a8" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b31ed66d2a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed66d5f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed66d780"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed66d908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed66da90"/>
        <function-ref name="get" scoped="" ref="0x2b31ed66dc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed66dda0"/>
        <function-ref name="set" scoped="" ref="0x2b31ed66c020"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed66c1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b31ed67c740" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b31ed67c740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed67ca90"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed67cc18"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed67cda0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed67b020"/>
        <function-ref name="get" scoped="" ref="0x2b31ed67b1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed67b330"/>
        <function-ref name="set" scoped="" ref="0x2b31ed67b4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed67b640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b31ed679bd8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b31ed679bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed677020"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6771a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed677330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6774b8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed677640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6777c8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed677950"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed677ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31eddc86a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31eddc86a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31eddc89f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b31eddc8b80"/>
        <function-ref name="toggle" scoped="" ref="0x2b31eddc8d08"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31eddc7020"/>
        <function-ref name="get" scoped="" ref="0x2b31eddc71a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31eddc7330"/>
        <function-ref name="set" scoped="" ref="0x2b31eddc74b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31eddc7640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31eddf3710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31eddf3710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31eddf3a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31eddf3be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31eddf3d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31eddf2020"/>
        <function-ref name="get" scoped="" ref="0x2b31eddf21a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31eddf2330"/>
        <function-ref name="set" scoped="" ref="0x2b31eddf24b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31eddf2640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31eddf0710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31eddf0710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31eddf0a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31eddf0be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31eddf0d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31eddef020"/>
        <function-ref name="get" scoped="" ref="0x2b31eddef1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31eddef330"/>
        <function-ref name="set" scoped="" ref="0x2b31eddef4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31eddef640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edded710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edded710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31eddeda60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31eddedbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31eddedd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31eddec020"/>
        <function-ref name="get" scoped="" ref="0x2b31eddec1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31eddec330"/>
        <function-ref name="set" scoped="" ref="0x2b31eddec4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31eddec640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31eddea710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31eddea710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31eddeaa60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31eddeabe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31eddead70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edde9020"/>
        <function-ref name="get" scoped="" ref="0x2b31edde91a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edde9330"/>
        <function-ref name="set" scoped="" ref="0x2b31edde94b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edde9640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edde7710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edde7710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edde7a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edde7be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edde7d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edde6020"/>
        <function-ref name="get" scoped="" ref="0x2b31edde61a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edde6330"/>
        <function-ref name="set" scoped="" ref="0x2b31edde64b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edde6640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edde4710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edde4710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edde4a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edde4be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edde4d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edde3020"/>
        <function-ref name="get" scoped="" ref="0x2b31edde31a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edde3330"/>
        <function-ref name="set" scoped="" ref="0x2b31edde34b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edde3640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31edde1710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31edde1710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31edde1a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b31edde1be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31edde1d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31edde0020"/>
        <function-ref name="get" scoped="" ref="0x2b31edde01a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31edde0330"/>
        <function-ref name="set" scoped="" ref="0x2b31edde04b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31edde0640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31ed683ac0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31ed683ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed683e10"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed691020"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6911a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed691330"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6914b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed691640"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6917c8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed691950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31ed6a0db8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31ed6a0db8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed69f170"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed69f2f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed69f480"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed69f608"/>
        <function-ref name="get" scoped="" ref="0x2b31ed69f790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed69f918"/>
        <function-ref name="set" scoped="" ref="0x2b31ed69faa0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed69fc28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31ed69a3e0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31ed69a3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed69a730"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed69a8b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed69aa40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed69abc8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed69ad50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed699020"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6991a8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed699330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31ed6a77e8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31ed6a77e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6a7b38"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6a7cc0"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6a7e48"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6a6020"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6a61a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6a6330"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6a64b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6a6640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31ed6a3c38" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31ed6a3c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6a2020"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6a21a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6a2330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6a24b8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6a2640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6a27c8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6a2950"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6a2ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31ed6af020" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31ed6af020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6af370"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6af4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6af680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6af808"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6af990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6afb18"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6afca0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6afe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31ed6aa480" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31ed6aa480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6aa7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6aa958"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6aaae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6aac68"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6aadf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6bb020"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6bb1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6bb330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31ed6b87e8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31ed6b87e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6b8b38"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6b8cc0"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6b8e48"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6b7020"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6b71a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6b7330"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6b74b8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6b7640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31ed6b3970" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31ed6b3970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6b3cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6b3e48"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6c4020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6c41a8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6c4330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6c44b8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6c4640"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6c47c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31ed6c0ab0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31ed6c0ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6c0e00"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6bf020"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6bf1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6bf330"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6bf4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6bf640"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6bf7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6bf950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31ed6bcc38" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31ed6bcc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6cd020"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6cd1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6cd330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6cd4b8"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6cd640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6cd7c8"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6cd950"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6cdad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31ed6c8020" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31ed6c8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6c8370"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6c84f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6c8680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6c8808"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6c8990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6c8b18"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6c8ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6c8e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b31ed6d5180" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b31ed6d5180"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b31ed6d54d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b31ed6d5658"/>
        <function-ref name="toggle" scoped="" ref="0x2b31ed6d57e0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b31ed6d5968"/>
        <function-ref name="get" scoped="" ref="0x2b31ed6d5af0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b31ed6d5c78"/>
        <function-ref name="set" scoped="" ref="0x2b31ed6d5e00"/>
        <function-ref name="clr" scoped="" ref="0x2b31ed6d4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b31ed7102c0" loc="27:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b31ed7102c0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x2b31ed481128"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x2b31ed481128"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed710610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2b31ed7108f0" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b31ed7108f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b31ed710c40"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b31ed710dc8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b31ed70f020"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b31ed70f1a8"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b31ed70f330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x2b31ed72c140" loc="60:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2b31ed72c140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed72c490"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2b31ed57c878" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b31ed57c878"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b31ed57cbc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x2b31ed72d9f8" loc="59:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b31ed72d9f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed72dd48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x2b31ed72d020" loc="58:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b31ed72d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed72d370"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b31ed72d4f8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b31ed72d680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2b31ed4891c8" loc="48:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed4891c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b31ed489518"/>
        <function-ref name="runTask" scoped="" ref="0x2b31ed4896a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2b31ed486600" loc="47:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b31ed486600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed486950"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b31ed486ad8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b31ed486c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2b31ed53c2b0" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2b31ed53c2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b31ed53c600"/>
        <function-ref name="runTask" scoped="" ref="0x2b31ed53c788"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x2b31ed545758" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2b31ed545758"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2b31ed545aa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2b31ed53d448" loc="55:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b31ed53d448"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed53d798"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b31ed53d920"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b31ed53daa8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x2b31ed5622b0" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2b31ed5622b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2b31ed562600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x2b31ed55c660" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2b31ed55c660"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2b31ed55c9b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x2b31ed565a80" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2b31ed565a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2b31ed565dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer0" ref="0x2b31ed75cc08" loc="20:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer0" scoped="" ref="0x2b31ed75cc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b31ed75ae78"/>
        <function-ref name="fired" scoped="" ref="0x2b31ed7515a8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b31ed75a2d8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b31ed751e48"/>
        <function-ref name="getdt" scoped="" ref="0x2b31ed759748"/>
        <function-ref name="gett0" scoped="" ref="0x2b31ed7592f8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b31ed7519f8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b31ed7527e8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b31ed75a8a8"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b31ed752c88"/>
        <function-ref name="stop" scoped="" ref="0x2b31ed751158"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x2b31ed581840" loc="14:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b31ed581840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b31ed581b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read" ref="0x2b31ed746020" loc="18:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b31ed746020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b31ed746b68"/>
        <function-ref name="readDone" scoped="" ref="0x2b31ed754020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LCD128x64" ref="0x2b31ed748470" loc="16:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LCD128x64" scoped="" ref="0x2b31ed748470"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b31ed7487c0"/>
        <function-ref name="initDone" scoped="" ref="0x2b31ed748948"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b31ed748ad0"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b31ed748c58"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b31ed748de0"/>
        <function-ref name="writeByte" scoped="" ref="0x2b31ed733020"/>
        <function-ref name="setPixel" scoped="" ref="0x2b31ed7331a8"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b31ed733330"/>
        <function-ref name="writeBar" scoped="" ref="0x2b31ed7334b8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b31ed733640"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b31ed7337c8"/>
        <function-ref name="writePixel" scoped="" ref="0x2b31ed733950"/>
        <function-ref name="initLCD" scoped="" ref="0x2b31ed733ad8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b31ed733d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="calc_xy" ref="0x2b31ed757a90" loc="28:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="calc_xy" scoped="" ref="0x2b31ed757a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b31ed757de0"/>
        <function-ref name="runTask" scoped="" ref="0x2b31ed769020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0x2b31ed743678" loc="17:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b31ed743678"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b31ed7439c8"/>
        <function-ref name="cancel" scoped="" ref="0x2b31ed743b50"/>
        <function-ref name="dataReady" scoped="" ref="0x2b31ed743cd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="update_display" ref="0x2b31ed762ad0" loc="51:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="update_display" scoped="" ref="0x2b31ed762ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b31ed762e20"/>
        <function-ref name="runTask" scoped="" ref="0x2b31ed761020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2b31ed734020" loc="15:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b31ed734020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b31ed734370"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b31ed7344f8"/>
        <function-ref name="request" scoped="" ref="0x2b31ed734680"/>
        <function-ref name="granted" scoped="" ref="0x2b31ed734808"/>
        <function-ref name="isOwner" scoped="" ref="0x2b31ed734990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Lcd128x64" ref="0x2b31ed787a98" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64C.nc">
      <component-ref qname="LCD128x64C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Lcd128x64" scoped="" ref="0x2b31ed787a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b31ed787de8"/>
        <function-ref name="initDone" scoped="" ref="0x2b31ed784020"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b31ed7841a8"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b31ed784330"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b31ed7844b8"/>
        <function-ref name="writeByte" scoped="" ref="0x2b31ed784640"/>
        <function-ref name="setPixel" scoped="" ref="0x2b31ed7847c8"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b31ed784950"/>
        <function-ref name="writeBar" scoped="" ref="0x2b31ed784ad8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b31ed784c60"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b31ed784de8"/>
        <function-ref name="writePixel" scoped="" ref="0x2b31ed783020"/>
        <function-ref name="initLCD" scoped="" ref="0x2b31ed7831a8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b31ed783430"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeRectangle" ref="0x2b31ed7f64d8" loc="182:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeRectangle" scoped="" ref="0x2b31ed7f64d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b31ed7f6828"/>
        <function-ref name="runTask" scoped="" ref="0x2b31ed7f69b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="clearScreen" ref="0x2b31ed81a420" loc="262:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="clearScreen" scoped="" ref="0x2b31ed81a420"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b31ed81a770"/>
        <function-ref name="runTask" scoped="" ref="0x2b31ed81a8f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LCD128x64" ref="0x2b31ed7ae468" loc="6:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LCD128x64" scoped="" ref="0x2b31ed7ae468"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b31ed7ae7b8"/>
        <function-ref name="initDone" scoped="" ref="0x2b31ed7ae940"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b31ed7aeac8"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b31ed7aec50"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b31ed7aedd8"/>
        <function-ref name="writeByte" scoped="" ref="0x2b31ed7ad020"/>
        <function-ref name="setPixel" scoped="" ref="0x2b31ed7ad1a8"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b31ed7ad330"/>
        <function-ref name="writeBar" scoped="" ref="0x2b31ed7ad4b8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b31ed7ad640"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b31ed7ad7c8"/>
        <function-ref name="writePixel" scoped="" ref="0x2b31ed7ad950"/>
        <function-ref name="initLCD" scoped="" ref="0x2b31ed7adad8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b31ed7add60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeString" ref="0x2b31ed80f368" loc="230:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeString" scoped="" ref="0x2b31ed80f368"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b31ed80f6b8"/>
        <function-ref name="runTask" scoped="" ref="0x2b31ed80f840"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeCircle" ref="0x2b31ed806020" loc="198:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeCircle" scoped="" ref="0x2b31ed806020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b31ed806370"/>
        <function-ref name="runTask" scoped="" ref="0x2b31ed8064f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeLine" ref="0x2b31ed816b28" loc="275:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeLine" scoped="" ref="0x2b31ed816b28"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b31ed816e78"/>
        <function-ref name="runTask" scoped="" ref="0x2b31ed815030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="wait4Controller" ref="0x2b31ed7be4e8" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="wait4Controller" scoped="" ref="0x2b31ed7be4e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b31ed7be838"/>
        <function-ref name="runTask" scoped="" ref="0x2b31ed7be9c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b31ed8528b0" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b31ed8528b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b31ed852c00"/>
        <function-ref name="configure" scoped="" ref="0x2b31ed852d88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x2b31ed854420" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b31ed854420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b31ed854770"/>
        <function-ref name="dataReady" scoped="" ref="0x2b31ed8548f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x2b31ed844920" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b31ed844920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b31ed844c70"/>
        <function-ref name="cancel" scoped="" ref="0x2b31ed844df8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b31ed843020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b31ed785c00" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b31ed785c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b31ed844020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b31ed8441a8"/>
        <function-ref name="request" scoped="" ref="0x2b31ed844330"/>
        <function-ref name="granted" scoped="" ref="0x2b31ed8444b8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b31ed844640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b31ed85ad48" loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b31ed85ad48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed84f0d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x2b31ed866de0" loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b31ed866de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b31ed865170"/>
        <function-ref name="dataReady" scoped="" ref="0x2b31ed8652f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x2b31ed866488" loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b31ed866488"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b31ed8667d8"/>
        <function-ref name="cancel" scoped="" ref="0x2b31ed866960"/>
        <function-ref name="dataReady" scoped="" ref="0x2b31ed866ae8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Adc" ref="0x2b31ed86f940" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b31ed86f940"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2b31ed86fc90"/>
        <function-ref name="getAdmux" scoped="" ref="0x2b31ed86fe18"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2b31ed863020"/>
        <function-ref name="isEnabled" scoped="" ref="0x2b31ed8631a8"/>
        <function-ref name="enableAdc" scoped="" ref="0x2b31ed863330"/>
        <function-ref name="setAdmux" scoped="" ref="0x2b31ed8634b8"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2b31ed863640"/>
        <function-ref name="isComplete" scoped="" ref="0x2b31ed8637c8"/>
        <function-ref name="cancel" scoped="" ref="0x2b31ed863950"/>
        <function-ref name="disableAdc" scoped="" ref="0x2b31ed863ad8"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2b31ed863c60"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2b31ed863de8"/>
        <function-ref name="startConversion" scoped="" ref="0x2b31ed862020"/>
        <function-ref name="isStarted" scoped="" ref="0x2b31ed8622a8"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2b31ed862430"/>
        <function-ref name="setContinuous" scoped="" ref="0x2b31ed8625b8"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2b31ed862740"/>
        <function-ref name="getValue" scoped="" ref="0x2b31ed8628c8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b31ed862a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x2b31ed864c10" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b31ed864c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b31ed866020"/>
        <function-ref name="stop" scoped="" ref="0x2b31ed8661a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x2b31ed862d30" loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b31ed862d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b31ed86d0d8"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b31ed86d260"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b31ed86d3e8"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b31ed86d570"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b31ed86d6f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x2b31ed8a5020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <component-ref qname="HplAtm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b31ed8a5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2b31ed8a5370"/>
        <function-ref name="getAdmux" scoped="" ref="0x2b31ed8a54f8"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2b31ed8a5680"/>
        <function-ref name="isEnabled" scoped="" ref="0x2b31ed8a5808"/>
        <function-ref name="enableAdc" scoped="" ref="0x2b31ed8a5990"/>
        <function-ref name="setAdmux" scoped="" ref="0x2b31ed8a5b18"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2b31ed8a5ca0"/>
        <function-ref name="isComplete" scoped="" ref="0x2b31ed8a5e28"/>
        <function-ref name="cancel" scoped="" ref="0x2b31ed8a4020"/>
        <function-ref name="disableAdc" scoped="" ref="0x2b31ed8a41a8"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2b31ed8a4330"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2b31ed8a44b8"/>
        <function-ref name="startConversion" scoped="" ref="0x2b31ed8a4640"/>
        <function-ref name="isStarted" scoped="" ref="0x2b31ed8a48c8"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2b31ed8a4a50"/>
        <function-ref name="setContinuous" scoped="" ref="0x2b31ed8a4bd8"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2b31ed8a4d60"/>
        <function-ref name="getValue" scoped="" ref="0x2b31ed8a3020"/>
        <function-ref name="dataReady" scoped="" ref="0x2b31ed8a31a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x2b31ed8a01e8" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b31ed8a01e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2b31ed8a0538"/>
        <function-ref name="getAdmux" scoped="" ref="0x2b31ed8a06c0"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2b31ed8a0848"/>
        <function-ref name="isEnabled" scoped="" ref="0x2b31ed8a09d0"/>
        <function-ref name="enableAdc" scoped="" ref="0x2b31ed8a0b58"/>
        <function-ref name="setAdmux" scoped="" ref="0x2b31ed8a0ce0"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2b31ed8a0e68"/>
        <function-ref name="isComplete" scoped="" ref="0x2b31ed89f020"/>
        <function-ref name="cancel" scoped="" ref="0x2b31ed89f1a8"/>
        <function-ref name="disableAdc" scoped="" ref="0x2b31ed89f330"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2b31ed89f4b8"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2b31ed89f640"/>
        <function-ref name="startConversion" scoped="" ref="0x2b31ed89f7c8"/>
        <function-ref name="isStarted" scoped="" ref="0x2b31ed89fa50"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2b31ed89fbd8"/>
        <function-ref name="setContinuous" scoped="" ref="0x2b31ed89fd60"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2b31ed89e020"/>
        <function-ref name="getValue" scoped="" ref="0x2b31ed89e1a8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b31ed89e330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x2b31ed89e640" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2b31ed89e640"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2b31ed89e990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2b31ed963b70" loc="92:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2b31ed963b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2b31ed961020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b31ed9611a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b31ed9608a0" loc="96:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b31ed9608a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b31ed960c10"/>
        <function-ref name="configure" scoped="" ref="0x2b31ed960d98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x2b31ed9613f0" loc="93:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b31ed9613f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b31ed961740"/>
        <function-ref name="requested" scoped="" ref="0x2b31ed9618c8"/>
        <function-ref name="granted" scoped="" ref="0x2b31ed961a50"/>
        <function-ref name="isOwner" scoped="" ref="0x2b31ed961bd8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b31ed961d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b31ed964e50" loc="91:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b31ed964e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b31ed9631e8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b31ed963370"/>
        <function-ref name="request" scoped="" ref="0x2b31ed9634f8"/>
        <function-ref name="granted" scoped="" ref="0x2b31ed963680"/>
        <function-ref name="isOwner" scoped="" ref="0x2b31ed963808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2b31ed960020" loc="94:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b31ed960020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b31ed960370"/>
        <function-ref name="userId" scoped="" ref="0x2b31ed9604f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b31edea4e68" loc="44:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b31edea4e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31edea21e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x2b31edea2470" loc="45:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0x2b31edea2470"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2b31edea27c0"/>
        <function-ref name="isEmpty" scoped="" ref="0x2b31edea2948"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2b31edea2ad0"/>
        <function-ref name="dequeue" scoped="" ref="0x2b31edea2c58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2b31ede9f388" loc="55:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2b31ede9f388"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2b31ede9f6f8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b31ede9f880"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b31ededa020" loc="60:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b31ededa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b31ededa390"/>
        <function-ref name="configure" scoped="" ref="0x2b31ededa518"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x2b31ededa7a0" loc="61:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x2b31ededa7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2b31ededaaf0"/>
        <function-ref name="isEmpty" scoped="" ref="0x2b31ededac78"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2b31ededae00"/>
        <function-ref name="dequeue" scoped="" ref="0x2b31eded8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x2b31ede9fac8" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b31ede9fac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b31ede9fe18"/>
        <function-ref name="requested" scoped="" ref="0x2b31ededb020"/>
        <function-ref name="granted" scoped="" ref="0x2b31ededb1a8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b31ededb330"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b31ededb4b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x2b31eded8268" loc="62:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x2b31eded8268"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x2b31eded85b8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x2b31eded8740"/>
        <function-ref name="led1On" scoped="" ref="0x2b31eded88c8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x2b31eded8a50"/>
        <function-ref name="led2Toggle" scoped="" ref="0x2b31eded8bd8"/>
        <function-ref name="get" scoped="" ref="0x2b31eded8d60"/>
        <function-ref name="led1Off" scoped="" ref="0x2b31eded7020"/>
        <function-ref name="setPort" scoped="" ref="0x2b31eded71a8"/>
        <function-ref name="led0On" scoped="" ref="0x2b31eded77c8"/>
        <function-ref name="set" scoped="" ref="0x2b31eded74b8"/>
        <function-ref name="led2On" scoped="" ref="0x2b31eded7330"/>
        <function-ref name="led2Off" scoped="" ref="0x2b31eded7640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b31edea0630" loc="54:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b31edea0630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b31edea09a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b31edea0b28"/>
        <function-ref name="request" scoped="" ref="0x2b31edea0cb0"/>
        <function-ref name="granted" scoped="" ref="0x2b31edea0e38"/>
        <function-ref name="isOwner" scoped="" ref="0x2b31ede9f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2b31ededb700" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b31ededb700"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b31ededba50"/>
        <function-ref name="userId" scoped="" ref="0x2b31ededbbd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x2b31eded7a90" loc="75:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x2b31eded7a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b31eded7de0"/>
        <function-ref name="runTask" scoped="" ref="0x2b31eded6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x2b31ed95c3f0" loc="72:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b31ed95c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x2b31ed95c740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x2b31ed95c988" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b31ed95c988"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b31ed95ccd8"/>
        <function-ref name="requested" scoped="" ref="0x2b31ed95ce60"/>
        <function-ref name="granted" scoped="" ref="0x2b31ed982020"/>
        <function-ref name="isOwner" scoped="" ref="0x2b31ed9821a8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b31ed982330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x2b31ed95dc30" loc="70:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b31ed95dc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b31ed95c020"/>
        <function-ref name="stop" scoped="" ref="0x2b31ed95c1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2b31ed982578" loc="74:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b31ed982578"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b31ed9828c8"/>
        <function-ref name="userId" scoped="" ref="0x2b31ed982a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x2b31edf0a740" loc="62:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b31edf0a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x2b31edf0aa90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x2b31edf0acd8" loc="63:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b31edf0acd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b31edf090a0"/>
        <function-ref name="requested" scoped="" ref="0x2b31edf09228"/>
        <function-ref name="granted" scoped="" ref="0x2b31edf093b0"/>
        <function-ref name="isOwner" scoped="" ref="0x2b31edf09538"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b31edf096c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x2b31edf0a020" loc="60:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b31edf0a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b31edf0a370"/>
        <function-ref name="stop" scoped="" ref="0x2b31edf0a4f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2b31edf09908" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b31edf09908"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b31edf09c58"/>
        <function-ref name="userId" scoped="" ref="0x2b31edf09de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b31ed9eccc8" loc="25:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="BlinkAppC.ADC0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b31ed9eccc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b31ed9eb0a0"/>
        <function-ref name="configure" scoped="" ref="0x2b31ed9eb228"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b31ed97ae30" loc="22:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="BlinkAppC.ADC0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b31ed97ae30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b31ed9ed9e0"/>
        <function-ref name="readDone" scoped="" ref="0x2b31ed9ede30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2b31ed9ec420" loc="24:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="BlinkAppC.ADC0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b31ed9ec420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b31ed9ec770"/>
        <function-ref name="getChannel" scoped="" ref="0x2b31ed9ec8f8"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b31ed9eca80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b31ed98f4c0" loc="18:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b31ed98f4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b31ed98e088"/>
        <function-ref name="readDone" scoped="" ref="0x2b31ed98e4d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2b31ed98d2f0" loc="19:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2b31ed98d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b31ed98de70"/>
        <function-ref name="readDone" scoped="" ref="0x2b31ed98c320"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2b31ed988020" loc="22:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b31ed988020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b31ed988370"/>
        <function-ref name="getChannel" scoped="" ref="0x2b31ed9884f8"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b31ed988680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2b31ed988e38" loc="23:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b31ed988e38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b31ed9871c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b31ed987348"/>
        <function-ref name="request" scoped="" ref="0x2b31ed9874d0"/>
        <function-ref name="granted" scoped="" ref="0x2b31ed987658"/>
        <function-ref name="isOwner" scoped="" ref="0x2b31ed9877e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b31ed9a01c8" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b31ed9a01c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b31ed9a0d10"/>
        <function-ref name="readDone" scoped="" ref="0x2b31ed99f1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2b31ed99fdd8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2b31ed99fdd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b31ed99ea18"/>
        <function-ref name="readDone" scoped="" ref="0x2b31ed99c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2b31ed99b510" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b31ed99b510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b31ed99b860"/>
        <function-ref name="getChannel" scoped="" ref="0x2b31ed99b9e8"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b31ed99bb70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0x2b31ed99c690" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b31ed99c690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b31ed99c9e0"/>
        <function-ref name="cancel" scoped="" ref="0x2b31ed99cb68"/>
        <function-ref name="dataReady" scoped="" ref="0x2b31ed99ccf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="acquiredData" ref="0x2b31ed9aa940" loc="108:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="acquiredData" scoped="" ref="0x2b31ed9aa940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b31ed9aac90"/>
        <function-ref name="runTask" scoped="" ref="0x2b31ed9aae18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b31ed9b4680" loc="24:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b31ed9b4680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b31ed9d9370"/>
        <function-ref name="readDone" scoped="" ref="0x2b31ed9d97e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x2b31ed9d8060" loc="26:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x2b31ed9d8060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b31ed9d8bc8"/>
        <function-ref name="readDone" scoped="" ref="0x2b31ed9d7088"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2b31ed9d7720" loc="27:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b31ed9d7720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b31ed9d7a90"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b31ed9d7c18"/>
        <function-ref name="request" scoped="" ref="0x2b31ed9d7da0"/>
        <function-ref name="granted" scoped="" ref="0x2b31ed9d5020"/>
        <function-ref name="isOwner" scoped="" ref="0x2b31ed9d51a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b31ed9e8420" loc="45:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
      <component-ref qname="BlinkAppC.TIMER0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b31ed9e8420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b31edba66c8"/>
        <function-ref name="fired" scoped="" ref="0x2b31edba9db0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b31edba7ad8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b31edba7688"/>
        <function-ref name="getdt" scoped="" ref="0x2b31edba5020"/>
        <function-ref name="gett0" scoped="" ref="0x2b31edba6b18"/>
        <function-ref name="isRunning" scoped="" ref="0x2b31edba7238"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b31edba9020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b31edba60f8"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b31edba94c0"/>
        <function-ref name="stop" scoped="" ref="0x2b31edba9960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x2b31ed9e07d8" loc="49:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x2b31ed9e07d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b31ed9fba18"/>
        <function-ref name="fired" scoped="" ref="0x2b31ed9fc158"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b31ed9fce48"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b31ed9fc9f8"/>
        <function-ref name="getdt" scoped="" ref="0x2b31ed9fa2e8"/>
        <function-ref name="gett0" scoped="" ref="0x2b31ed9fbe68"/>
        <function-ref name="isRunning" scoped="" ref="0x2b31ed9fc5a8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b31ed9df370"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b31ed9fb448"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b31ed9df810"/>
        <function-ref name="stop" scoped="" ref="0x2b31ed9dfcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x2b31ed9f6de8" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x2b31ed9f6de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b31ed9f10c0"/>
        <function-ref name="fired" scoped="" ref="0x2b31ed9f4798"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b31ed9f34d8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b31ed9f3088"/>
        <function-ref name="getdt" scoped="" ref="0x2b31ed9f1960"/>
        <function-ref name="gett0" scoped="" ref="0x2b31ed9f1510"/>
        <function-ref name="isRunning" scoped="" ref="0x2b31ed9f4be8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b31ed9f59e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b31ed9f3aa8"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b31ed9f5e80"/>
        <function-ref name="stop" scoped="" ref="0x2b31ed9f4348"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x2b31eda0b338" loc="47:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x2b31eda0b338"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b31ed9ee020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b31ed9f60f0" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b31ed9f60f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31ed9f6440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x2b31eda18e40" loc="29:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x2b31eda18e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b31eda1dbe8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b31eda1c548"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b31eda1c0c0"/>
        <function-ref name="overflow" scoped="" ref="0x2b31eda1c9d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b31eda0cb90" loc="27:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b31eda0cb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31eda08020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x2b31eda00748" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x2b31eda00748"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b31ed9fe020"/>
        <function-ref name="fired" scoped="" ref="0x2b31ed9ff020"/>
        <function-ref name="startAt" scoped="" ref="0x2b31ed9ff930"/>
        <function-ref name="isRunning" scoped="" ref="0x2b31ed9ff4a8"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b31ed9fe4a8"/>
        <function-ref name="start" scoped="" ref="0x2b31eda07578"/>
        <function-ref name="stop" scoped="" ref="0x2b31eda07a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x2b31edaf9938" loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2b31edaf9938"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b31edb1a020"/>
        <function-ref name="fired" scoped="" ref="0x2b31edaf7088"/>
        <function-ref name="startAt" scoped="" ref="0x2b31edaf7998"/>
        <function-ref name="isRunning" scoped="" ref="0x2b31edaf7510"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b31edb1a4a8"/>
        <function-ref name="start" scoped="" ref="0x2b31edaf86b0"/>
        <function-ref name="stop" scoped="" ref="0x2b31edaf8b88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b31edaf9190" loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b31edaf9190"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x2b31ed482d88"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x2b31ed482d88"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31edaf94e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x2b31edb1aa90" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2b31edb1aa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b31edb18828"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b31edb17190"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b31edb18cb0"/>
        <function-ref name="overflow" scoped="" ref="0x2b31edb17618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x2b31edf134a0" loc="38:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2b31edf134a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2b31edf137f0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2b31edf13978"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2b31edf13b00"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2b31edf13c88"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2b31edf13e10"/>
        <function-ref name="setControl" scoped="" ref="0x2b31edf12020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x2b31edf1e160" loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2b31edf1e160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b31edf1c918"/>
        <function-ref name="fired" scoped="" ref="0x2b31edf1d980"/>
        <function-ref name="startAt" scoped="" ref="0x2b31edf1c310"/>
        <function-ref name="isRunning" scoped="" ref="0x2b31edf1de08"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b31edf1cda0"/>
        <function-ref name="start" scoped="" ref="0x2b31edf1d020"/>
        <function-ref name="stop" scoped="" ref="0x2b31edf1d4f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b31edf1f980" loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b31edf1f980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b31edf1fcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x2b31edf1b3d0" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2b31edf1b3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b31edf19150"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b31edf19a60"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b31edf195d8"/>
        <function-ref name="overflow" scoped="" ref="0x2b31edf18020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerSync" ref="0x2b31edf42510" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerSync" scoped="" ref="0x2b31edf42510"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
      </instance>
      <interface-functions>
        <function-ref name="setAssr" scoped="" ref="0x2b31edf41030"/>
        <function-ref name="controlBusy" scoped="" ref="0x2b31edf429e8"/>
        <function-ref name="compareBusy" scoped="" ref="0x2b31edf42b70"/>
        <function-ref name="countBusy" scoped="" ref="0x2b31edf42cf8"/>
        <function-ref name="getAssr" scoped="" ref="0x2b31edf42e80"/>
        <function-ref name="setTimer0Synchronous" scoped="" ref="0x2b31edf42860"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x2b31edf123b0" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2b31edf123b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2b31edf0fc20"/>
        <function-ref name="fired" scoped="" ref="0x2b31edf11980"/>
        <function-ref name="get" scoped="" ref="0x2b31edf11020"/>
        <function-ref name="reset" scoped="" ref="0x2b31edf11e08"/>
        <function-ref name="isOn" scoped="" ref="0x2b31edf420f8"/>
        <function-ref name="set" scoped="" ref="0x2b31edf114a8"/>
        <function-ref name="start" scoped="" ref="0x2b31edf0f310"/>
        <function-ref name="stop" scoped="" ref="0x2b31edf0f798"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x2b31edf185a0" loc="37:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b31edf185a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2b31edf146f8"/>
        <function-ref name="test" scoped="" ref="0x2b31edf16db8"/>
        <function-ref name="get" scoped="" ref="0x2b31edf17150"/>
        <function-ref name="setScale" scoped="" ref="0x2b31edf14b80"/>
        <function-ref name="getScale" scoped="" ref="0x2b31edf13088"/>
        <function-ref name="reset" scoped="" ref="0x2b31edf16020"/>
        <function-ref name="overflow" scoped="" ref="0x2b31edf17ab0"/>
        <function-ref name="isOn" scoped="" ref="0x2b31edf14270"/>
        <function-ref name="set" scoped="" ref="0x2b31edf175d8"/>
        <function-ref name="start" scoped="" ref="0x2b31edf164a8"/>
        <function-ref name="stop" scoped="" ref="0x2b31edf16930"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x2b31eda9b020" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2b31eda9b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2b31eda9b370"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2b31eda9b4f8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2b31eda9b680"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2b31eda9b808"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2b31eda9b990"/>
        <function-ref name="setControl" scoped="" ref="0x2b31eda9bb18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerSync" ref="0x2b31eda96218" loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerSync" scoped="" ref="0x2b31eda96218"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
      </instance>
      <interface-functions>
        <function-ref name="setAssr" scoped="" ref="0x2b31eda96d10"/>
        <function-ref name="controlBusy" scoped="" ref="0x2b31eda966f0"/>
        <function-ref name="compareBusy" scoped="" ref="0x2b31eda96878"/>
        <function-ref name="countBusy" scoped="" ref="0x2b31eda96a00"/>
        <function-ref name="getAssr" scoped="" ref="0x2b31eda96b88"/>
        <function-ref name="setTimer0Synchronous" scoped="" ref="0x2b31eda96568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x2b31eda9a020" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2b31eda9a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2b31eda977a8"/>
        <function-ref name="fired" scoped="" ref="0x2b31eda99560"/>
        <function-ref name="get" scoped="" ref="0x2b31eda9aba0"/>
        <function-ref name="reset" scoped="" ref="0x2b31eda999e8"/>
        <function-ref name="isOn" scoped="" ref="0x2b31eda97c30"/>
        <function-ref name="set" scoped="" ref="0x2b31eda99088"/>
        <function-ref name="start" scoped="" ref="0x2b31eda99e70"/>
        <function-ref name="stop" scoped="" ref="0x2b31eda97320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b31eda81e00" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b31eda81e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2b31eda9c0f8"/>
        <function-ref name="test" scoped="" ref="0x2b31eda9d798"/>
        <function-ref name="get" scoped="" ref="0x2b31edaa0a18"/>
        <function-ref name="setScale" scoped="" ref="0x2b31eda9c580"/>
        <function-ref name="getScale" scoped="" ref="0x2b31eda9ca58"/>
        <function-ref name="reset" scoped="" ref="0x2b31eda9f980"/>
        <function-ref name="overflow" scoped="" ref="0x2b31eda9f4f8"/>
        <function-ref name="isOn" scoped="" ref="0x2b31eda9dc20"/>
        <function-ref name="set" scoped="" ref="0x2b31eda9f020"/>
        <function-ref name="start" scoped="" ref="0x2b31eda9fe08"/>
        <function-ref name="stop" scoped="" ref="0x2b31eda9d310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x2b31edaaf160" loc="62:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2b31edaaf160"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2b31edaaf4b0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2b31edaaf638"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2b31edaaf7c0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2b31edaaf948"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2b31edaafad0"/>
        <function-ref name="setControl" scoped="" ref="0x2b31edaafc58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x2b31edaaa268" loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2b31edaaa268"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2b31edaaa5b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerSync" ref="0x2b31edaaa958" loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerSync" scoped="" ref="0x2b31edaaa958"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
      </instance>
      <interface-functions>
        <function-ref name="setAssr" scoped="" ref="0x2b31edaa94b8"/>
        <function-ref name="controlBusy" scoped="" ref="0x2b31edaaae30"/>
        <function-ref name="compareBusy" scoped="" ref="0x2b31edaa9020"/>
        <function-ref name="countBusy" scoped="" ref="0x2b31edaa91a8"/>
        <function-ref name="getAssr" scoped="" ref="0x2b31edaa9330"/>
        <function-ref name="setTimer0Synchronous" scoped="" ref="0x2b31edaaaca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x2b31edaad190" loc="63:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2b31edaad190"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2b31edaab930"/>
        <function-ref name="fired" scoped="" ref="0x2b31edaac6d0"/>
        <function-ref name="get" scoped="" ref="0x2b31edaadd10"/>
        <function-ref name="reset" scoped="" ref="0x2b31edaacb58"/>
        <function-ref name="isOn" scoped="" ref="0x2b31edaabdb8"/>
        <function-ref name="set" scoped="" ref="0x2b31edaac1f8"/>
        <function-ref name="start" scoped="" ref="0x2b31edaab020"/>
        <function-ref name="stop" scoped="" ref="0x2b31edaab4a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b31eda92180" loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b31eda92180"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2b31edab0270"/>
        <function-ref name="test" scoped="" ref="0x2b31edab1930"/>
        <function-ref name="get" scoped="" ref="0x2b31eda92d00"/>
        <function-ref name="setScale" scoped="" ref="0x2b31edab06f8"/>
        <function-ref name="getScale" scoped="" ref="0x2b31edab0bd0"/>
        <function-ref name="reset" scoped="" ref="0x2b31eda91b58"/>
        <function-ref name="overflow" scoped="" ref="0x2b31eda916d0"/>
        <function-ref name="isOn" scoped="" ref="0x2b31edab1db8"/>
        <function-ref name="set" scoped="" ref="0x2b31eda911f8"/>
        <function-ref name="start" scoped="" ref="0x2b31edab1020"/>
        <function-ref name="stop" scoped="" ref="0x2b31edab14a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x2b31edb30cf0" loc="74:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x2b31edb30cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b31edb2e0a0"/>
        <function-ref name="runTask" scoped="" ref="0x2b31edb2e228"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x2b31edb33c70" loc="49:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2b31edb33c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b31edb30410"/>
        <function-ref name="fired" scoped="" ref="0x2b31edb314a8"/>
        <function-ref name="startAt" scoped="" ref="0x2b31edb31db8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b31edb31930"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b31edb30898"/>
        <function-ref name="start" scoped="" ref="0x2b31edb329f0"/>
        <function-ref name="stop" scoped="" ref="0x2b31edb31020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b31edb38ab0" loc="48:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b31edb38ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b31edb35d60"/>
        <function-ref name="fired" scoped="" ref="0x2b31edb36470"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b31edb351c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b31edb36d10"/>
        <function-ref name="getdt" scoped="" ref="0x2b31edb33648"/>
        <function-ref name="gett0" scoped="" ref="0x2b31edb331f8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b31edb368c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b31edb37620"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b31edb35790"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b31edb37ac0"/>
        <function-ref name="stop" scoped="" ref="0x2b31edb36020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x2b31edb97478" loc="71:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x2b31edb97478"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b31edb977c8"/>
        <function-ref name="runTask" scoped="" ref="0x2b31edb97950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x2b31edb76208" loc="49:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x2b31edb76208"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b31edb985f0"/>
        <function-ref name="fired" scoped="" ref="0x2b31edb75b28"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b31edb9a8c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b31edb9a470"/>
        <function-ref name="getdt" scoped="" ref="0x2b31edb97020"/>
        <function-ref name="gett0" scoped="" ref="0x2b31edb98a40"/>
        <function-ref name="isRunning" scoped="" ref="0x2b31edb9a020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b31edb76d50"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b31edb98020"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b31edb75238"/>
        <function-ref name="stop" scoped="" ref="0x2b31edb756d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b31edb7c020" loc="48:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b31edb7c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b31edb78358"/>
        <function-ref name="fired" scoped="" ref="0x2b31edb7b9b8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b31edb79748"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b31edb792d8"/>
        <function-ref name="getdt" scoped="" ref="0x2b31edb78c38"/>
        <function-ref name="gett0" scoped="" ref="0x2b31edb787c8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b31edb7be28"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b31edb7cb88"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b31edb79d38"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b31edb7b088"/>
        <function-ref name="stop" scoped="" ref="0x2b31edb7b548"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x2b31edb95c38" loc="48:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x2b31edb95c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b31edb94820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x2b31edb94e48" loc="49:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2b31edb94e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b31ed502530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b31ed502888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b31edb8abe8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b31edb89548"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b31edb890c0"/>
        <function-ref name="overflow" scoped="" ref="0x2b31edb899d0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:/homes/hglanzer/GIT/tinyos/tos/interfaces/Init.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2b31ed57d178" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/Init.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b31ed48cae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x2b31ed575e40" loc="60:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
        <documentation loc="51:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x2b31ed583290" loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x2b31ed583020" loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x2b31ed587940" loc="31:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="27:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x2b31ed586378" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2b31ed586108" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x2b31ed586e00" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2b31ed586b90" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x2b31ed585698" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x2b31ed59a0d8" loc="44:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x2b31ed59a7a0" loc="45:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x2b31ed59b328" loc="42:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x2b31ed599570" loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b31ed59b9c8" loc="43:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x2b31ed59ae58" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b31ed59d5a8" loc="40:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x2b31ed59dc18" loc="41:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2b31ed4883a0" loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="54:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x2b31ed486290" loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x2b31ed488ab8" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x2b31ed492070" loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b31ed48cae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x2b31ed492860" loc="75:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
        <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
      <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x2b31ed545450" loc="76:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x2b31ed55bd28" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x2b31ed4e11a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x2b31ed5656d8" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b31ed754d38" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b31ed754d38"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2b31ed75d760" loc="136:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="132:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2b31ed74d178" loc="83:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="80:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x2b31ed760da8" loc="114:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="100:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b31ed760810" loc="114:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2b31ed760b28" loc="114:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x2b31ed7600d8" loc="98:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="94:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x2b31ed75c6b0" loc="151:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="146:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x2b31ed75de80" loc="144:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="138:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2b31ed74d8f0" loc="92:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="86:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x2b31ed750858" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b31ed7505e8" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x2b31ed75fd28" loc="129:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="116:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b31ed75f790" loc="129:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2b31ed75faa8" loc="129:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x2b31ed74e2d0" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b31ed74e060" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b31ed74ea78" loc="78:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x2b31ed7475e8" loc="49:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b31ed7475e8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x2b31ed747e20" loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
        <documentation loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b31ed48cae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x2b31ed753b00" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b31ed48cae0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b31ed7475e8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x2b31ed753580" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b31ed48cae0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x2b31ed753880" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b31ed7475e8"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LCD128x64" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
      <function command="" provided="0" name="startClearScreen" ref="0x2b31ed74b590" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2b31ed74b320" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="initDone" ref="0x2b31ed74bc00" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteLine" ref="0x2b31ed74cc00" loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b31ed74c020" loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b31ed74c320" loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="xEnd" ref="0x2b31ed74c640" loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="yEnd" ref="0x2b31ed74c960" loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteRectangle" ref="0x2b31ed73c8c0" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b31ed73dc88" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b31ed73c020" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="a" ref="0x2b31ed73c320" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="b" ref="0x2b31ed73c620" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteString" ref="0x2b31ed73a8b0" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b31ed73a020" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="x" ref="0x2b31ed73a320" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b31ed73a620" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="writeByte" ref="0x2b31ed741678" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b31ed742d58" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b31ed7410c8" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x2b31ed7413e8" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPixel" ref="0x2b31ed73f2a0" loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b31ed740be8" loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b31ed73f020" loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="circleWritten" ref="0x2b31ed74a328" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writeBar" ref="0x2b31ed73d5f0" loc="16:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b31ed73f8d0" loc="16:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b31ed73fbd0" loc="16:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="width" ref="0x2b31ed73d020" loc="16:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x2b31ed73d350" loc="16:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteCircle" ref="0x2b31ed73b918" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="xcenter" ref="0x2b31ed73b020" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="ycenter" ref="0x2b31ed73b358" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="radius" ref="0x2b31ed73b688" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="rectangleWritten" ref="0x2b31ed7481d8" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writePixel" ref="0x2b31ed7405b8" loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b31ed741cb8" loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b31ed740020" loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="on" ref="0x2b31ed740328" loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initLCD" ref="0x2b31ed742700" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2b31ed742490" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stringWritten" ref="0x2b31ed74a9c8" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcSingle" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x2b31ed745978" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Initiates an ADC conversion on a given channel.</short>
          <long>&#10; Initiates an ADC conversion on a given channel.&#10;&#10; @param channel A/D conversion channel.&#10; @param refVoltage Select reference voltage for A/D conversion. See&#10;   the ATM128_ADC_VREF_xxx constants in Atm128ADC.h&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in refernce voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x2b31ed72fb48" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x2b31ed745020" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x2b31ed745388" loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x2b31ed7456d8" loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2b31ed743258" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Cancel an outstanding getData operation.</short>
          <long>&#10; Cancel an outstanding getData operation. Use with care, to&#10; avoid problems with races between the dataReady event and cancel.&#10; @return TRUE if a conversion was in-progress or an interrupt&#10;   was pending. dataReady will not be signaled. FALSE if the&#10;   conversion was already complete. dataReady will be (or has&#10;   already been) signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b31ed744970" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.</short>
          <long>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if the conversion precise, FALSE if it wasn't. This&#10;   values matches the result from the &#60;code>getData&#60;/code> call.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b31ed7443d0" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x2b31ed7446f0" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
      <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x2b31ed731258" loc="120:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="104:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b31ed48cae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x2b31ed732328" loc="97:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="90:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b31ed48cae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x2b31ed7359c8" loc="88:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="78:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b31ed48cae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x2b31ed732ab0" loc="102:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="99:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x2b31ed731c40" loc="128:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="122:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x2b31ed852020" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x2b31ed853848" loc="59:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcMultiple" loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.&#10; &#60;p>&#10; Because of the possibility that samples may be imprecise after &#10; switching channels and/or reference voltages, and because there&#10; is a one sample delay on swithcing channels and reference voltages,&#10; Atm128ADCMultiple is complex. Two straightforward uses are:&#10; &#60;ol type=&#34;A&#34;>&#10; &#60;li>Acquire N samples from channel C:&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C at the desired rate&#10;       (note that the choice of prescalers is very limited, so you&#10;       don't have many choices for sampling rate)&#10;    &#60;li>ignore the first dataReady event&#10;    &#60;li>use the results of the next N dataReady() events, return FALSE&#10;       on the last one&#10;    &#60;/ol>&#10; &#60;li>Acquire one sample each from channels C1, ..., Cn (this pseudocode&#10;    assumes that none of these channels are differential)&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C1&#10;    &#60;li>on the ith dataReady event switch to channel Ci+1 by changing&#10;       *newChannel&#10;    &#60;li>the data passed to the ith dataReady event is for channel Ci-1&#10;       (the data from the first dataReady event is ignored)&#10;    &#60;/ol>&#10; &#60;/ol>&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x2b31ed856020" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.</short>
          <long>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.&#10;&#10; @param channel Initial A/D conversion channel. The channel can &#10;   be changed in the dataReady event, though these changes happen&#10;   with a one-sample delay (this is a hardware restriction).&#10; @param refVoltage Initial A/D reference voltage. See the&#10;   ATM128_ADC_VREF_xxx constants in Atm128ADC.h. Like the channel,&#10;   the reference voltage can be changed in the dataReady event with&#10;   a one-sample delay.&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in reference voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x2b31ed858288" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x2b31ed8585e0" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x2b31ed858948" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x2b31ed858c98" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b31ed855d68" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Returns the next sample in a free-running conversion.</short>
          <long>&#10; Returns the next sample in a free-running conversion. Allow the user&#10; to switch channels and/or reference voltages with a one sample delay.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if this conversion was precise, FALSE if it wasn't &#10;   (we assume that the second conversion after a change of reference&#10;   voltage or after switching to a differential channel is precise)&#10; @param channel Channel this sample was from.&#10; @param newChannel Change this parameter to switch to a new channel&#10;   for the second next sample.&#10; @param newRefVoltage Change this parameter to change the reference &#10;   voltage for the second next sample.&#10;&#10; @return TRUE to continue sampling, FALSE to stop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b31ed856be8" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x2b31ed855020" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0x2b31ed855358" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="newChannel" ref="0x2b31ed855708" loc="120:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="newRefVoltage" ref="0x2b31ed855ab8" loc="120:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Adc" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <short>&#10; HPL interface to the Atmega128 A/D conversion subsystem.</short>
        <long>&#10; HPL interface to the Atmega128 A/D conversion subsystem. Please see the&#10; Atmega128 manual for full details on the functioning of this subsystem.&#10; &#60;p>&#10; A word of warning: the Atmega128 SLEEP instruction initiates an A/D&#10; conversion when the ADC and ADC interrupt are enabled.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0x2b31ed8720d8" loc="114:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="111:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdmux" ref="0x2b31ed8611d8" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Read the ADMUX (ADC selection) register&#10; @return Current ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b31ed4fb478"/>
            <typename><typedef-ref name="Atm128Admux_t" ref="0x2b31ed4fb930"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPrescaler" ref="0x2b31ed870338" loc="140:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="135:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set ADC prescaler selection bits&#10; </short>
          <long>&#10; Set ADC prescaler selection bits&#10; @param scale New ADC prescaler. Must be one of the ATM128_ADC_PRESCALE_xxx&#10;   values from Atm128Adc.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x2b31ed8700c8" loc="140:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x2b31ed872918" loc="122:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="118:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is ADC enabled?&#10; </short>
          <long>&#10; Is ADC enabled?&#10; @return TRUE if the ADC is enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAdc" ref="0x2b31ed85ed18" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdmux" ref="0x2b31ed861bb0" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Set the ADMUX (ADC selection) register&#10; @param admux New ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b31ed4fb478"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x2b31ed4fb930"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="admux" ref="0x2b31ed861940" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b31ed4fb478"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x2b31ed4fb930"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterruption" ref="0x2b31ed85db88" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isComplete" ref="0x2b31ed871870" loc="133:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="128:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.</short>
          <long>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.&#10; @return TRUE if the A/D conversion is complete, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2b31ed870ad0" loc="150:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="142:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Cancel A/D conversion and any pending A/D interrupt.</short>
          <long>&#10; Cancel A/D conversion and any pending A/D interrupt. Also disables the&#10; ADC interruption (otherwise a sample might start at the next sleep&#10; instruction). This command can assume that the A/D converter is enabled. &#10; @return TRUE if an A/D conversion was in progress or an A/D interrupt&#10;   was pending, FALSE otherwise. In single conversion mode, a return&#10;   of TRUE implies that the dataReady event will not be signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAdc" ref="0x2b31ed85d448" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetInterrupt" ref="0x2b31ed85ca48" loc="99:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="96:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Clear the ADC interrupt flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterruption" ref="0x2b31ed85c328" loc="95:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x2b31ed85b1d8" loc="106:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Start ADC conversion.</short>
          <long>&#10; Start ADC conversion. If ADC interrupts are enabled, the dataReady event&#10; will be signaled once (in non-continuous mode) or repeatedly (in&#10; continuous mode).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isStarted" ref="0x2b31ed8710d8" loc="127:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="123:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion in progress?&#10; </short>
          <long>&#10; Is A/D conversion in progress?&#10; @return TRUE if the A/D conversion is in progress, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdcsra" ref="0x2b31ed860dd0" loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Set the ADCSRA (ADC control) register&#10; @param adcsra New ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b31ed503020"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2b31ed5036e8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adcsra" ref="0x2b31ed860b60" loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b31ed503020"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2b31ed5036e8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setContinuous" ref="0x2b31ed85b990" loc="110:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="107:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdcsra" ref="0x2b31ed8603e0" loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Read the ADCSRA (ADC control) register&#10; @return Current ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b31ed503020"/>
            <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2b31ed5036e8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x2b31ed85e5b8" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the latest A/D conversion result&#10; </short>
          <long>&#10; Read the latest A/D conversion result&#10; @return A/D value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b31ed86f640" loc="156:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="152:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; A/D interrupt occured&#10; </short>
          <long>&#10; A/D interrupt occured&#10; @param data Latest A/D conversion result&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b31ed86f3d0" loc="156:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b31ed284378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x2b31ed864020" loc="95:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b31ed48cae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b31ed8647f8" loc="105:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b31ed48cae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x2b31ed8e8c98" loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x2b31ed8e55c0" loc="61:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x2b31ed8e2a78" loc="56:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b31ed48cae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x2b31ed8e1a70" loc="73:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x2b31ed8e2258" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x2b31ed8e12a8" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x2b31ed8df360" loc="81:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x2b31ed8dd020" loc="90:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x2b31ed8dd810" loc="98:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x2b31ed8ee020" loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b31ed48cae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b31ed8f5218"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x2b31ed8efc60" loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b31ed8f5218"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x2b31ed8f00d8" loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x2b31ed8f0b58" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b31ed8f5218"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x2b31ed8f08e8" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b31ed8f5218"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x2b31ed8ef428" loc="70:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x2b31ed8f5218"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x2b31ed91e550" loc="61:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="58:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x2b31ed91ec88" loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x2b31ed91d420" loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x2b31ed91c2a8" loc="83:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x2b31ed91b8b0" loc="100:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="96:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b31ed919070" loc="117:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="103:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x2b31ed91db38" loc="77:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="74:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b31ed919b70" loc="134:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="120:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x2b31ed919900" loc="134:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPort" ref="0x2b31ed918a08" loc="137:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x2b31ed918468" loc="137:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
          <variable name="pval" ref="0x2b31ed918788" loc="137:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x2b31ed920df8" loc="56:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x2b31ed91ca18" loc="89:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="86:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x2b31ed91b178" loc="94:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="91:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x2b31ed9754f0" loc="62:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcConfig" loc="19:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
      <documentation loc="13:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <short>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.</short>
        <long>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRefVoltage" ref="0x2b31ed993960" loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="27:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain reference voltage&#10; </short>
          <long>&#10; Obtain reference voltage&#10; @return The reference voltage to use. Must be one of the &#10;   ATM128_ADC_VREF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x2b31ed993178" loc="25:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="20:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain channel.</short>
          <long>&#10; Obtain channel.&#10; @return The A/D channel to use. Must be one of the ATM128_ADC_SNGL_xxx&#10;   or ATM128_ADC_DIFF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPrescaler" ref="0x2b31ed991178" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain prescaler value.</short>
          <long>&#10; Obtain prescaler value.&#10; @return The prescaler value to use. Must be one of the &#10;   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x2b31ed98b378" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b31ed98b378"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x2b31ed98bbe8" loc="58:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b31ed48cae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x2b31ed9898e8" loc="66:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
        <documentation loc="60:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b31ed48cae0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b31ed98b378"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x2b31ed989368" loc="66:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b31ed48cae0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x2b31ed989668" loc="66:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b31ed98b378"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b31ed9ef560" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b31ed9ef560"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x2b31ed9efdf0" loc="61:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b31ed284db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b31eda1b3f8" loc="57:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b31eda1b3f8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2b31eda1b628" loc="57:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b31eda1b628"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x2b31eda1a020" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b31eda1b628"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x2b31eda18070" loc="76:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x2b31eda1a838" loc="71:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x2b31eda18760" loc="82:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="78:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b31eda08ac8" loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b31eda08ac8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2b31eda08cf8" loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b31eda08cf8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2b31eda017a0" loc="109:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="105:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b31eda08cf8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2b31eda04770" loc="78:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x2b31eda02d70" loc="103:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="90:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b31eda08cf8"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b31eda08cf8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b31eda027d0" loc="103:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b31eda08cf8"/></type-var>
          </variable>
          <variable name="dt" ref="0x2b31eda02af0" loc="103:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b31eda08cf8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2b31eda02020" loc="88:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="81:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x2b31eda00020" loc="116:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="111:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b31eda08cf8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2b31eda05810" loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b31eda08cf8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b31eda055a0" loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b31eda08cf8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b31eda04020" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="68:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControl" ref="0x2b31eda33a58" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <documentation loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b31ed50ea08"/>
            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2b31ed50ee10"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x2b31eda2fe18" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <documentation loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b31ed51b100"/>
            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2b31ed51b508"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x2b31eda30c70" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b31ed512980"/>
            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2b31ed512d88"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x2b31eda2f678" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b31ed512980"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2b31ed512d88"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x2b31eda2f408" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b31ed512980"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2b31ed512d88"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x2b31eda4d828" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b31ed51b100"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2b31ed51b508"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x2b31eda4d5b8" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b31ed51b100"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2b31ed51b508"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x2b31eda304c8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b31ed50ea08"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2b31ed50ee10"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x2b31eda30258" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b31ed50ea08"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2b31ed50ee10"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerSync" loc="22:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setTimer0Synchronous" ref="0x2b31eda40328" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Turn on timer 0 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBusy" ref="0x2b31eda40a30" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; @return TRUE if TCCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareBusy" ref="0x2b31eda3e258" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; @return TRUE if OCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x2b31eda3ea08" loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; @return TRUE if TCNT0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x2b31eda41110" loc="28:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="24:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Read timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer0 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b31ed515118"/>
            <typename><typedef-ref name="Atm128Assr_t" ref="0x2b31ed515520"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x2b31eda41ac0" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Set timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer0 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b31ed515118"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x2b31ed515520"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b31eda41850" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b31ed515118"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x2b31ed515520"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x2b31eda4b068" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b31eda4b068"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x2b31eda47738" loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2b31eda4a9d0" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b31eda4b920" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b31eda4b068"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x2b31eda48110" loc="62:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x2b31eda46020" loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b31eda4a290" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b31eda4b068"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x2b31eda4a020" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b31eda4b068"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2b31eda48808" loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b31eda47020" loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x2b31eda1e418" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b31eda1e418"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x2b31eda39900" loc="98:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="97:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x2b31eda3aa40" loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b31eda1ecb8" loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b31eda1e418"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x2b31eda37290" loc="104:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x2b31eda37020" loc="104:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x2b31eda37a10" loc="110:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="106:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b31ed282910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x2b31eda3b4c0" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x2b31eda3dd50" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x2b31eda391d8" loc="93:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="89:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b31ed4834c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b31eda3d630" loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b31eda1e418"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x2b31eda3d3c0" loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b31eda1e418"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2b31eda3bbb8" loc="78:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b31eda3a328" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
