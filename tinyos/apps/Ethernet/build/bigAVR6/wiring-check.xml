<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="19:BlinkAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2b67a6ce2d60"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2b67a6b2a220"/></to>
    </wire>
    <wire loc="72:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2b67a6b2a220"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2b67a6cda198"/></to>
    </wire>
    <wire loc="21:BlinkAppC.nc">
      <from><interface-ref name="GLCD" scoped="" ref="0x2b67a6ce0020"/></from>
      <to><interface-ref name="GLCD" scoped="" ref="0x2b67a6d0e2d0"/></to>
    </wire>
    <wire loc="9:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDC.nc">
      <from><interface-ref name="GLCD" scoped="" ref="0x2b67a6d0e2d0"/></from>
      <to><interface-ref name="GLCD" scoped="" ref="0x2b67a6d1ad80"/></to>
    </wire>
    <wire loc="23:BlinkAppC.nc">
      <from><interface-ref name="Eth" scoped="" ref="0x2b67a6cf2020"/></from>
      <to><interface-ref name="Ethernet" scoped="" ref="0x2b67a702e020"/></to>
    </wire>
    <wire loc="13:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetC.nc">
      <from><interface-ref name="Ethernet" scoped="" ref="0x2b67a702e020"/></from>
      <to><interface-ref name="Ethernet" scoped="" ref="0x2b67a704a258"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b67a6b29620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b67a7525978"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b67a6b29620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b67a74de7f0"/></to>
    </wire>
    <wire loc="67:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2b67a6cda7d0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2b67a6a32600"/></to>
    </wire>
    <wire loc="53:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2b67a6a32600"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2b67a6ae9448"/></to>
    </wire>
    <wire loc="68:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2b67a6cd91d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b67a6b2c620"/></to>
    </wire>
    <wire loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b67a6b2c620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b67a6b3b600"/></to>
    </wire>
    <wire loc="71:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b67a6cd9898"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x2b67a6b29620"/></to>
    </wire>
    <wire loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2b67a6b27380"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b67a6ddfd48"/></to>
    </wire>
    <wire loc="59:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b67a6b2f618"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b67a6cbc8f0"/></to>
    </wire>
    <wire loc="61:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x2b67a6b3a398"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b67a6cbc2c0"/></to>
    </wire>
    <wire loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x2b67a6b3bca0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2b67a6b34b98"/></to>
    </wire>
    <wire loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2b67a6b34b98"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2b67a6b3e698"/></to>
    </wire>
    <wire loc="63:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2b67a6b41360"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2b67a6b27380"/></to>
    </wire>
    <wire loc="29:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2b67a6b3db08"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2b67a6b41360"/></to>
    </wire>
    <wire loc="191:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x2b67a6b86af0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a6c5f970"/></to>
    </wire>
    <wire loc="165:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x2b67a6b68658"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b67a6c06020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b67a6c06020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a731a480"/></to>
    </wire>
    <wire loc="176:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x2b67a6b79658"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b67a6c15d60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b67a6c15d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a7391480"/></to>
    </wire>
    <wire loc="185:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x2b67a6b7e348"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b67a6c175b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b67a6c175b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a73ea480"/></to>
    </wire>
    <wire loc="143:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x2b67a6b54348"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b67a6bdd740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b67a6bdd740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a71ed480"/></to>
    </wire>
    <wire loc="183:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x2b67a6b80020"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b67a6c192a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b67a6c192a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a73f0480"/></to>
    </wire>
    <wire loc="146:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x2b67a6b52658"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b67a6be5930"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b67a6be5930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a723c3e0"/></to>
    </wire>
    <wire loc="157:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x2b67a6b637e0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b67a6bf4740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b67a6bf4740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a72a1480"/></to>
    </wire>
    <wire loc="168:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x2b67a6b73af0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b67a6c02430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b67a6c02430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a7310480"/></to>
    </wire>
    <wire loc="179:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x2b67a6b76af0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b67a6c11120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b67a6c11120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a7388480"/></to>
    </wire>
    <wire loc="138:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x2b67a6b4caf0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b67a6bd2020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b67a6bd2020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a71d4480"/></to>
    </wire>
    <wire loc="149:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x2b67a6b5daf0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b67a6be2d60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b67a6be2d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a725c480"/></to>
    </wire>
    <wire loc="160:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x2b67a6b60c78"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b67a6bf1bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b67a6bf1bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a72c4480"/></to>
    </wire>
    <wire loc="171:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x2b67a6b6f020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b67a6bff8c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b67a6bff8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a7334480"/></to>
    </wire>
    <wire loc="188:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x2b67a6b7b7e0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b67a6c26a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b67a6c26a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a73e0480"/></to>
    </wire>
    <wire loc="194:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x2b67a6b827e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a6c74020"/></to>
    </wire>
    <wire loc="174:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x2b67a6b6d348"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b67a6c07a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b67a6c07a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a736a480"/></to>
    </wire>
    <wire loc="141:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x2b67a6b56020"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b67a6bcf430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b67a6bcf430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a71f3480"/></to>
    </wire>
    <wire loc="152:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x2b67a6b591a0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b67a6bee120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b67a6bee120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a7253480"/></to>
    </wire>
    <wire loc="192:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x2b67a6b844d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a6c6cab0"/></to>
    </wire>
    <wire loc="155:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x2b67a6b654d0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b67a6bf6500"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b67a6bf6500"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a72a83e0"/></to>
    </wire>
    <wire loc="166:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x2b67a6b677e0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b67a6c05120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b67a6c05120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a7317480"/></to>
    </wire>
    <wire loc="177:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x2b67a6b787e0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b67a6c14e18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b67a6c14e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a738e480"/></to>
    </wire>
    <wire loc="186:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x2b67a6b7d4d0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b67a6c28740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b67a6c28740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a73e6480"/></to>
    </wire>
    <wire loc="144:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x2b67a6b534d0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b67a6bdc8c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b67a6bdc8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a71ea480"/></to>
    </wire>
    <wire loc="147:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x2b67a6b517e0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b67a6be4a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b67a6be4a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a7239480"/></to>
    </wire>
    <wire loc="158:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x2b67a6b62968"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b67a6bf38c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b67a6bf38c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a729e480"/></to>
    </wire>
    <wire loc="169:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x2b67a6b72c78"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b67a6c015b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b67a6c015b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a730d480"/></to>
    </wire>
    <wire loc="180:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x2b67a6b75c78"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b67a6c102a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b67a6c102a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a7385480"/></to>
    </wire>
    <wire loc="139:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x2b67a6b4bc78"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b67a6bd1120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b67a6bd1120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a71d1480"/></to>
    </wire>
    <wire loc="150:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x2b67a6b5cc78"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b67a6be1e18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b67a6be1e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a7259480"/></to>
    </wire>
    <wire loc="161:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x2b67a6b5fe00"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b67a6befd60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b67a6befd60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a72c1480"/></to>
    </wire>
    <wire loc="189:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x2b67a6b87968"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b67a6c25bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b67a6c25bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a73dd480"/></to>
    </wire>
    <wire loc="164:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x2b67a6b691a0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b67a6bf8e40"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b67a6bf8e40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a731d3e0"/></to>
    </wire>
    <wire loc="175:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x2b67a6b7a4d0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b67a6c16bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b67a6c16bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a7367480"/></to>
    </wire>
    <wire loc="184:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x2b67a6b7f1a0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b67a6c18430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b67a6c18430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a73ed480"/></to>
    </wire>
    <wire loc="195:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x2b67a6b8f968"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a6c81180"/></to>
    </wire>
    <wire loc="142:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x2b67a6b551a0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b67a6bde5b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b67a6bde5b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a71f0480"/></to>
    </wire>
    <wire loc="153:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x2b67a6b58348"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b67a6bed2a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b67a6bed2a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a7250480"/></to>
    </wire>
    <wire loc="182:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x2b67a6b74e00"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b67a6c1a1e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b67a6c1a1e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a73f33e0"/></to>
    </wire>
    <wire loc="156:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x2b67a6b64658"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b67a6bf55b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b67a6bf55b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a72a5480"/></to>
    </wire>
    <wire loc="167:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x2b67a6b66968"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b67a6c032a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b67a6c032a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a7313480"/></to>
    </wire>
    <wire loc="178:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x2b67a6b77968"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b67a6c12020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b67a6c12020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a738b480"/></to>
    </wire>
    <wire loc="187:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x2b67a6b7c658"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b67a6c278c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b67a6c278c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a73e3480"/></to>
    </wire>
    <wire loc="137:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x2b67a6b3f870"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b67a6bd4dc0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b67a6bd4dc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a71d83e0"/></to>
    </wire>
    <wire loc="148:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x2b67a6b5e968"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b67a6be3bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b67a6be3bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a7235480"/></to>
    </wire>
    <wire loc="159:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x2b67a6b61af0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b67a6bf2a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b67a6bf2a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a72c7480"/></to>
    </wire>
    <wire loc="170:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x2b67a6b71e00"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b67a6c00740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b67a6c00740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a7337480"/></to>
    </wire>
    <wire loc="193:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x2b67a6b83658"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a6c68c38"/></to>
    </wire>
    <wire loc="173:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x2b67a6b6e1a0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b67a6c08930"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b67a6c08930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a736d3e0"/></to>
    </wire>
    <wire loc="162:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x2b67a6b6a020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b67a6bfee18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b67a6bfee18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a72be480"/></to>
    </wire>
    <wire loc="140:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x2b67a6b4ae00"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b67a6bd02a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b67a6bd02a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a71f6480"/></to>
    </wire>
    <wire loc="151:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x2b67a6b5a020"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b67a6bdf020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b67a6bdf020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b67a7256480"/></to>
    </wire>
    <wire loc="54:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6a351c8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6ae82b0"/></to>
    </wire>
    <wire loc="55:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x2b67a6af1758"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x2b67a6b08660"/></to>
    </wire>
    <wire loc="31:BlinkC.nc">
      <from><interface-ref name="testTask" scoped="" ref="0x2b67a6cff5d8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6a351c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDC.nc">
      <from><interface-ref name="LCD128x64" scoped="" ref="0x2b67a6d42958"/></from>
      <to><interface-ref name="LCD128x64" scoped="" ref="0x2b67a6f55020"/></to>
    </wire>
    <wire loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64C.nc">
      <from><interface-ref name="LCD128x64" scoped="" ref="0x2b67a6f55020"/></from>
      <to><interface-ref name="LCD128x64" scoped="" ref="0x2b67a6f80c98"/></to>
    </wire>
    <wire loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDC.nc">
      <from><interface-ref name="TouchScreen" scoped="" ref="0x2b67a6d2c020"/></from>
      <to><interface-ref name="TouchScreen" scoped="" ref="0x2b67a6d1c580"/></to>
    </wire>
    <wire loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="TouchScreen" scoped="" ref="0x2b67a6d1c580"/></from>
      <to><interface-ref name="TouchScreen" scoped="" ref="0x2b67a6d95318"/></to>
    </wire>
    <wire loc="13:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x2b67a6d85dd8"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b67a6f41358"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Read" scoped="" ref="0x2b67a6f41358"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b67a6db4668"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b67a6f40a28"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b67a6d92998"/></to>
    </wire>
    <wire loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="driveA" scoped="" ref="0x2b67a6d864e0"/></from>
      <to><interface-ref name="PortG3" scoped="" ref="0x2b67a6b827e0"/></to>
    </wire>
    <wire loc="16:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="driveB" scoped="" ref="0x2b67a6d99698"/></from>
      <to><interface-ref name="PortG4" scoped="" ref="0x2b67a6b8f968"/></to>
    </wire>
    <wire loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="adcX" scoped="" ref="0x2b67a6d98820"/></from>
      <to><interface-ref name="PortF0" scoped="" ref="0x2b67a6b74e00"/></to>
    </wire>
    <wire loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="adcY" scoped="" ref="0x2b67a6d979a8"/></from>
      <to><interface-ref name="PortF1" scoped="" ref="0x2b67a6b80020"/></to>
    </wire>
    <wire loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <from><interface-ref name="checkTS" scoped="" ref="0x2b67a6d90970"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6a351c8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b67a6dc5020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b67a6f40a28"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2b67a6dc31c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b67a6dd6ca8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b67a6dd1890"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b67a6f5d3f0"/></to>
    </wire>
    <wire loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Read" scoped="" ref="0x2b67a6db4668"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b67a6f26a28"/></to>
    </wire>
    <wire loc="31:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x2b67a6dc92f0"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x2b67a6f12880"/></to>
    </wire>
    <wire loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2b67a6f49b28"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b67a6dc31c8"/></to>
    </wire>
    <wire loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b67a6f0fe78"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b67a6dc5020"/></to>
    </wire>
    <wire loc="35:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x2b67a6f4a348"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b67a6ef8c68"/></to>
    </wire>
    <wire loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b67a6f0f020"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b67a6dced50"/></to>
    </wire>
    <wire loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b67a6dced50"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b67a6ddb488"/></to>
    </wire>
    <wire loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b67a6de09b0"/></from>
      <to><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b67a6ddbde0"/></to>
    </wire>
    <wire loc="66:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2b67a6dd6ca8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b67a6ee5e50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2b67a6ee5e50"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b67a74dce20"/></to>
    </wire>
    <wire loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b67a6ee18a0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b67a6dd1890"/></to>
    </wire>
    <wire loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b67a6de3940"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b67a6e2c020"/></to>
    </wire>
    <wire loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b67a6e2c020"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b67a6e261e8"/></to>
    </wire>
    <wire loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b67a6dd7d30"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b67a6b2f618"/></to>
    </wire>
    <wire loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x2b67a6edd478"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x2b67a6dd9c10"/></to>
    </wire>
    <wire loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b67a6f01268"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b67a6ee23f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b67a6ee23f0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b67a74d93f0"/></to>
    </wire>
    <wire loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x2b67a6e24640"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x2b67a6b11a80"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x2b67a6ee3b70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x2b67a74dab48"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2b67a6ee1020"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2b67a74d8020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b67a74d88c0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b67a6ee18a0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Queue" scoped="" ref="0x2b67a74d70a0"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x2b67a74dedc8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="grantedTask" scoped="" ref="0x2b67a74d52e8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6a351c8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x2b67a750c470"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x2b67a6edd478"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b67a750cb90"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b67a6eddb98"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b67a750b268"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b67a6f01268"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2b67a750be20"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2b67a6f01e20"/></to>
    </wire>
    <wire loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <from><interface-ref name="acquiredData" scoped="" ref="0x2b67a6f1bbf8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6a351c8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeRectangle" scoped="" ref="0x2b67a6fc8bd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6a351c8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="219:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeString" scoped="" ref="0x2b67a6fd0368"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6a351c8"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeCircle" scoped="" ref="0x2b67a6fc09b8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6a351c8"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="278:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeLine" scoped="" ref="0x2b67a6fdcca0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6a351c8"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="37:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="wait4Controller" scoped="" ref="0x2b67a6f97368"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6a351c8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="356:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeBar" scoped="" ref="0x2b67a7002590"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6a351c8"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="247:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="clearScreenNB" scoped="" ref="0x2b67a6fe3420"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6a351c8"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x2b67a70411b8"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x2b67a706b2f0"/></to>
    </wire>
    <wire loc="94:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x2b67a706b2f0"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x2b67a707c020"/></to>
    </wire>
    <wire loc="16:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2b67a70417e8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b67a7069cc8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetC.nc">
      <from><interface-ref name="ssMMC" scoped="" ref="0x2b67a704aa90"/></from>
      <to><interface-ref name="PortG1" scoped="" ref="0x2b67a6b844d0"/></to>
    </wire>
    <wire loc="19:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetC.nc">
      <from><interface-ref name="ssETH" scoped="" ref="0x2b67a7049cb0"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x2b67a6b52658"/></to>
    </wire>
    <wire loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetC.nc">
      <from><interface-ref name="rstETH" scoped="" ref="0x2b67a7047020"/></from>
      <to><interface-ref name="PortB4" scoped="" ref="0x2b67a6b5cc78"/></to>
    </wire>
    <wire loc="21:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetC.nc">
      <from><interface-ref name="intETH" scoped="" ref="0x2b67a70461c0"/></from>
      <to><interface-ref name="PortB5" scoped="" ref="0x2b67a6b5a020"/></to>
    </wire>
    <wire loc="96:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x2b67a7069020"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x2b67a707b120"/></to>
    </wire>
    <wire loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b67a702cc98"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b67a707d8b8"/></to>
    </wire>
    <wire loc="95:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x2b67a70878d0"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x2b67a707c628"/></to>
    </wire>
    <wire loc="97:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2b67a7069cc8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b67a707bd88"/></to>
    </wire>
    <wire loc="99:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="ResourceArbiter" scoped="" ref="0x2b67a70a33c8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b67a718d200"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2b67a718d200"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b67a7522d78"/></to>
    </wire>
    <wire loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2b67a70a1020"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2b67a718c760"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2b67a718c760"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2b67a7520268"/></to>
    </wire>
    <wire loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Spi" scoped="" ref="0x2b67a70a4150"/></from>
      <to><interface-ref name="SpiBus" scoped="" ref="0x2b67a70e5100"/></to>
    </wire>
    <wire loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SpiBus" scoped="" ref="0x2b67a70e5100"/></from>
      <to><interface-ref name="SPI" scoped="" ref="0x2b67a7103020"/></to>
    </wire>
    <wire loc="102:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x2b67a70a17c8"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x2b67a6b11a80"/></to>
    </wire>
    <wire loc="255:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <from><interface-ref name="zeroTask" scoped="" ref="0x2b67a70c8ca0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6a351c8"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="Mcu" scoped="" ref="0x2b67a70fcaf8"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x2b67a6b11a80"/></to>
    </wire>
    <wire loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SS" scoped="" ref="0x2b67a7100508"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x2b67a6b52658"/></to>
    </wire>
    <wire loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x2b67a70ff648"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0x2b67a6b517e0"/></to>
    </wire>
    <wire loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MOSI" scoped="" ref="0x2b67a70fe7d0"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0x2b67a6b5e968"/></to>
    </wire>
    <wire loc="89:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MISO" scoped="" ref="0x2b67a70fd958"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0x2b67a6b5daf0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x2b67a718c020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x2b67a7521af8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b67a7520b08"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b67a718b020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Queue" scoped="" ref="0x2b67a751f2b8"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x2b67a7523020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="grantedTask" scoped="" ref="0x2b67a751fd68"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6a351c8"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <documentation loc="45:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
        <short>&#10; Initialisation component for mica-family platforms.</short>
        <long>&#10; Initialisation component for mica-family platforms. See TEP107. Each &#10; mica-family member must also provide a MotePlatformC with initialisation&#10; specific to that member.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
        <short>&#10; Internal platform boot code.</short>
        <long>&#10; Internal platform boot code.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc" safe="">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:59">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:58">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:57">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:56">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:53">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc" safe="">
      <documentation loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc" safe="">
      <documentation loc="49:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.11 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BlinkC" loc="16:BlinkC.nc" safe="">
      <module/>
    </component>
    <component qname="GLCDC" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDC.nc">
      <configuration/>
    </component>
    <component qname="GLCDP" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDP.nc">
      <module/>
    </component>
    <component qname="TouchScreenC" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <configuration/>
    </component>
    <component qname="TouchScreenP" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <module/>
    </component>
    <component qname="TouchScreenC.AdcReadClientC" loc="21(TouchScreenC.AdcReadClientC):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcP" loc="16:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
        <short>&#10; Support component for AdcReadClientC and AdcReadNowClientC.</short>
        <long>&#10; Support component for AdcReadClientC and AdcReadNowClientC.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcC" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <documentation loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
        <short>&#10; HAL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HAL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcP" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc" safe="">
      <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
        <short>&#10; Internal component of the Atmega128 A/D HAL.</short>
        <long>&#10; Internal component of the Atmega128 A/D HAL.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Phil Buonadonna&#10; @author Hu Siquan &#60;husq@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128AdcC" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128AdcP" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc" safe="">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter" loc="89(Atm128AdcC.AdcArbiter):/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:atm128adc.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Queue" loc="42(Atm128AdcC.AdcArbiter.Queue):/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Arbiter" loc="52(Atm128AdcC.AdcArbiter.Arbiter):/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.PM" loc="67(Atm128AdcC.PM):/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.PM.PowerManager" loc="58(Atm128AdcC.PM.PowerManager):/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AdcP" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc" safe="">
      <documentation loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
        <short>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.</short>
        <long>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcP.ArbitrateRead" loc="23(WireAdcP.ArbitrateRead):/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LCD128x64C" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64C.nc">
      <configuration/>
    </component>
    <component qname="LCD128x64P" loc="23:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <module/>
    </component>
    <component qname="EthernetC" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetC.nc">
      <configuration/>
    </component>
    <component qname="EthernetP" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetP.nc">
      <module/>
    </component>
    <component qname="Atm128SpiC" loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <documentation loc="66:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
        <short>&#10; The HAL of the SPI bus on the atm128.</short>
        <long>&#10; The HAL of the SPI bus on the atm128.&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiC.nc,v 1.7 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10; @author Joe Polastre&#10; @date   September 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128SpiP" loc="89:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc" safe="">
      <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
        <short>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.</short>
        <long>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.  This module assumes the bus has been reserved and&#10; checks that the bus owner is in fact the person using the bus.&#10; SpiPacket provides an asynchronous send interface where the&#10; transmit data length is equal to the receive data length, while&#10; SpiByte provides an interface for sending a single byte&#10; synchronously. SpiByte allows a component to send a few bytes&#10; in a simple fashion: if more than a handful need to be sent,&#10; SpiPacket should be used.&#10;&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiP.nc,v 1.12 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128SpiC" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
        <short>&#10; Configuration encapsulating the basic SPI HPL for the atm128.</short>
        <long>&#10; Configuration encapsulating the basic SPI HPL for the atm128.&#10;&#10; &#60;pre>&#10; $Id: HplAtm128SpiC.nc,v 1.5 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128SpiP" loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc" safe="">
      <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
        <short>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.</short>
        <long>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter" loc="83(Atm128SpiC.Arbiter):/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:Atm128SpiC.Resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Queue" loc="42(Atm128SpiC.Arbiter.Queue):/homes/hglanzer/GIT/tinyos/tos/system/FcfsResourceQueueC.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/system/FcfsResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Arbiter" loc="49(Atm128SpiC.Arbiter.Arbiter):/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
      <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2b67a6b8cba0" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2b67a6b96020" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2b67a6b96368" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2b67a6b9a610" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2b67a6b9a978" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2b67a6b9ace0" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2b67a6b97060" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2b67a6c2e020" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2b67a6c2e388" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2b67a6c2e6f0" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2b67a6c2ea20" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadClientC" loc="21:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc" abstract="">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinArbiterC" loc="89:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc" abstract="">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x2b67a6e57020" loc="89:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
          <component-ref qname="RoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x2b67a6e649f8" loc="42:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x2b67a6e905c0" loc="52:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ArbitratedReadC" loc="23:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc" abstract="" safe="">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0x2b67a6f279d0" loc="23:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0x2b67a6f279d0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleFcfsArbiterC" loc="83:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc" abstract="">
      <documentation loc="62:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x2b67a7148578" loc="83:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
          <component-ref qname="SimpleFcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:/homes/hglanzer/GIT/tinyos/tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/system/FcfsResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="size" ref="0x2b67a7143df0" loc="42:/homes/hglanzer/GIT/tinyos/tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x2b67a6b29620" loc="58:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2b67a6b29620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6b29970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2b67a6b2a220" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b67a6b2a220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b67a6b2a570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2b67a6b27380" loc="52:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2b67a6b27380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6b276d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b67a6b2c620" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b67a6b2c620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6b2c970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2b67a6b2f618" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b67a6b2f618"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b67a6b2f968"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b67a6b2faf0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b67a6b2fc78"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b67a6b2fe00"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b67a6b27020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x2b67a6b3bca0" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x2b67a6b3bca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6b3a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b67a6b3b600" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b67a6b3b600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6b3b950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x2b67a6b3a398" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x2b67a6b3a398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6b3a6e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2b67a6b41360" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2b67a6b41360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6b416b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2b67a6b34b98" loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b67a6b34b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6b41020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2b67a6b3db08" loc="19:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2b67a6b3db08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6b3de58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x2b67a6b458d8" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x2b67a6b458d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b45c28"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b45db0"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b3d020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b3d1a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b3d330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b3d4b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b3d640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b3d7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2b67a6b3e698" loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b67a6b3e698"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6b3e9e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x2b67a6b86af0" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x2b67a6b86af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b855e8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b85770"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b858f8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b85a80"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b85c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b85d90"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b84020"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b841a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x2b67a6b68658" loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x2b67a6b68658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b689a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b68b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b68cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b68e40"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b67020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b671a8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b67330"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b674b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x2b67a6b79658" loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x2b67a6b79658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b799a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b79b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b79cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b79e40"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b78020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b781a8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b78330"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b784b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x2b67a6b7e348" loc="94:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x2b67a6b7e348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b7e698"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b7e820"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b7e9a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b7eb30"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b7ecb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b7ee40"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b7d020"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b7d1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x2b67a6b54348" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x2b67a6b54348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b54698"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b54820"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b549a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b54b30"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b54cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b54e40"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b53020"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b531a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x2b67a6b80020" loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x2b67a6b80020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b80370"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b804f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b80680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b80808"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b80990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b80b18"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b80ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b80e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x2b67a6b52658" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x2b67a6b52658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b529a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b52b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b52cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b52e40"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b51020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b511a8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b51330"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b514b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x2b67a6b637e0" loc="66:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x2b67a6b637e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b63b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b63cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b63e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b62020"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b621a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b62330"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b624b8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b62640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x2b67a6b73af0" loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x2b67a6b73af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b73e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b72020"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b721a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b72330"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b724b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b72640"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b727c8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b72950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x2b67a6b76af0" loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x2b67a6b76af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b76e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b75020"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b751a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b75330"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b754b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b75640"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b757c8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b75950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x2b67a6b4caf0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x2b67a6b4caf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b4ce40"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b4b020"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b4b1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b4b330"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b4b4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b4b640"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b4b7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b4b950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x2b67a6b5daf0" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x2b67a6b5daf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b5de40"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b5c020"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b5c1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b5c330"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b5c4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b5c640"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b5c7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b5c950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x2b67a6b60c78" loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x2b67a6b60c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b5f020"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b5f1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b5f330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b5f4b8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b5f640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b5f7c8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b5f950"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b5fad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x2b67a6b6f020" loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x2b67a6b6f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b6f370"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b6f4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b6f680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b6f808"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b6f990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b6fb18"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b6fca0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b6fe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x2b67a6b7b7e0" loc="97:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x2b67a6b7b7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b7bb30"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b7bcb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b7be40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b87020"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b871a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b87330"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b874b8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b87640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x2b67a6b827e0" loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x2b67a6b827e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b82b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b82cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b82e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b8f020"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b8f1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b8f330"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b8f4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b8f640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x2b67a6b6d348" loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x2b67a6b6d348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b6d698"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b6d820"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b6d9a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b6db30"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b6dcb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b6de40"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b7a020"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b7a1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x2b67a6b56020" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x2b67a6b56020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b56370"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b564f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b56680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b56808"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b56990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b56b18"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b56ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b56e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x2b67a6b591a0" loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x2b67a6b591a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b594f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b59678"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b59800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b59988"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b59b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b59c98"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b59e20"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b58020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x2b67a6b844d0" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x2b67a6b844d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b84820"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b849a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b84b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b84cb8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b84e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b83020"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b831a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b83330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x2b67a6b654d0" loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x2b67a6b654d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b65820"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b659a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b65b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b65cb8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b65e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b64020"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b641a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b64330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x2b67a6b677e0" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x2b67a6b677e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b67b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b67cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b67e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b66020"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b661a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b66330"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b664b8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b66640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x2b67a6b787e0" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x2b67a6b787e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b78b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b78cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b78e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b77020"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b771a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b77330"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b774b8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b77640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x2b67a6b7d4d0" loc="95:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x2b67a6b7d4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b7d820"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b7d9a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b7db30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b7dcb8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b7de40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b7c020"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b7c1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b7c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x2b67a6b534d0" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x2b67a6b534d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b53820"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b539a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b53b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b53cb8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b53e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b52020"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b521a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b52330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x2b67a6b517e0" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x2b67a6b517e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b51b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b51cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b51e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b5e020"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b5e1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b5e330"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b5e4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b5e640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x2b67a6b62968" loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x2b67a6b62968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b62cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b62e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b61020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b611a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b61330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b614b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b61640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b617c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x2b67a6b72c78" loc="78:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x2b67a6b72c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b71020"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b711a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b71330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b714b8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b71640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b717c8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b71950"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b71ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x2b67a6b75c78" loc="89:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x2b67a6b75c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b74020"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b741a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b74330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b744b8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b74640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b747c8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b74950"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b74ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x2b67a6b4bc78" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x2b67a6b4bc78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b4a020"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b4a1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b4a330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b4a4b8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b4a640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b4a7c8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b4a950"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b4aad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x2b67a6b5cc78" loc="59:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x2b67a6b5cc78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b5b0f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b5b278"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b5b400"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b5b588"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b5b710"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b5b898"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b5ba20"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b5bba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x2b67a6b5fe00" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x2b67a6b5fe00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b6c1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b6c330"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b6c4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b6c640"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b6c7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b6c950"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b6cad8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b6cc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x2b67a6b87968" loc="98:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x2b67a6b87968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b87cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b87e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b86020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b861a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b86330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b864b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b86640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b867c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x2b67a6b691a0" loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x2b67a6b691a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b696f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b69878"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b69a00"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b69b88"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b69d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b68020"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b681a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b68330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x2b67a6b7a4d0" loc="84:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x2b67a6b7a4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b7a820"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b7a9a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b7ab30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b7acb8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b7ae40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b79020"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b791a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b79330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x2b67a6b7f1a0" loc="93:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x2b67a6b7f1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b7f4f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b7f678"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b7f800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b7f988"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b7fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b7fc98"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b7fe20"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b7e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x2b67a6b8f968" loc="104:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x2b67a6b8f968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b8fcb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b8fe40"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b8e020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b8e1a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b8e330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b8e4b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b8e640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b8e7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x2b67a6b551a0" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x2b67a6b551a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b554f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b55678"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b55800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b55988"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b55b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b55c98"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b55e20"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b54020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x2b67a6b58348" loc="62:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x2b67a6b58348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b58698"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b58820"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b589a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b58b30"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b58cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b58e40"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b65020"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b651a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x2b67a6b74e00" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x2b67a6b74e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b811a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b81330"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b814b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b81640"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b817c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b81950"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b81ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b81c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x2b67a6b64658" loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x2b67a6b64658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b649a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b64b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b64cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b64e40"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b63020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b631a8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b63330"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b634b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x2b67a6b66968" loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x2b67a6b66968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b66cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b66e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b73020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b731a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b73330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b734b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b73640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b737c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x2b67a6b77968" loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x2b67a6b77968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b77cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b77e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b76020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b761a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b76330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b764b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b76640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b767c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x2b67a6b7c658" loc="96:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x2b67a6b7c658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b7c9a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b7cb30"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b7ccb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b7ce40"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b7b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b7b1a8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b7b330"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b7b4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x2b67a6b3f870" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x2b67a6b3f870"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b3fbc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b3fd48"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b4c020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b4c1a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b4c330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b4c4b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b4c640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b4c7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x2b67a6b5e968" loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x2b67a6b5e968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b5ecb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b5ee40"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b5d020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b5d1a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b5d330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b5d4b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b5d640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b5d7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x2b67a6b61af0" loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x2b67a6b61af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b61e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b60020"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b601a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b60330"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b604b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b60640"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b607c8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b60950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x2b67a6b71e00" loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x2b67a6b71e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b701a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b70330"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b704b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b70640"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b707c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b70950"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b70ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b70c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x2b67a6b83658" loc="102:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x2b67a6b83658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b839a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b83b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b83cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b83e40"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b82020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b821a8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b82330"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b824b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x2b67a6b6e1a0" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x2b67a6b6e1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b6e4f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b6e678"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b6e800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b6e988"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b6eb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b6ec98"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b6ee20"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b6d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x2b67a6b6a020" loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x2b67a6b6a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b6a370"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b6a4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b6a680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b6a808"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b6a990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b6ab18"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b6aca0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b6ae28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x2b67a6b4ae00" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x2b67a6b4ae00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b571a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b57330"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b574b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b57640"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b577c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b57950"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b57ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b57c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x2b67a6b5a020" loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x2b67a6b5a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6b5a370"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6b5a4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6b5a680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6b5a808"/>
        <function-ref name="get" scoped="" ref="0x2b67a6b5a990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6b5ab18"/>
        <function-ref name="set" scoped="" ref="0x2b67a6b5aca0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6b5ae28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b67a6bd1120" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b67a6bd1120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bd1470"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bd15f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bd1780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bd1908"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bd1a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bd1c18"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bd1da0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bd0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b67a6bde5b8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b67a6bde5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bde908"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bdea90"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bdec18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bdeda0"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bdd020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bdd1a8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bdd330"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bdd4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b67a6bd4dc0" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b67a6bd4dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bd3170"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bd32f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bd3480"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bd3608"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bd3790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bd3918"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bd3aa0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bd3c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b67a6bd02a8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b67a6bd02a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bd05f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bd0780"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bd0908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bd0a90"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bd0c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bd0da0"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bcf020"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bcf1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b67a6bdd740" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b67a6bdd740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bdda90"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bddc18"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bddda0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bdc020"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bdc1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bdc330"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bdc4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bdc640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b67a6bd2020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b67a6bd2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bd2370"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bd24f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bd2680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bd2808"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bd2990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bd2b18"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bd2ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bd2e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b67a6bcf430" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b67a6bcf430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bcf780"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bcf908"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bcfa90"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bcfc18"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bcfda0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bde020"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bde1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bde330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b67a6bdc8c8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b67a6bdc8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bdcc18"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bdcda0"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bdb020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bdb1a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bdb330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bdb4b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bdb640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bdb7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a71d83e0" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a71d83e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a71d8730"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a71d88b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a71d8a40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a71d8bc8"/>
        <function-ref name="get" scoped="" ref="0x2b67a71d8d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a71d6020"/>
        <function-ref name="set" scoped="" ref="0x2b67a71d61a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a71d6330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a71d4480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a71d4480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a71d47d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a71d4958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a71d4ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a71d4c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a71d4df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a71d3020"/>
        <function-ref name="set" scoped="" ref="0x2b67a71d31a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a71d3330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a71d1480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a71d1480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a71d17d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a71d1958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a71d1ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a71d1c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a71d1df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a71d0020"/>
        <function-ref name="set" scoped="" ref="0x2b67a71d01a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a71d0330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a71f6480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a71f6480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a71f67d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a71f6958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a71f6ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a71f6c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a71f6df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a71f5020"/>
        <function-ref name="set" scoped="" ref="0x2b67a71f51a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a71f5330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a71f3480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a71f3480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a71f37d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a71f3958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a71f3ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a71f3c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a71f3df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a71f2020"/>
        <function-ref name="set" scoped="" ref="0x2b67a71f21a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a71f2330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a71f0480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a71f0480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a71f07d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a71f0958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a71f0ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a71f0c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a71f0df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a71ef020"/>
        <function-ref name="set" scoped="" ref="0x2b67a71ef1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a71ef330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a71ed480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a71ed480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a71ed7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a71ed958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a71edae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a71edc68"/>
        <function-ref name="get" scoped="" ref="0x2b67a71eddf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a71ec020"/>
        <function-ref name="set" scoped="" ref="0x2b67a71ec1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a71ec330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a71ea480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a71ea480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a71ea7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a71ea958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a71eaae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a71eac68"/>
        <function-ref name="get" scoped="" ref="0x2b67a71eadf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a71e9020"/>
        <function-ref name="set" scoped="" ref="0x2b67a71e91a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a71e9330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b67a6be3bd8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b67a6be3bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6be2020"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6be21a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6be2330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6be24b8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6be2640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6be27c8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6be2950"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6be2ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b67a6bdf020" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b67a6bdf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bdf370"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bdf4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bdf680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bdf808"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bdf990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bdfb18"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bdfca0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bdfe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b67a6be5930" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b67a6be5930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6be5c80"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6be5e08"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6be4020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6be41a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6be4330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6be44b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6be4640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6be47c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b67a6be2d60" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b67a6be2d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6be10d8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6be1260"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6be13e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6be1570"/>
        <function-ref name="get" scoped="" ref="0x2b67a6be16f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6be1880"/>
        <function-ref name="set" scoped="" ref="0x2b67a6be1a08"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6be1b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b67a6bee120" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b67a6bee120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bee470"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bee5f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bee780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bee908"/>
        <function-ref name="get" scoped="" ref="0x2b67a6beea90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6beec18"/>
        <function-ref name="set" scoped="" ref="0x2b67a6beeda0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bed020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b67a6be4a50" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b67a6be4a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6be4da0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6be3020"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6be31a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6be3330"/>
        <function-ref name="get" scoped="" ref="0x2b67a6be34b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6be3640"/>
        <function-ref name="set" scoped="" ref="0x2b67a6be37c8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6be3950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b67a6be1e18" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b67a6be1e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6be01a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6be0330"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6be04b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6be0640"/>
        <function-ref name="get" scoped="" ref="0x2b67a6be07c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6be0950"/>
        <function-ref name="set" scoped="" ref="0x2b67a6be0ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6be0c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b67a6bed2a8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b67a6bed2a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bed5f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bed780"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bed908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6beda90"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bedc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bedda0"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bec020"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bec1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a723c3e0" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a723c3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a723c730"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a723c8b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a723ca40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a723cbc8"/>
        <function-ref name="get" scoped="" ref="0x2b67a723cd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a723b020"/>
        <function-ref name="set" scoped="" ref="0x2b67a723b1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a723b330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a7239480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a7239480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a72397d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7239958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7239ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7239c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a7239df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7237020"/>
        <function-ref name="set" scoped="" ref="0x2b67a72371a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7237330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a7235480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a7235480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a72357d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7235958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7235ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7235c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a7235df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7234020"/>
        <function-ref name="set" scoped="" ref="0x2b67a72341a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7234330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a725c480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a725c480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a725c7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a725c958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a725cae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a725cc68"/>
        <function-ref name="get" scoped="" ref="0x2b67a725cdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a725b020"/>
        <function-ref name="set" scoped="" ref="0x2b67a725b1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a725b330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a7259480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a7259480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a72597d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7259958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7259ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7259c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a7259df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7258020"/>
        <function-ref name="set" scoped="" ref="0x2b67a72581a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7258330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a7256480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a7256480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a72567d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7256958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7256ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7256c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a7256df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7255020"/>
        <function-ref name="set" scoped="" ref="0x2b67a72551a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7255330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a7253480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a7253480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a72537d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7253958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7253ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7253c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a7253df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7252020"/>
        <function-ref name="set" scoped="" ref="0x2b67a72521a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7252330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a7250480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a7250480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a72507d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7250958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7250ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7250c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a7250df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a724f020"/>
        <function-ref name="set" scoped="" ref="0x2b67a724f1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a724f330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b67a6bf4740" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b67a6bf4740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bf4a90"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bf4c18"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bf4da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bf3020"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bf31a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bf3330"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bf34b8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bf3640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b67a6bf1bd8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b67a6bf1bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bef020"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bef1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bef330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bef4b8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bef640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bef7c8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bef950"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6befad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b67a6bf6500" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b67a6bf6500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bf6850"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bf69d8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bf6b60"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bf6ce8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bf6e70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bf5020"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bf51a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bf5330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b67a6bf38c8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b67a6bf38c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bf3c18"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bf3da0"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bf2020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bf21a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bf2330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bf24b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bf2640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bf27c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b67a6befd60" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b67a6befd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bfe0d8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bfe260"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bfe3e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bfe570"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bfe6f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bfe880"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bfea08"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bfeb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b67a6bf55b8" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b67a6bf55b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bf5908"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bf5a90"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bf5c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bf5da0"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bf4020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bf41a8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bf4330"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bf44b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b67a6bf2a50" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b67a6bf2a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bf2da0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bf1020"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bf11a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bf1330"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bf14b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bf1640"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bf17c8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bf1950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b67a6bfee18" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b67a6bfee18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bfd1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bfd330"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bfd4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bfd640"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bfd7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bfd950"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bfdad8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bfdc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a72a83e0" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a72a83e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a72a8730"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a72a88b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a72a8a40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a72a8bc8"/>
        <function-ref name="get" scoped="" ref="0x2b67a72a8d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a72a7020"/>
        <function-ref name="set" scoped="" ref="0x2b67a72a71a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a72a7330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a72a5480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a72a5480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a72a57d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a72a5958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a72a5ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a72a5c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a72a5df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a72a3020"/>
        <function-ref name="set" scoped="" ref="0x2b67a72a31a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a72a3330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a72a1480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a72a1480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a72a17d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a72a1958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a72a1ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a72a1c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a72a1df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a72a0020"/>
        <function-ref name="set" scoped="" ref="0x2b67a72a01a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a72a0330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a729e480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a729e480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a729e7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a729e958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a729eae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a729ec68"/>
        <function-ref name="get" scoped="" ref="0x2b67a729edf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a729d020"/>
        <function-ref name="set" scoped="" ref="0x2b67a729d1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a729d330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a72c7480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a72c7480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a72c77d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a72c7958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a72c7ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a72c7c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a72c7df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a72c6020"/>
        <function-ref name="set" scoped="" ref="0x2b67a72c61a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a72c6330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a72c4480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a72c4480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a72c47d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a72c4958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a72c4ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a72c4c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a72c4df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a72c3020"/>
        <function-ref name="set" scoped="" ref="0x2b67a72c31a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a72c3330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a72c1480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a72c1480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a72c17d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a72c1958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a72c1ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a72c1c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a72c1df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a72c0020"/>
        <function-ref name="set" scoped="" ref="0x2b67a72c01a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a72c0330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a72be480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a72be480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a72be7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a72be958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a72beae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a72bec68"/>
        <function-ref name="get" scoped="" ref="0x2b67a72bedf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a72bd020"/>
        <function-ref name="set" scoped="" ref="0x2b67a72bd1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a72bd330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b67a6c05120" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b67a6c05120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c05470"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c055f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c05780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c05908"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c05a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c05c18"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c05da0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c03020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b67a6c015b8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b67a6c015b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c01908"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c01a90"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c01c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c01da0"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c00020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c001a8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c00330"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c004b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b67a6bf8e40" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b67a6bf8e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bf71c0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bf7348"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6bf74d0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bf7658"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bf77e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bf7968"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bf7af0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bf7c78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b67a6c032a8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b67a6c032a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c035f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c03780"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c03908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c03a90"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c03c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c03da0"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c02020"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c021a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b67a6c00740" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b67a6c00740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c00a90"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c00c18"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c00da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6bff020"/>
        <function-ref name="get" scoped="" ref="0x2b67a6bff1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6bff330"/>
        <function-ref name="set" scoped="" ref="0x2b67a6bff4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6bff640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b67a6c06020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b67a6c06020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c06370"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c064f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c06680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c06808"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c06990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c06b18"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c06ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c06e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b67a6c02430" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b67a6c02430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c02780"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c02908"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c02a90"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c02c18"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c02da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c01020"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c011a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c01330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b67a6bff8c8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b67a6bff8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6bffc18"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6bffda0"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c0e020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c0e1a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c0e330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c0e4b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c0e640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c0e7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a731d3e0" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a731d3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a731d730"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a731d8b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a731da40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a731dbc8"/>
        <function-ref name="get" scoped="" ref="0x2b67a731dd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a731c020"/>
        <function-ref name="set" scoped="" ref="0x2b67a731c1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a731c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a731a480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a731a480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a731a7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a731a958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a731aae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a731ac68"/>
        <function-ref name="get" scoped="" ref="0x2b67a731adf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7319020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73191a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7319330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a7317480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a7317480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73177d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7317958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7317ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7317c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a7317df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7315020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73151a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7315330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a7313480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a7313480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73137d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7313958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7313ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7313c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a7313df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7312020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73121a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7312330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a7310480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a7310480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73107d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7310958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7310ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7310c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a7310df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a730f020"/>
        <function-ref name="set" scoped="" ref="0x2b67a730f1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a730f330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a730d480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a730d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a730d7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a730d958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a730dae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a730dc68"/>
        <function-ref name="get" scoped="" ref="0x2b67a730ddf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a730c020"/>
        <function-ref name="set" scoped="" ref="0x2b67a730c1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a730c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a7337480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a7337480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73377d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7337958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7337ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7337c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a7337df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7336020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73361a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7336330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a7334480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a7334480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73347d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7334958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7334ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7334c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a7334df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7333020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73331a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7333330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b67a6c16bd8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b67a6c16bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c15020"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c151a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c15330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c154b8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c15640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c157c8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c15950"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c15ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b67a6c12020" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b67a6c12020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c12370"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c124f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c12680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c12808"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c12990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c12b18"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c12ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c12e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b67a6c08930" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b67a6c08930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c08c80"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c08e08"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c07020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c071a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c07330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c074b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c07640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c077c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b67a6c15d60" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b67a6c15d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c140d8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c14260"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c143e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c14570"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c146f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c14880"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c14a08"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c14b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b67a6c11120" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b67a6c11120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c11470"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c115f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c11780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c11908"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c11a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c11c18"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c11da0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c10020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b67a6c07a50" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b67a6c07a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c07da0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c16020"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c161a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c16330"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c164b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c16640"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c167c8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c16950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b67a6c14e18" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b67a6c14e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c131a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c13330"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c134b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c13640"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c137c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c13950"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c13ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c13c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b67a6c102a8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b67a6c102a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c105f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c10780"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c10908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c10a90"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c10c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c10da0"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c0f020"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c0f1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a736d3e0" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a736d3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a736d730"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a736d8b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a736da40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a736dbc8"/>
        <function-ref name="get" scoped="" ref="0x2b67a736dd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a736c020"/>
        <function-ref name="set" scoped="" ref="0x2b67a736c1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a736c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a736a480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a736a480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a736a7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a736a958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a736aae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a736ac68"/>
        <function-ref name="get" scoped="" ref="0x2b67a736adf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7369020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73691a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7369330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a7367480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a7367480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73677d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7367958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7367ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7367c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a7367df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7393020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73931a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7393330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a7391480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a7391480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73917d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7391958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7391ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7391c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a7391df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7390020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73901a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7390330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a738e480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a738e480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a738e7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a738e958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a738eae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a738ec68"/>
        <function-ref name="get" scoped="" ref="0x2b67a738edf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a738d020"/>
        <function-ref name="set" scoped="" ref="0x2b67a738d1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a738d330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a738b480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a738b480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a738b7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a738b958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a738bae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a738bc68"/>
        <function-ref name="get" scoped="" ref="0x2b67a738bdf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a738a020"/>
        <function-ref name="set" scoped="" ref="0x2b67a738a1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a738a330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a7388480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a7388480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73887d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7388958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7388ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7388c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a7388df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7387020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73871a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7387330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a7385480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a7385480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73857d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7385958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7385ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7385c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a7385df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7384020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73841a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7384330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b67a6c18430" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b67a6c18430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c18780"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c18908"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c18a90"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c18c18"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c18da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c17020"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c171a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c17330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b67a6c278c8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b67a6c278c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c27c18"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c27da0"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c26020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c261a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c26330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c264b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c26640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c267c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b67a6c1a1e8" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b67a6c1a1e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c1a538"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c1a6c0"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c1a848"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c1a9d0"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c1ab58"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c1ace0"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c1ae68"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c19020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b67a6c175b8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b67a6c175b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c17908"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c17a90"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c17c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c17da0"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c28020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c281a8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c28330"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c284b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b67a6c26a50" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b67a6c26a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c26da0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c25020"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c251a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c25330"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c254b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c25640"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c257c8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c25950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b67a6c192a8" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b67a6c192a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c195f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c19780"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c19908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c19a90"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c19c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c19da0"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c18020"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c181a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b67a6c28740" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b67a6c28740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c28a90"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c28c18"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c28da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c27020"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c271a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c27330"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c274b8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c27640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b67a6c25bd8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b67a6c25bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c23020"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c231a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c23330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c234b8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c23640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c237c8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c23950"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c23ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a73f33e0" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a73f33e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73f3730"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a73f38b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a73f3a40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a73f3bc8"/>
        <function-ref name="get" scoped="" ref="0x2b67a73f3d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a73f2020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73f21a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a73f2330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a73f0480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a73f0480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73f07d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a73f0958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a73f0ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a73f0c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a73f0df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a73ef020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73ef1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a73ef330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a73ed480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a73ed480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73ed7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a73ed958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a73edae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a73edc68"/>
        <function-ref name="get" scoped="" ref="0x2b67a73eddf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a73ec020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73ec1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a73ec330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a73ea480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a73ea480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73ea7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a73ea958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a73eaae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a73eac68"/>
        <function-ref name="get" scoped="" ref="0x2b67a73eadf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a73e8020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73e81a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a73e8330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a73e6480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a73e6480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73e67d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a73e6958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a73e6ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a73e6c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a73e6df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a73e5020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73e51a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a73e5330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a73e3480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a73e3480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73e37d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a73e3958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a73e3ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a73e3c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a73e3df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a73e2020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73e21a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a73e2330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a73e0480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a73e0480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73e07d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a73e0958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a73e0ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a73e0c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a73e0df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a73df020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73df1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a73df330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a73dd480" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a73dd480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a73dd7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a73dd958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a73ddae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a73ddc68"/>
        <function-ref name="get" scoped="" ref="0x2b67a73dddf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a73dc020"/>
        <function-ref name="set" scoped="" ref="0x2b67a73dc1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a73dc330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a6c2fac0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a6c2fac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c2fe10"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c3d020"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c3d1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c3d330"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c3d4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c3d640"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c3d7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c3d950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a6c4cdb8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a6c4cdb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c4b170"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c4b2f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c4b480"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c4b608"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c4b790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c4b918"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c4baa0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c4bc28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a6c463e0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a6c463e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c46730"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c468b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c46a40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c46bc8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c46d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c45020"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c451a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c45330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a6c537e8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a6c537e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c53b38"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c53cc0"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c53e48"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c52020"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c521a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c52330"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c524b8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c52640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a6c4fc38" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a6c4fc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c4e020"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c4e1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c4e330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c4e4b8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c4e640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c4e7c8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c4e950"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c4ead8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a6c5b020" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a6c5b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c5b370"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c5b4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c5b680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c5b808"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c5b990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c5bb18"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c5bca0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c5be28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a6c56480" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a6c56480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c567d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c56958"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c56ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c56c68"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c56df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c67020"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c671a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c67330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a6c647e8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a6c647e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c64b38"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c64cc0"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c64e48"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c63020"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c631a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c63330"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c634b8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c63640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a6c5f970" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a6c5f970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c5fcc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c5fe48"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c70020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c701a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c70330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c704b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c70640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c707c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a6c6cab0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a6c6cab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c6ce00"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c6b020"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c6b1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c6b330"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c6b4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c6b640"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c6b7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c6b950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a6c68c38" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a6c68c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c79020"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c791a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c79330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c794b8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c79640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c797c8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c79950"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c79ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a6c74020" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a6c74020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c74370"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c744f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c74680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c74808"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c74990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c74b18"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c74ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c74e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b67a6c81180" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b67a6c81180"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6c814d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6c81658"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6c817e0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6c81968"/>
        <function-ref name="get" scoped="" ref="0x2b67a6c81af0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6c81c78"/>
        <function-ref name="set" scoped="" ref="0x2b67a6c81e00"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6c80020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b67a6cbc2c0" loc="27:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b67a6cbc2c0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x2b67a6a2d128"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x2b67a6a2d128"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6cbc610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2b67a6cbc8f0" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b67a6cbc8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b67a6cbcc40"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b67a6cbcdc8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b67a6cbb020"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b67a6cbb1a8"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b67a6cbb330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x2b67a6cd9898" loc="60:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2b67a6cd9898"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6cd9be8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2b67a6cda198" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b67a6cda198"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b67a6cda4e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x2b67a6cd91d0" loc="59:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b67a6cd91d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6cd9520"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x2b67a6cda7d0" loc="58:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b67a6cda7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6cdab20"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b67a6cdaca8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b67a6cdae30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2b67a6a351c8" loc="48:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6a351c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b67a6a35518"/>
        <function-ref name="runTask" scoped="" ref="0x2b67a6a356a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2b67a6a32600" loc="47:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b67a6a32600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6a32950"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b67a6a32ad8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b67a6a32c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2b67a6ae82b0" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2b67a6ae82b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b67a6ae8600"/>
        <function-ref name="runTask" scoped="" ref="0x2b67a6ae8788"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x2b67a6af1758" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2b67a6af1758"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2b67a6af1aa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2b67a6ae9448" loc="55:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b67a6ae9448"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6ae9798"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b67a6ae9920"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b67a6ae9aa8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x2b67a6b0e2b0" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2b67a6b0e2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2b67a6b0e600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x2b67a6b08660" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2b67a6b08660"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2b67a6b089b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x2b67a6b11a80" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2b67a6b11a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2b67a6b11dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x2b67a6ce2d60" loc="18:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b67a6ce2d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b67a6ce10d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="testTask" ref="0x2b67a6cff5d8" loc="31:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="testTask" scoped="" ref="0x2b67a6cff5d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b67a6cff928"/>
        <function-ref name="runTask" scoped="" ref="0x2b67a6cffab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GLCD" ref="0x2b67a6ce0020" loc="19:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GLCD" scoped="" ref="0x2b67a6ce0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GLCD"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b67a6ce0370"/>
        <function-ref name="tsPressed" scoped="" ref="0x2b67a6ce04f8"/>
        <function-ref name="initDone" scoped="" ref="0x2b67a6ce0680"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b67a6ce0808"/>
        <function-ref name="isPressed" scoped="" ref="0x2b67a6ce0990"/>
        <function-ref name="calibrated" scoped="" ref="0x2b67a6ce0b18"/>
        <function-ref name="calibrateTouchScreen" scoped="" ref="0x2b67a6ce0ca0"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b67a6ce0e28"/>
        <function-ref name="getXY" scoped="" ref="0x2b67a6cdf020"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b67a6cdf1a8"/>
        <function-ref name="barWritten" scoped="" ref="0x2b67a6cdf330"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b67a6cdf4b8"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b67a6cdf640"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b67a6cdf8c8"/>
        <function-ref name="xyReady" scoped="" ref="0x2b67a6cdfa50"/>
        <function-ref name="writeByte" scoped="" ref="0x2b67a6cdfbd8"/>
        <function-ref name="setPixel" scoped="" ref="0x2b67a6cdfd60"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b67a6cf3020"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b67a6cf31a8"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b67a6cf3330"/>
        <function-ref name="writePixel" scoped="" ref="0x2b67a6cf34b8"/>
        <function-ref name="initLCD" scoped="" ref="0x2b67a6cf3640"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b67a6cf37c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Eth" ref="0x2b67a6cf2020" loc="22:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Eth" scoped="" ref="0x2b67a6cf2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ethernet"/>
      </instance>
      <interface-functions>
        <function-ref name="initDone" scoped="" ref="0x2b67a6cf2370"/>
        <function-ref name="init" scoped="" ref="0x2b67a6cf24f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GLCD" ref="0x2b67a6d0e2d0" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDC.nc">
      <component-ref qname="GLCDC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GLCD" scoped="" ref="0x2b67a6d0e2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GLCD"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b67a6d0e620"/>
        <function-ref name="tsPressed" scoped="" ref="0x2b67a6d0e7a8"/>
        <function-ref name="initDone" scoped="" ref="0x2b67a6d0e930"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b67a6d0eab8"/>
        <function-ref name="isPressed" scoped="" ref="0x2b67a6d0ec40"/>
        <function-ref name="calibrated" scoped="" ref="0x2b67a6d0edc8"/>
        <function-ref name="calibrateTouchScreen" scoped="" ref="0x2b67a6d20020"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b67a6d201a8"/>
        <function-ref name="getXY" scoped="" ref="0x2b67a6d20330"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b67a6d204b8"/>
        <function-ref name="barWritten" scoped="" ref="0x2b67a6d20640"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b67a6d207c8"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b67a6d20950"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b67a6d20bd8"/>
        <function-ref name="xyReady" scoped="" ref="0x2b67a6d20d60"/>
        <function-ref name="writeByte" scoped="" ref="0x2b67a6d1f020"/>
        <function-ref name="setPixel" scoped="" ref="0x2b67a6d1f1a8"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b67a6d1f330"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b67a6d1f4b8"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b67a6d1f640"/>
        <function-ref name="writePixel" scoped="" ref="0x2b67a6d1f7c8"/>
        <function-ref name="initLCD" scoped="" ref="0x2b67a6d1f950"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b67a6d1fad8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LCD128x64" ref="0x2b67a6d42958" loc="8:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDP.nc">
      <component-ref qname="GLCDP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LCD128x64" scoped="" ref="0x2b67a6d42958"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b67a6d42ca8"/>
        <function-ref name="initDone" scoped="" ref="0x2b67a6d42e30"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b67a6d2b020"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b67a6d2b1a8"/>
        <function-ref name="barWritten" scoped="" ref="0x2b67a6d2b330"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b67a6d2b4b8"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b67a6d2b640"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b67a6d2b7c8"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b67a6d2b950"/>
        <function-ref name="writeByte" scoped="" ref="0x2b67a6d2bad8"/>
        <function-ref name="setPixel" scoped="" ref="0x2b67a6d2bc60"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b67a6d2bde8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b67a6d27020"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b67a6d272a8"/>
        <function-ref name="writePixel" scoped="" ref="0x2b67a6d27430"/>
        <function-ref name="initLCD" scoped="" ref="0x2b67a6d275b8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b67a6d27740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GLCD" ref="0x2b67a6d1ad80" loc="5:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDP.nc">
      <component-ref qname="GLCDP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GLCD" scoped="" ref="0x2b67a6d1ad80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GLCD"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b67a6d19170"/>
        <function-ref name="tsPressed" scoped="" ref="0x2b67a6d192f8"/>
        <function-ref name="initDone" scoped="" ref="0x2b67a6d19480"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b67a6d19608"/>
        <function-ref name="isPressed" scoped="" ref="0x2b67a6d19790"/>
        <function-ref name="calibrated" scoped="" ref="0x2b67a6d19918"/>
        <function-ref name="calibrateTouchScreen" scoped="" ref="0x2b67a6d19aa0"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b67a6d19c28"/>
        <function-ref name="getXY" scoped="" ref="0x2b67a6d19db0"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b67a6d18020"/>
        <function-ref name="barWritten" scoped="" ref="0x2b67a6d181a8"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b67a6d18330"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b67a6d184b8"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b67a6d18740"/>
        <function-ref name="xyReady" scoped="" ref="0x2b67a6d188c8"/>
        <function-ref name="writeByte" scoped="" ref="0x2b67a6d18a50"/>
        <function-ref name="setPixel" scoped="" ref="0x2b67a6d18bd8"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b67a6d18d60"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b67a6d17020"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b67a6d171a8"/>
        <function-ref name="writePixel" scoped="" ref="0x2b67a6d17330"/>
        <function-ref name="initLCD" scoped="" ref="0x2b67a6d174b8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b67a6d17640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TouchScreen" ref="0x2b67a6d2c020" loc="7:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDP.nc">
      <component-ref qname="GLCDP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TouchScreen" scoped="" ref="0x2b67a6d2c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TouchScreen"/>
      </instance>
      <interface-functions>
        <function-ref name="tsPressed" scoped="" ref="0x2b67a6d2c370"/>
        <function-ref name="isPressed" scoped="" ref="0x2b67a6d2c4f8"/>
        <function-ref name="getXY" scoped="" ref="0x2b67a6d2c680"/>
        <function-ref name="xyReady" scoped="" ref="0x2b67a6d2c808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TouchScreen" ref="0x2b67a6d1c580" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <component-ref qname="TouchScreenC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TouchScreen" scoped="" ref="0x2b67a6d1c580"/></type-interface>
      <instance>
        <interfacedef-ref qname="TouchScreen"/>
      </instance>
      <interface-functions>
        <function-ref name="tsPressed" scoped="" ref="0x2b67a6d1c8d0"/>
        <function-ref name="isPressed" scoped="" ref="0x2b67a6d1ca58"/>
        <function-ref name="getXY" scoped="" ref="0x2b67a6d1cbe0"/>
        <function-ref name="xyReady" scoped="" ref="0x2b67a6d1cd68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read" ref="0x2b67a6d85dd8" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b67a6d85dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b67a6d879e0"/>
        <function-ref name="readDone" scoped="" ref="0x2b67a6d87e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="driveA" ref="0x2b67a6d864e0" loc="21:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="driveA" scoped="" ref="0x2b67a6d864e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6d86830"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6d869b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6d86b40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6d86cc8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6d86e50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6d99020"/>
        <function-ref name="set" scoped="" ref="0x2b67a6d991a8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6d99330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcConfig" ref="0x2b67a6d92998" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b67a6d92998"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b67a6d92ce8"/>
        <function-ref name="getChannel" scoped="" ref="0x2b67a6d92e70"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b67a6d95020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="checkTS" ref="0x2b67a6d90970" loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="checkTS" scoped="" ref="0x2b67a6d90970"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b67a6d90cc0"/>
        <function-ref name="runTask" scoped="" ref="0x2b67a6d90e48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="adcX" ref="0x2b67a6d98820" loc="23:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="adcX" scoped="" ref="0x2b67a6d98820"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6d98b70"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6d98cf8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6d98e80"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6d97030"/>
        <function-ref name="get" scoped="" ref="0x2b67a6d971b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6d97340"/>
        <function-ref name="set" scoped="" ref="0x2b67a6d974c8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6d97650"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="driveB" ref="0x2b67a6d99698" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="driveB" scoped="" ref="0x2b67a6d99698"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6d999e8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6d99b70"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6d99cf8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6d99e80"/>
        <function-ref name="get" scoped="" ref="0x2b67a6d98030"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6d981b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6d98340"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6d984c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TouchScreen" ref="0x2b67a6d95318" loc="27:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TouchScreen" scoped="" ref="0x2b67a6d95318"/></type-interface>
      <instance>
        <interfacedef-ref qname="TouchScreen"/>
      </instance>
      <interface-functions>
        <function-ref name="tsPressed" scoped="" ref="0x2b67a6d95668"/>
        <function-ref name="isPressed" scoped="" ref="0x2b67a6d957f0"/>
        <function-ref name="getXY" scoped="" ref="0x2b67a6d95978"/>
        <function-ref name="xyReady" scoped="" ref="0x2b67a6d95b00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="adcY" ref="0x2b67a6d979a8" loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="adcY" scoped="" ref="0x2b67a6d979a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a6d97cf8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a6d97e80"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a6d96030"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a6d961b8"/>
        <function-ref name="get" scoped="" ref="0x2b67a6d96340"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a6d964c8"/>
        <function-ref name="set" scoped="" ref="0x2b67a6d96650"/>
        <function-ref name="clr" scoped="" ref="0x2b67a6d967d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b67a6f5d3f0" loc="25:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="TouchScreenC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b67a6f5d3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b67a6f5d740"/>
        <function-ref name="configure" scoped="" ref="0x2b67a6f5d8c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b67a6f41358" loc="22:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="TouchScreenC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b67a6f41358"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b67a6f40020"/>
        <function-ref name="readDone" scoped="" ref="0x2b67a6f40470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2b67a6f40a28" loc="24:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="TouchScreenC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b67a6f40a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b67a6f40d78"/>
        <function-ref name="getChannel" scoped="" ref="0x2b67a6f5d020"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b67a6f5d1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b67a6db4668" loc="18:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b67a6db4668"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b67a6db31e8"/>
        <function-ref name="readDone" scoped="" ref="0x2b67a6db3638"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2b67a6dc92f0" loc="19:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2b67a6dc92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b67a6dc9e70"/>
        <function-ref name="readDone" scoped="" ref="0x2b67a6dc8320"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2b67a6dc5020" loc="22:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b67a6dc5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b67a6dc5370"/>
        <function-ref name="getChannel" scoped="" ref="0x2b67a6dc54f8"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b67a6dc5680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2b67a6dc31c8" loc="23:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b67a6dc31c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b67a6dc3518"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b67a6dc36a0"/>
        <function-ref name="request" scoped="" ref="0x2b67a6dc3828"/>
        <function-ref name="granted" scoped="" ref="0x2b67a6dc39b0"/>
        <function-ref name="isOwner" scoped="" ref="0x2b67a6dc3b38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b67a6dd1890" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b67a6dd1890"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b67a6dd1be0"/>
        <function-ref name="configure" scoped="" ref="0x2b67a6dd1d68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x2b67a6de09b0" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b67a6de09b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b67a6de0d00"/>
        <function-ref name="dataReady" scoped="" ref="0x2b67a6dd1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x2b67a6dced50" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b67a6dced50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b67a6dd20d8"/>
        <function-ref name="cancel" scoped="" ref="0x2b67a6dd2260"/>
        <function-ref name="dataReady" scoped="" ref="0x2b67a6dd23e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b67a6dd6ca8" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b67a6dd6ca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b67a6dd3020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b67a6dd31a8"/>
        <function-ref name="request" scoped="" ref="0x2b67a6dd3330"/>
        <function-ref name="granted" scoped="" ref="0x2b67a6dd34b8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b67a6dd3640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b67a6ddfd48" loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b67a6ddfd48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a6ddc0d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x2b67a6ddbde0" loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b67a6ddbde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b67a6dda170"/>
        <function-ref name="dataReady" scoped="" ref="0x2b67a6dda2f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x2b67a6ddb488" loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b67a6ddb488"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b67a6ddb7d8"/>
        <function-ref name="cancel" scoped="" ref="0x2b67a6ddb960"/>
        <function-ref name="dataReady" scoped="" ref="0x2b67a6ddbae8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Adc" ref="0x2b67a6de3940" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b67a6de3940"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2b67a6de3c90"/>
        <function-ref name="getAdmux" scoped="" ref="0x2b67a6de3e18"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2b67a6dd8020"/>
        <function-ref name="isEnabled" scoped="" ref="0x2b67a6dd81a8"/>
        <function-ref name="enableAdc" scoped="" ref="0x2b67a6dd8330"/>
        <function-ref name="setAdmux" scoped="" ref="0x2b67a6dd84b8"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2b67a6dd8640"/>
        <function-ref name="isComplete" scoped="" ref="0x2b67a6dd87c8"/>
        <function-ref name="cancel" scoped="" ref="0x2b67a6dd8950"/>
        <function-ref name="disableAdc" scoped="" ref="0x2b67a6dd8ad8"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2b67a6dd8c60"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2b67a6dd8de8"/>
        <function-ref name="startConversion" scoped="" ref="0x2b67a6dd7020"/>
        <function-ref name="isStarted" scoped="" ref="0x2b67a6dd72a8"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2b67a6dd7430"/>
        <function-ref name="setContinuous" scoped="" ref="0x2b67a6dd75b8"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2b67a6dd7740"/>
        <function-ref name="getValue" scoped="" ref="0x2b67a6dd78c8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b67a6dd7a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x2b67a6dd9c10" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b67a6dd9c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b67a6ddb020"/>
        <function-ref name="stop" scoped="" ref="0x2b67a6ddb1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x2b67a6dd7d30" loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b67a6dd7d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b67a6df90d8"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b67a6df9260"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b67a6df93e8"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b67a6df9570"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b67a6df96f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x2b67a6e2c020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <component-ref qname="HplAtm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b67a6e2c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2b67a6e2c370"/>
        <function-ref name="getAdmux" scoped="" ref="0x2b67a6e2c4f8"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2b67a6e2c680"/>
        <function-ref name="isEnabled" scoped="" ref="0x2b67a6e2c808"/>
        <function-ref name="enableAdc" scoped="" ref="0x2b67a6e2c990"/>
        <function-ref name="setAdmux" scoped="" ref="0x2b67a6e2cb18"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2b67a6e2cca0"/>
        <function-ref name="isComplete" scoped="" ref="0x2b67a6e2ce28"/>
        <function-ref name="cancel" scoped="" ref="0x2b67a6e2b020"/>
        <function-ref name="disableAdc" scoped="" ref="0x2b67a6e2b1a8"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2b67a6e2b330"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2b67a6e2b4b8"/>
        <function-ref name="startConversion" scoped="" ref="0x2b67a6e2b640"/>
        <function-ref name="isStarted" scoped="" ref="0x2b67a6e2b8c8"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2b67a6e2ba50"/>
        <function-ref name="setContinuous" scoped="" ref="0x2b67a6e2bbd8"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2b67a6e2bd60"/>
        <function-ref name="getValue" scoped="" ref="0x2b67a6e2a020"/>
        <function-ref name="dataReady" scoped="" ref="0x2b67a6e2a1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x2b67a6e261e8" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b67a6e261e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2b67a6e26538"/>
        <function-ref name="getAdmux" scoped="" ref="0x2b67a6e266c0"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2b67a6e26848"/>
        <function-ref name="isEnabled" scoped="" ref="0x2b67a6e269d0"/>
        <function-ref name="enableAdc" scoped="" ref="0x2b67a6e26b58"/>
        <function-ref name="setAdmux" scoped="" ref="0x2b67a6e26ce0"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2b67a6e26e68"/>
        <function-ref name="isComplete" scoped="" ref="0x2b67a6e25020"/>
        <function-ref name="cancel" scoped="" ref="0x2b67a6e251a8"/>
        <function-ref name="disableAdc" scoped="" ref="0x2b67a6e25330"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2b67a6e254b8"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2b67a6e25640"/>
        <function-ref name="startConversion" scoped="" ref="0x2b67a6e257c8"/>
        <function-ref name="isStarted" scoped="" ref="0x2b67a6e25a50"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2b67a6e25bd8"/>
        <function-ref name="setContinuous" scoped="" ref="0x2b67a6e25d60"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2b67a6e24020"/>
        <function-ref name="getValue" scoped="" ref="0x2b67a6e241a8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b67a6e24330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x2b67a6e24640" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2b67a6e24640"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2b67a6e24990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2b67a6ee3b70" loc="92:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2b67a6ee3b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2b67a6ee2020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b67a6ee21a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b67a6ee18a0" loc="96:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b67a6ee18a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b67a6ee1c10"/>
        <function-ref name="configure" scoped="" ref="0x2b67a6ee1d98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x2b67a6ee23f0" loc="93:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b67a6ee23f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b67a6ee2740"/>
        <function-ref name="requested" scoped="" ref="0x2b67a6ee28c8"/>
        <function-ref name="granted" scoped="" ref="0x2b67a6ee2a50"/>
        <function-ref name="isOwner" scoped="" ref="0x2b67a6ee2bd8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b67a6ee2d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b67a6ee5e50" loc="91:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b67a6ee5e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b67a6ee31e8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b67a6ee3370"/>
        <function-ref name="request" scoped="" ref="0x2b67a6ee34f8"/>
        <function-ref name="granted" scoped="" ref="0x2b67a6ee3680"/>
        <function-ref name="isOwner" scoped="" ref="0x2b67a6ee3808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2b67a6ee1020" loc="94:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b67a6ee1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b67a6ee1370"/>
        <function-ref name="userId" scoped="" ref="0x2b67a6ee14f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b67a74de7f0" loc="44:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b67a74de7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a74deb40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x2b67a74dedc8" loc="45:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0x2b67a74dedc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2b67a74dd170"/>
        <function-ref name="isEmpty" scoped="" ref="0x2b67a74dd2f8"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2b67a74dd480"/>
        <function-ref name="dequeue" scoped="" ref="0x2b67a74dd608"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2b67a74dab48" loc="55:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2b67a74dab48"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2b67a74d9020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b67a74d91a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b67a74d88c0" loc="60:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b67a74d88c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b67a74d8c30"/>
        <function-ref name="configure" scoped="" ref="0x2b67a74d8db8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x2b67a74d70a0" loc="61:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x2b67a74d70a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2b67a74d73f0"/>
        <function-ref name="isEmpty" scoped="" ref="0x2b67a74d7578"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2b67a74d7700"/>
        <function-ref name="dequeue" scoped="" ref="0x2b67a74d7888"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x2b67a74d93f0" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b67a74d93f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b67a74d9740"/>
        <function-ref name="requested" scoped="" ref="0x2b67a74d98c8"/>
        <function-ref name="granted" scoped="" ref="0x2b67a74d9a50"/>
        <function-ref name="isOwner" scoped="" ref="0x2b67a74d9bd8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b67a74d9d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x2b67a74d7ad0" loc="62:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x2b67a74d7ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x2b67a74d7e20"/>
        <function-ref name="led0Toggle" scoped="" ref="0x2b67a74d6020"/>
        <function-ref name="led1On" scoped="" ref="0x2b67a74d61a8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x2b67a74d6330"/>
        <function-ref name="led2Toggle" scoped="" ref="0x2b67a74d64b8"/>
        <function-ref name="get" scoped="" ref="0x2b67a74d6640"/>
        <function-ref name="led1Off" scoped="" ref="0x2b67a74d67c8"/>
        <function-ref name="setPort" scoped="" ref="0x2b67a74d6950"/>
        <function-ref name="led0On" scoped="" ref="0x2b67a74d5020"/>
        <function-ref name="set" scoped="" ref="0x2b67a74d6c60"/>
        <function-ref name="led2On" scoped="" ref="0x2b67a74d6ad8"/>
        <function-ref name="led2Off" scoped="" ref="0x2b67a74d6de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b67a74dce20" loc="54:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b67a74dce20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b67a74da1c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b67a74da348"/>
        <function-ref name="request" scoped="" ref="0x2b67a74da4d0"/>
        <function-ref name="granted" scoped="" ref="0x2b67a74da658"/>
        <function-ref name="isOwner" scoped="" ref="0x2b67a74da7e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2b67a74d8020" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b67a74d8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b67a74d8370"/>
        <function-ref name="userId" scoped="" ref="0x2b67a74d84f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x2b67a74d52e8" loc="75:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x2b67a74d52e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b67a74d5638"/>
        <function-ref name="runTask" scoped="" ref="0x2b67a74d57c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x2b67a6eddb98" loc="72:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b67a6eddb98"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x2b67a6f01020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x2b67a6f01268" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b67a6f01268"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b67a6f015b8"/>
        <function-ref name="requested" scoped="" ref="0x2b67a6f01740"/>
        <function-ref name="granted" scoped="" ref="0x2b67a6f018c8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b67a6f01a50"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b67a6f01bd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x2b67a6edd478" loc="70:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b67a6edd478"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b67a6edd7c8"/>
        <function-ref name="stop" scoped="" ref="0x2b67a6edd950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2b67a6f01e20" loc="74:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b67a6f01e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b67a6eff1a8"/>
        <function-ref name="userId" scoped="" ref="0x2b67a6eff330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x2b67a750cb90" loc="62:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b67a750cb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x2b67a750b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x2b67a750b268" loc="63:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b67a750b268"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b67a750b5b8"/>
        <function-ref name="requested" scoped="" ref="0x2b67a750b740"/>
        <function-ref name="granted" scoped="" ref="0x2b67a750b8c8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b67a750ba50"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b67a750bbd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x2b67a750c470" loc="60:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b67a750c470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b67a750c7c0"/>
        <function-ref name="stop" scoped="" ref="0x2b67a750c948"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2b67a750be20" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b67a750be20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b67a75091a8"/>
        <function-ref name="userId" scoped="" ref="0x2b67a7509330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b67a6ef8c68" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b67a6ef8c68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b67a6ef77e8"/>
        <function-ref name="readDone" scoped="" ref="0x2b67a6ef7c38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2b67a6f12880" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2b67a6f12880"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b67a6f10490"/>
        <function-ref name="readDone" scoped="" ref="0x2b67a6f10918"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2b67a6f0fe78" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b67a6f0fe78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b67a6f0e1f8"/>
        <function-ref name="getChannel" scoped="" ref="0x2b67a6f0e380"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b67a6f0e508"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0x2b67a6f0f020" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b67a6f0f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b67a6f0f370"/>
        <function-ref name="cancel" scoped="" ref="0x2b67a6f0f4f8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b67a6f0f680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="acquiredData" ref="0x2b67a6f1bbf8" loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="acquiredData" scoped="" ref="0x2b67a6f1bbf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b67a6f1a020"/>
        <function-ref name="runTask" scoped="" ref="0x2b67a6f1a1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b67a6f26a28" loc="24:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b67a6f26a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b67a6f25620"/>
        <function-ref name="readDone" scoped="" ref="0x2b67a6f25a90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x2b67a6f4a348" loc="26:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x2b67a6f4a348"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b67a6f49020"/>
        <function-ref name="readDone" scoped="" ref="0x2b67a6f49490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2b67a6f49b28" loc="27:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b67a6f49b28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b67a6f47020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b67a6f471a8"/>
        <function-ref name="request" scoped="" ref="0x2b67a6f47330"/>
        <function-ref name="granted" scoped="" ref="0x2b67a6f474b8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b67a6f47640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LCD128x64" ref="0x2b67a6f55020" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64C.nc">
      <component-ref qname="LCD128x64C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LCD128x64" scoped="" ref="0x2b67a6f55020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b67a6f55370"/>
        <function-ref name="initDone" scoped="" ref="0x2b67a6f554f8"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b67a6f55680"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b67a6f55808"/>
        <function-ref name="barWritten" scoped="" ref="0x2b67a6f55990"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b67a6f55b18"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b67a6f55ca0"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b67a6f55e28"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b67a6f54020"/>
        <function-ref name="writeByte" scoped="" ref="0x2b67a6f541a8"/>
        <function-ref name="setPixel" scoped="" ref="0x2b67a6f54330"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b67a6f544b8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b67a6f54640"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b67a6f548c8"/>
        <function-ref name="writePixel" scoped="" ref="0x2b67a6f54a50"/>
        <function-ref name="initLCD" scoped="" ref="0x2b67a6f54bd8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b67a6f54d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeRectangle" ref="0x2b67a6fc8bd0" loc="170:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeRectangle" scoped="" ref="0x2b67a6fc8bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b67a6fc7020"/>
        <function-ref name="runTask" scoped="" ref="0x2b67a6fc71a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LCD128x64" ref="0x2b67a6f80c98" loc="25:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LCD128x64" scoped="" ref="0x2b67a6f80c98"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b67a6f7f020"/>
        <function-ref name="initDone" scoped="" ref="0x2b67a6f7f1a8"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b67a6f7f330"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b67a6f7f4b8"/>
        <function-ref name="barWritten" scoped="" ref="0x2b67a6f7f640"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b67a6f7f7c8"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b67a6f7f950"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b67a6f7fad8"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b67a6f7fc60"/>
        <function-ref name="writeByte" scoped="" ref="0x2b67a6f7fde8"/>
        <function-ref name="setPixel" scoped="" ref="0x2b67a6f7e020"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b67a6f7e1a8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b67a6f7e330"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b67a6f7e5b8"/>
        <function-ref name="writePixel" scoped="" ref="0x2b67a6f7e740"/>
        <function-ref name="initLCD" scoped="" ref="0x2b67a6f7e8c8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b67a6f7ea50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeString" ref="0x2b67a6fd0368" loc="219:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeString" scoped="" ref="0x2b67a6fd0368"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b67a6fd06b8"/>
        <function-ref name="runTask" scoped="" ref="0x2b67a6fd0840"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeCircle" ref="0x2b67a6fc09b8" loc="186:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeCircle" scoped="" ref="0x2b67a6fc09b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b67a6fc0d08"/>
        <function-ref name="runTask" scoped="" ref="0x2b67a6fbf020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeLine" ref="0x2b67a6fdcca0" loc="278:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeLine" scoped="" ref="0x2b67a6fdcca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b67a6fda020"/>
        <function-ref name="runTask" scoped="" ref="0x2b67a6fda1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="wait4Controller" ref="0x2b67a6f97368" loc="37:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="wait4Controller" scoped="" ref="0x2b67a6f97368"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b67a6f976b8"/>
        <function-ref name="runTask" scoped="" ref="0x2b67a6f97840"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeBar" ref="0x2b67a7002590" loc="356:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeBar" scoped="" ref="0x2b67a7002590"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b67a70028e0"/>
        <function-ref name="runTask" scoped="" ref="0x2b67a7002a68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="clearScreenNB" ref="0x2b67a6fe3420" loc="247:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="clearScreenNB" scoped="" ref="0x2b67a6fe3420"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b67a6fe3770"/>
        <function-ref name="runTask" scoped="" ref="0x2b67a6fe38f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ethernet" ref="0x2b67a702e020" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetC.nc">
      <component-ref qname="EthernetC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ethernet" scoped="" ref="0x2b67a702e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ethernet"/>
      </instance>
      <interface-functions>
        <function-ref name="initDone" scoped="" ref="0x2b67a702e370"/>
        <function-ref name="init" scoped="" ref="0x2b67a702e4f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ssMMC" ref="0x2b67a704aa90" loc="6:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetP.nc">
      <component-ref qname="EthernetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ssMMC" scoped="" ref="0x2b67a704aa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a704ade0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7049020"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a70491a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7049330"/>
        <function-ref name="get" scoped="" ref="0x2b67a70494b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7049640"/>
        <function-ref name="set" scoped="" ref="0x2b67a70497c8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7049950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiByte" ref="0x2b67a70411b8" loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetP.nc">
      <component-ref qname="EthernetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x2b67a70411b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x2b67a7041508"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ssETH" ref="0x2b67a7049cb0" loc="7:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetP.nc">
      <component-ref qname="EthernetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ssETH" scoped="" ref="0x2b67a7049cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a70480a0"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7048228"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a70483b0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7048538"/>
        <function-ref name="get" scoped="" ref="0x2b67a70486c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7048848"/>
        <function-ref name="set" scoped="" ref="0x2b67a70489d0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7048b58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="intETH" ref="0x2b67a70461c0" loc="9:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetP.nc">
      <component-ref qname="EthernetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="intETH" scoped="" ref="0x2b67a70461c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a7046510"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a7046698"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7046820"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a70469a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a7046b30"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7046cb8"/>
        <function-ref name="set" scoped="" ref="0x2b67a7046e40"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7045020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="rstETH" ref="0x2b67a7047020" loc="8:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetP.nc">
      <component-ref qname="EthernetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="rstETH" scoped="" ref="0x2b67a7047020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a7047370"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a70474f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7047680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7047808"/>
        <function-ref name="get" scoped="" ref="0x2b67a7047990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a7047b18"/>
        <function-ref name="set" scoped="" ref="0x2b67a7047ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b67a7047e28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2b67a70417e8" loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetP.nc">
      <component-ref qname="EthernetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b67a70417e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b67a7041b38"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b67a7041cc0"/>
        <function-ref name="request" scoped="" ref="0x2b67a7041e48"/>
        <function-ref name="granted" scoped="" ref="0x2b67a7044020"/>
        <function-ref name="isOwner" scoped="" ref="0x2b67a70441a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ethernet" ref="0x2b67a704a258" loc="5:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/EthernetP.nc">
      <component-ref qname="EthernetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ethernet" scoped="" ref="0x2b67a704a258"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ethernet"/>
      </instance>
      <interface-functions>
        <function-ref name="initDone" scoped="" ref="0x2b67a704a5a8"/>
        <function-ref name="init" scoped="" ref="0x2b67a704a730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x2b67a7069020" loc="84:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x2b67a7069020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b67a7069370"/>
        <function-ref name="sendDone" scoped="" ref="0x2b67a70694f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x2b67a706b2f0" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x2b67a706b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x2b67a706b640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b67a702cc98" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b67a702cc98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a706b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x2b67a70878d0" loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x2b67a70878d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x2b67a7087c20"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x2b67a7087da8"/>
        <function-ref name="splitRead" scoped="" ref="0x2b67a706a020"/>
        <function-ref name="write" scoped="" ref="0x2b67a706a1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b67a7069cc8" loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b67a7069cc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b67a70800a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b67a7080228"/>
        <function-ref name="request" scoped="" ref="0x2b67a70803b0"/>
        <function-ref name="granted" scoped="" ref="0x2b67a7080538"/>
        <function-ref name="isOwner" scoped="" ref="0x2b67a70806c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="zeroTask" ref="0x2b67a70c8ca0" loc="255:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="zeroTask" scoped="" ref="0x2b67a70c8ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b67a70c7020"/>
        <function-ref name="runTask" scoped="" ref="0x2b67a70c71a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x2b67a707b120" loc="94:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x2b67a707b120"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b67a707b470"/>
        <function-ref name="sendDone" scoped="" ref="0x2b67a707b5f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceArbiter" ref="0x2b67a70a33c8" loc="99:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceArbiter" scoped="" ref="0x2b67a70a33c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b67a70a3718"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b67a70a38a0"/>
        <function-ref name="request" scoped="" ref="0x2b67a70a3a28"/>
        <function-ref name="granted" scoped="" ref="0x2b67a70a3bb0"/>
        <function-ref name="isOwner" scoped="" ref="0x2b67a70a3d38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x2b67a707c020" loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x2b67a707c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x2b67a707c370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b67a707d8b8" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b67a707d8b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a707dc08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Spi" ref="0x2b67a70a4150" loc="98:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Spi" scoped="" ref="0x2b67a70a4150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x2b67a70a44a0"/>
        <function-ref name="sleep" scoped="" ref="0x2b67a7078950"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x2b67a70a47b0"/>
        <function-ref name="dataReady" scoped="" ref="0x2b67a7078ad8"/>
        <function-ref name="initMaster" scoped="" ref="0x2b67a70a4ac0"/>
        <function-ref name="setMasterBit" scoped="" ref="0x2b67a70a4c48"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x2b67a70a4dd0"/>
        <function-ref name="read" scoped="" ref="0x2b67a7079020"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x2b67a70791a8"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x2b67a7079330"/>
        <function-ref name="setClock" scoped="" ref="0x2b67a70794b8"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x2b67a7079640"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x2b67a70797c8"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x2b67a7079a50"/>
        <function-ref name="setDataOrder" scoped="" ref="0x2b67a7079bd8"/>
        <function-ref name="write" scoped="" ref="0x2b67a7079d60"/>
        <function-ref name="enableSpi" scoped="" ref="0x2b67a7078020"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x2b67a70781a8"/>
        <function-ref name="getClockPhase" scoped="" ref="0x2b67a7078330"/>
        <function-ref name="getClock" scoped="" ref="0x2b67a70784b8"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x2b67a7078640"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x2b67a70a4628"/>
        <function-ref name="setClockPhase" scoped="" ref="0x2b67a70a4938"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x2b67a70787c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x2b67a707c628" loc="93:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x2b67a707c628"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x2b67a707c978"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x2b67a707cb00"/>
        <function-ref name="splitRead" scoped="" ref="0x2b67a707cc88"/>
        <function-ref name="write" scoped="" ref="0x2b67a707ce10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b67a707bd88" loc="95:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b67a707bd88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b67a707a170"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b67a707a2f8"/>
        <function-ref name="request" scoped="" ref="0x2b67a707a480"/>
        <function-ref name="granted" scoped="" ref="0x2b67a707a608"/>
        <function-ref name="isOwner" scoped="" ref="0x2b67a707a790"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2b67a70a1020" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b67a70a1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b67a70a1370"/>
        <function-ref name="userId" scoped="" ref="0x2b67a70a14f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x2b67a70a17c8" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2b67a70a17c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2b67a70a1b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiBus" ref="0x2b67a70e5100" loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <component-ref qname="HplAtm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiBus" scoped="" ref="0x2b67a70e5100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x2b67a70e5450"/>
        <function-ref name="sleep" scoped="" ref="0x2b67a70e3950"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x2b67a70e5760"/>
        <function-ref name="dataReady" scoped="" ref="0x2b67a70e3ad8"/>
        <function-ref name="initMaster" scoped="" ref="0x2b67a70e5a70"/>
        <function-ref name="setMasterBit" scoped="" ref="0x2b67a70e5bf8"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x2b67a70e5d80"/>
        <function-ref name="read" scoped="" ref="0x2b67a70e4020"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x2b67a70e41a8"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x2b67a70e4330"/>
        <function-ref name="setClock" scoped="" ref="0x2b67a70e44b8"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x2b67a70e4640"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x2b67a70e47c8"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x2b67a70e4a50"/>
        <function-ref name="setDataOrder" scoped="" ref="0x2b67a70e4bd8"/>
        <function-ref name="write" scoped="" ref="0x2b67a70e4d60"/>
        <function-ref name="enableSpi" scoped="" ref="0x2b67a70e3020"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x2b67a70e31a8"/>
        <function-ref name="getClockPhase" scoped="" ref="0x2b67a70e3330"/>
        <function-ref name="getClock" scoped="" ref="0x2b67a70e34b8"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x2b67a70e3640"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x2b67a70e55d8"/>
        <function-ref name="setClockPhase" scoped="" ref="0x2b67a70e58e8"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x2b67a70e37c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MISO" ref="0x2b67a70fd958" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MISO" scoped="" ref="0x2b67a70fd958"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a70fdca8"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a70fde30"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a70fc020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a70fc1a8"/>
        <function-ref name="get" scoped="" ref="0x2b67a70fc330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a70fc4b8"/>
        <function-ref name="set" scoped="" ref="0x2b67a70fc640"/>
        <function-ref name="clr" scoped="" ref="0x2b67a70fc7c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SCK" ref="0x2b67a70ff648" loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SCK" scoped="" ref="0x2b67a70ff648"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a70ff998"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a70ffb20"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a70ffca8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a70ffe30"/>
        <function-ref name="get" scoped="" ref="0x2b67a70fe020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a70fe1a8"/>
        <function-ref name="set" scoped="" ref="0x2b67a70fe330"/>
        <function-ref name="clr" scoped="" ref="0x2b67a70fe4b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SS" ref="0x2b67a7100508" loc="78:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SS" scoped="" ref="0x2b67a7100508"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a7100858"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a71009e0"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a7100b68"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a7100cf0"/>
        <function-ref name="get" scoped="" ref="0x2b67a7100e78"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a70ff030"/>
        <function-ref name="set" scoped="" ref="0x2b67a70ff1b8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a70ff340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x2b67a7101c70" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b67a7101c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b67a7100020"/>
        <function-ref name="stop" scoped="" ref="0x2b67a71001a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Mcu" ref="0x2b67a70fcaf8" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Mcu" scoped="" ref="0x2b67a70fcaf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2b67a70fce48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SPI" ref="0x2b67a7103020" loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SPI" scoped="" ref="0x2b67a7103020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x2b67a7103370"/>
        <function-ref name="sleep" scoped="" ref="0x2b67a71017c8"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x2b67a7103680"/>
        <function-ref name="dataReady" scoped="" ref="0x2b67a7101950"/>
        <function-ref name="initMaster" scoped="" ref="0x2b67a7103990"/>
        <function-ref name="setMasterBit" scoped="" ref="0x2b67a7103b18"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x2b67a7103ca0"/>
        <function-ref name="read" scoped="" ref="0x2b67a7103e28"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x2b67a7102020"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x2b67a71021a8"/>
        <function-ref name="setClock" scoped="" ref="0x2b67a7102330"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x2b67a71024b8"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x2b67a7102640"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x2b67a71028c8"/>
        <function-ref name="setDataOrder" scoped="" ref="0x2b67a7102a50"/>
        <function-ref name="write" scoped="" ref="0x2b67a7102bd8"/>
        <function-ref name="enableSpi" scoped="" ref="0x2b67a7102d60"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x2b67a7101020"/>
        <function-ref name="getClockPhase" scoped="" ref="0x2b67a71011a8"/>
        <function-ref name="getClock" scoped="" ref="0x2b67a7101330"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x2b67a71014b8"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x2b67a71034f8"/>
        <function-ref name="setClockPhase" scoped="" ref="0x2b67a7103808"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x2b67a7101640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MOSI" ref="0x2b67a70fe7d0" loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MOSI" scoped="" ref="0x2b67a70fe7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b67a70feb20"/>
        <function-ref name="isInput" scoped="" ref="0x2b67a70feca8"/>
        <function-ref name="toggle" scoped="" ref="0x2b67a70fee30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b67a70fd020"/>
        <function-ref name="get" scoped="" ref="0x2b67a70fd1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b67a70fd330"/>
        <function-ref name="set" scoped="" ref="0x2b67a70fd4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b67a70fd640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2b67a718c020" loc="86:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2b67a718c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2b67a718c390"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b67a718c518"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b67a718b020" loc="89:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b67a718b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b67a718b390"/>
        <function-ref name="configure" scoped="" ref="0x2b67a718b518"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b67a718d200" loc="85:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b67a718d200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b67a718d570"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b67a718d6f8"/>
        <function-ref name="request" scoped="" ref="0x2b67a718d880"/>
        <function-ref name="granted" scoped="" ref="0x2b67a718da08"/>
        <function-ref name="isOwner" scoped="" ref="0x2b67a718db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2b67a718c760" loc="87:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b67a718c760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b67a718cab0"/>
        <function-ref name="userId" scoped="" ref="0x2b67a718cc38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b67a7525978" loc="44:/homes/hglanzer/GIT/tinyos/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b67a7525978"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b67a7525cc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x2b67a7523020" loc="45:/homes/hglanzer/GIT/tinyos/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x2b67a7523020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2b67a7523370"/>
        <function-ref name="isEmpty" scoped="" ref="0x2b67a75234f8"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2b67a7523680"/>
        <function-ref name="dequeue" scoped="" ref="0x2b67a7523808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2b67a7521af8" loc="52:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2b67a7521af8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2b67a7521e68"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b67a7520020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b67a7520b08" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b67a7520b08"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b67a7520e78"/>
        <function-ref name="configure" scoped="" ref="0x2b67a751f030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x2b67a751f2b8" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x2b67a751f2b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2b67a751f608"/>
        <function-ref name="isEmpty" scoped="" ref="0x2b67a751f790"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2b67a751f918"/>
        <function-ref name="dequeue" scoped="" ref="0x2b67a751faa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b67a7522d78" loc="51:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b67a7522d78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b67a7521170"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b67a75212f8"/>
        <function-ref name="request" scoped="" ref="0x2b67a7521480"/>
        <function-ref name="granted" scoped="" ref="0x2b67a7521608"/>
        <function-ref name="isOwner" scoped="" ref="0x2b67a7521790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2b67a7520268" loc="53:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b67a7520268"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b67a75205b8"/>
        <function-ref name="userId" scoped="" ref="0x2b67a7520740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x2b67a751fd68" loc="69:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x2b67a751fd68"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b67a751e0f0"/>
        <function-ref name="runTask" scoped="" ref="0x2b67a751e278"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:/homes/hglanzer/GIT/tinyos/tos/interfaces/Init.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2b67a6b29178" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/Init.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x2b67a6b21e40" loc="60:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
        <documentation loc="51:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x2b67a6b2f290" loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b67a6830db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x2b67a6b2f020" loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b67a6830db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x2b67a6b33940" loc="31:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="27:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x2b67a6b32378" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b67a6830db0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b67a6830db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2b67a6b32108" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b67a6830db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x2b67a6b32e00" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b67a6830db0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b67a6830db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2b67a6b32b90" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b67a6830db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x2b67a6b31698" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x2b67a6b460d8" loc="44:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x2b67a6b467a0" loc="45:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x2b67a6b47328" loc="42:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x2b67a6b45570" loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b67a6b479c8" loc="43:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x2b67a6b46e58" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b67a6b495a8" loc="40:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x2b67a6b49c18" loc="41:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2b67a6a343a0" loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="54:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x2b67a6a32290" loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x2b67a6a34ab8" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x2b67a6a3e070" loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x2b67a6a3e860" loc="75:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
        <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
      <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x2b67a6af1450" loc="76:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x2b67a6b07d28" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x2b67a6a8d1a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x2b67a6b116d8" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GLCD" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
      <function command="" provided="0" name="startClearScreen" ref="0x2b67a6cf8d80" loc="66:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2b67a6cf8b10" loc="66:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="tsPressed" ref="0x2b67a6cdc510" loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initDone" ref="0x2b67a6cf7438" loc="68:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteBar" ref="0x2b67a6ceac18" loc="56:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b67a6cea020" loc="56:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6cea320" loc="56:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x2b67a6cea650" loc="56:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="width" ref="0x2b67a6cea978" loc="56:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isPressed" ref="0x2b67a6cdeb40" loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x2b67a6cde8d0" loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="calibrated" ref="0x2b67a6cdde58" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateTouchScreen" ref="0x2b67a6ce1c30" loc="8:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteLine" ref="0x2b67a6cf8410" loc="64:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b67a6ce57d8" loc="64:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6ce5ad8" loc="64:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="xEnd" ref="0x2b67a6ce5df8" loc="64:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="yEnd" ref="0x2b67a6cf8170" loc="64:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getXY" ref="0x2b67a6cde2a8" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteRectangle" ref="0x2b67a6ce8020" loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b67a6ce9320" loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6ce9620" loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="a" ref="0x2b67a6ce9920" loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="b" ref="0x2b67a6ce9c20" loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="barWritten" ref="0x2b67a6cf46a0" loc="78:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="lineWritten" ref="0x2b67a6cf4020" loc="76:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="screenCleared" ref="0x2b67a6cf4d40" loc="80:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteString" ref="0x2b67a6ce5128" loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b67a6ce7818" loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="x" ref="0x2b67a6ce7b18" loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6ce7e18" loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="xyReady" ref="0x2b67a6cdd7b8" loc="19:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b67a6cdd228" loc="19:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6cdd538" loc="19:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="writeByte" ref="0x2b67a6ceed40" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b67a6cee490" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6cee790" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x2b67a6ceeab0" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPixel" ref="0x2b67a6cec8a0" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b67a6cec320" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6cec620" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="circleWritten" ref="0x2b67a6cf7ad8" loc="70:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteCircle" ref="0x2b67a6ce7040" loc="60:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="xcenter" ref="0x2b67a6ce8720" loc="60:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="ycenter" ref="0x2b67a6ce8a58" loc="60:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="radius" ref="0x2b67a6ce8d88" loc="60:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="rectangleWritten" ref="0x2b67a6cf6860" loc="74:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writePixel" ref="0x2b67a6cedca0" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b67a6ced408" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6ced708" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="on" ref="0x2b67a6ceda10" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initLCD" ref="0x2b67a6cdcdf8" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2b67a6cdcb88" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stringWritten" ref="0x2b67a6cf61a0" loc="72:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ethernet" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/Ethernet.nc">
      <function event="" provided="0" name="initDone" ref="0x2b67a6cf0c10" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/Ethernet.nc">
        <interfacedef-ref qname="Ethernet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x2b67a6cf05a0" loc="8:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/Ethernet.nc">
        <interfacedef-ref qname="Ethernet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mac" ref="0x2b67a6cf0330" loc="8:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/Ethernet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LCD128x64" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
      <function command="" provided="0" name="startClearScreen" ref="0x2b67a6d30590" loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2b67a6d30320" loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="initDone" ref="0x2b67a6d30c00" loc="38:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteBar" ref="0x2b67a6d375e8" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b67a6d22920" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6d22c20" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x2b67a6d37020" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="width" ref="0x2b67a6d37348" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteLine" ref="0x2b67a6d32c00" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b67a6d32020" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6d32320" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="xEnd" ref="0x2b67a6d32640" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="yEnd" ref="0x2b67a6d32960" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="barWritten" ref="0x2b67a6d42020" loc="48:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteRectangle" ref="0x2b67a6d368c0" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b67a6d37c80" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6d36020" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="a" ref="0x2b67a6d36320" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="b" ref="0x2b67a6d36620" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="screenCleared" ref="0x2b67a6d426c0" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="lineWritten" ref="0x2b67a6d2e860" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteString" ref="0x2b67a6d338b0" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b67a6d33020" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="x" ref="0x2b67a6d33320" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6d33620" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="writeByte" ref="0x2b67a6d255d0" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b67a6d26be8" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6d25020" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x2b67a6d25340" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPixel" ref="0x2b67a6d222a0" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b67a6d23c08" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6d22020" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="circleWritten" ref="0x2b67a6d2f328" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteCircle" ref="0x2b67a6d34918" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="xcenter" ref="0x2b67a6d34020" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="ycenter" ref="0x2b67a6d34358" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="radius" ref="0x2b67a6d34688" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="rectangleWritten" ref="0x2b67a6d2e1d8" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writePixel" ref="0x2b67a6d235b8" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b67a6d25c30" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6d23020" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="on" ref="0x2b67a6d23328" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initLCD" ref="0x2b67a6d26590" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2b67a6d26320" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stringWritten" ref="0x2b67a6d2f9c8" loc="42:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TouchScreen" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
      <function event="" provided="0" name="tsPressed" ref="0x2b67a6d28cd0" loc="13:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isPressed" ref="0x2b67a6d2aa10" loc="6:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x2b67a6d2a7a0" loc="6:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getXY" ref="0x2b67a6d2a178" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="xyReady" ref="0x2b67a6d28658" loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b67a6d280c8" loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b67a6d283d8" loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x2b67a6d88410" loc="49:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b67a6d88410"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x2b67a6d88c48" loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
        <documentation loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x2b67a6d85910" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b67a6d88410"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x2b67a6d85390" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x2b67a6d85690" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b67a6d88410"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcConfig" loc="19:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
      <documentation loc="13:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <short>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.</short>
        <long>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRefVoltage" ref="0x2b67a6d93e00" loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="27:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain reference voltage&#10; </short>
          <long>&#10; Obtain reference voltage&#10; @return The reference voltage to use. Must be one of the &#10;   ATM128_ADC_VREF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x2b67a6d93618" loc="25:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="20:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain channel.</short>
          <long>&#10; Obtain channel.&#10; @return The A/D channel to use. Must be one of the ATM128_ADC_SNGL_xxx&#10;   or ATM128_ADC_DIFF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPrescaler" ref="0x2b67a6d92658" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain prescaler value.</short>
          <long>&#10; Obtain prescaler value.&#10; @return The prescaler value to use. Must be one of the &#10;   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x2b67a6db6b50" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x2b67a6db63a0" loc="59:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x2b67a6dc7378" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b67a6dc7378"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x2b67a6dc7be8" loc="58:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x2b67a6dc68e8" loc="66:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
        <documentation loc="60:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b67a6dc7378"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x2b67a6dc6368" loc="66:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x2b67a6dc6668" loc="66:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b67a6dc7378"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
      <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x2b67a6dc0c78" loc="120:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="104:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x2b67a6dc1d50" loc="97:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="90:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x2b67a6dc1460" loc="88:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="78:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x2b67a6dc0518" loc="102:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="99:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x2b67a6dbf848" loc="128:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="122:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcMultiple" loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.&#10; &#60;p>&#10; Because of the possibility that samples may be imprecise after &#10; switching channels and/or reference voltages, and because there&#10; is a one sample delay on swithcing channels and reference voltages,&#10; Atm128ADCMultiple is complex. Two straightforward uses are:&#10; &#60;ol type=&#34;A&#34;>&#10; &#60;li>Acquire N samples from channel C:&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C at the desired rate&#10;       (note that the choice of prescalers is very limited, so you&#10;       don't have many choices for sampling rate)&#10;    &#60;li>ignore the first dataReady event&#10;    &#60;li>use the results of the next N dataReady() events, return FALSE&#10;       on the last one&#10;    &#60;/ol>&#10; &#60;li>Acquire one sample each from channels C1, ..., Cn (this pseudocode&#10;    assumes that none of these channels are differential)&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C1&#10;    &#60;li>on the ith dataReady event switch to channel Ci+1 by changing&#10;       *newChannel&#10;    &#60;li>the data passed to the ith dataReady event is for channel Ci-1&#10;       (the data from the first dataReady event is ignored)&#10;    &#60;/ol>&#10; &#60;/ol>&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x2b67a6de2768" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.</short>
          <long>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.&#10;&#10; @param channel Initial A/D conversion channel. The channel can &#10;   be changed in the dataReady event, though these changes happen&#10;   with a one-sample delay (this is a hardware restriction).&#10; @param refVoltage Initial A/D reference voltage. See the&#10;   ATM128_ADC_VREF_xxx constants in Atm128ADC.h. Like the channel,&#10;   the reference voltage can be changed in the dataReady event with&#10;   a one-sample delay.&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in reference voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x2b67a6dcba60" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x2b67a6dcbdb8" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x2b67a6de2178" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x2b67a6de24c8" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b67a6de03f0" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Returns the next sample in a free-running conversion.</short>
          <long>&#10; Returns the next sample in a free-running conversion. Allow the user&#10; to switch channels and/or reference voltages with a one sample delay.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if this conversion was precise, FALSE if it wasn't &#10;   (we assume that the second conversion after a change of reference&#10;   voltage or after switching to a differential channel is precise)&#10; @param channel Channel this sample was from.&#10; @param newChannel Change this parameter to switch to a new channel&#10;   for the second next sample.&#10; @param newRefVoltage Change this parameter to change the reference &#10;   voltage for the second next sample.&#10;&#10; @return TRUE to continue sampling, FALSE to stop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b67a6de1368" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x2b67a6de1688" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0x2b67a6de19c0" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="newChannel" ref="0x2b67a6de1d70" loc="120:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="newRefVoltage" ref="0x2b67a6de0140" loc="120:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcSingle" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x2b67a6dcf0d8" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Initiates an ADC conversion on a given channel.</short>
          <long>&#10; Initiates an ADC conversion on a given channel.&#10;&#10; @param channel A/D conversion channel.&#10; @param refVoltage Select reference voltage for A/D conversion. See&#10;   the ATM128_ADC_VREF_xxx constants in Atm128ADC.h&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in refernce voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x2b67a6dd03d8" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x2b67a6dd0730" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x2b67a6dd0a98" loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x2b67a6dd0de8" loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2b67a6dce930" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Cancel an outstanding getData operation.</short>
          <long>&#10; Cancel an outstanding getData operation. Use with care, to&#10; avoid problems with races between the dataReady event and cancel.&#10; @return TRUE if a conversion was in-progress or an interrupt&#10;   was pending. dataReady will not be signaled. FALSE if the&#10;   conversion was already complete. dataReady will be (or has&#10;   already been) signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b67a6dce0b8" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.</short>
          <long>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if the conversion precise, FALSE if it wasn't. This&#10;   values matches the result from the &#60;code>getData&#60;/code> call.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b67a6dcfae0" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x2b67a6dcfe00" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Adc" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <short>&#10; HPL interface to the Atmega128 A/D conversion subsystem.</short>
        <long>&#10; HPL interface to the Atmega128 A/D conversion subsystem. Please see the&#10; Atmega128 manual for full details on the functioning of this subsystem.&#10; &#60;p>&#10; A word of warning: the Atmega128 SLEEP instruction initiates an A/D&#10; conversion when the ADC and ADC interrupt are enabled.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0x2b67a6de60d8" loc="114:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="111:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdmux" ref="0x2b67a6dee1d8" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Read the ADMUX (ADC selection) register&#10; @return Current ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b67a6aa7478"/>
            <typename><typedef-ref name="Atm128Admux_t" ref="0x2b67a6aa7930"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPrescaler" ref="0x2b67a6de4338" loc="140:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="135:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set ADC prescaler selection bits&#10; </short>
          <long>&#10; Set ADC prescaler selection bits&#10; @param scale New ADC prescaler. Must be one of the ATM128_ADC_PRESCALE_xxx&#10;   values from Atm128Adc.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x2b67a6de40c8" loc="140:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x2b67a6de6918" loc="122:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="118:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is ADC enabled?&#10; </short>
          <long>&#10; Is ADC enabled?&#10; @return TRUE if the ADC is enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAdc" ref="0x2b67a6debd18" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdmux" ref="0x2b67a6deebb0" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Set the ADMUX (ADC selection) register&#10; @param admux New ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b67a6aa7478"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x2b67a6aa7930"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="admux" ref="0x2b67a6dee940" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b67a6aa7478"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x2b67a6aa7930"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterruption" ref="0x2b67a6deab88" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isComplete" ref="0x2b67a6de5870" loc="133:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="128:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.</short>
          <long>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.&#10; @return TRUE if the A/D conversion is complete, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2b67a6de4ad0" loc="150:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="142:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Cancel A/D conversion and any pending A/D interrupt.</short>
          <long>&#10; Cancel A/D conversion and any pending A/D interrupt. Also disables the&#10; ADC interruption (otherwise a sample might start at the next sleep&#10; instruction). This command can assume that the A/D converter is enabled. &#10; @return TRUE if an A/D conversion was in progress or an A/D interrupt&#10;   was pending, FALSE otherwise. In single conversion mode, a return&#10;   of TRUE implies that the dataReady event will not be signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAdc" ref="0x2b67a6dea448" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetInterrupt" ref="0x2b67a6de9a48" loc="99:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="96:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Clear the ADC interrupt flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterruption" ref="0x2b67a6de9328" loc="95:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x2b67a6de81d8" loc="106:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Start ADC conversion.</short>
          <long>&#10; Start ADC conversion. If ADC interrupts are enabled, the dataReady event&#10; will be signaled once (in non-continuous mode) or repeatedly (in&#10; continuous mode).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isStarted" ref="0x2b67a6de50d8" loc="127:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="123:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion in progress?&#10; </short>
          <long>&#10; Is A/D conversion in progress?&#10; @return TRUE if the A/D conversion is in progress, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdcsra" ref="0x2b67a6deddd0" loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Set the ADCSRA (ADC control) register&#10; @param adcsra New ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b67a6aaf020"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2b67a6aaf6e8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adcsra" ref="0x2b67a6dedb60" loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b67a6aaf020"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2b67a6aaf6e8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setContinuous" ref="0x2b67a6de8990" loc="110:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="107:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdcsra" ref="0x2b67a6ded3e0" loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Read the ADCSRA (ADC control) register&#10; @return Current ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b67a6aaf020"/>
            <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2b67a6aaf6e8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x2b67a6deb5b8" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the latest A/D conversion result&#10; </short>
          <long>&#10; Read the latest A/D conversion result&#10; @return A/D value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b67a6de3640" loc="156:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="152:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; A/D interrupt occured&#10; </short>
          <long>&#10; A/D interrupt occured&#10; @param data Latest A/D conversion result&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b67a6de33d0" loc="156:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x2b67a6dd9020" loc="95:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b67a6dd97f8" loc="105:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x2b67a6e6c178" loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x2b67a6e6ca40" loc="61:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x2b67a6e6ae60" loc="56:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x2b67a6e69e60" loc="73:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x2b67a6e6a640" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x2b67a6e69698" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x2b67a6e67760" loc="81:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x2b67a6e654b8" loc="90:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x2b67a6e65ca8" loc="98:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x2b67a6e74290" loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b67a6e644c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x2b67a6e74020" loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b67a6e644c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x2b67a6e76360" loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x2b67a6e76de0" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b67a6e644c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x2b67a6e76b70" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b67a6e644c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x2b67a6e756d8" loc="70:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x2b67a6e644c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x2b67a6e9f550" loc="61:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="58:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x2b67a6e9fc88" loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x2b67a6e9e420" loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x2b67a6e9d2a8" loc="83:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x2b67a6e9c8b0" loc="100:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="96:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b67a6e9a070" loc="117:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="103:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x2b67a6e9eb38" loc="77:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="74:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b67a6e9ab70" loc="134:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="120:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x2b67a6e9a900" loc="134:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPort" ref="0x2b67a6e99a08" loc="137:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x2b67a6e99468" loc="137:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
          <variable name="pval" ref="0x2b67a6e99788" loc="137:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x2b67a6ea0df8" loc="56:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x2b67a6e9da18" loc="89:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="86:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x2b67a6e9c178" loc="94:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="91:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x2b67a6ef5110" loc="62:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiByte.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x2b67a7045e10" loc="45:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiByte.nc">
        <documentation loc="40:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x2b67a7045ba0" loc="45:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="54:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both. It is a &#34;send&#34; command because reading&#10; from the SPI requires writing bytes. The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.8 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x2b67a70859d8" loc="70:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
        <documentation loc="56:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x2b67a70850c8" loc="70:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x2b67a7085428" loc="70:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b67a7085748" loc="70:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x2b67a7084d68" loc="82:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
        <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x2b67a7084100" loc="82:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x2b67a7084460" loc="82:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b67a7084780" loc="82:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b67a6830378"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x2b67a7084ac8" loc="83:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b67a6a38ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;call FastSpiByte.spiSplitWrite(data[0]); // start the first byte&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  call FastSpiByte.spiSplitReadWrite(data[i]);&#10;&#9;}&#10;&#9;call FastSpiByte.spiSlitRead(); // finish the last byte&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x2b67a7068740" loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
        <documentation loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b67a70684d0" loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x2b67a7088ab8" loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
        <documentation loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b67a7088848" loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x2b67a7088020" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x2b67a70874f8" loc="76:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
        <documentation loc="71:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b67a7087288" loc="76:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Spi" loc="78:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
      <function command="" provided="0" name="initSlave" ref="0x2b67a7090328" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into slave mode.</short>
          <long> Initialize the ATmega128 SPI bus into slave mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPolarity" ref="0x2b67a70aac40" loc="126:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpiEnabled" ref="0x2b67a708b7a8" loc="117:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPhase" ref="0x2b67a70a9610" loc="128:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sampleOnTrailing" ref="0x2b67a70a93a0" loc="128:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initMaster" ref="0x2b67a7091ba8" loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into master mode.</short>
          <long> Initialize the ATmega128 SPI bus into master mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterBit" ref="0x2b67a70ab338" loc="122:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="isMaster" ref="0x2b67a70ab0c8" loc="122:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0x2b67a708c020" loc="113:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enabled" ref="0x2b67a708ec88" loc="113:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x2b67a708f1d8" loc="97:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="93:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Read the SPI data register &#10; </short>
          <long> &#10; Read the SPI data register &#10; @return last data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterDoubleSpeed" ref="0x2b67a70a5de0" loc="142:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x2b67a70a5b70" loc="142:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptEnabled" ref="0x2b67a708c758" loc="114:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClock" ref="0x2b67a70a8690" loc="131:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="speed" ref="0x2b67a70a8420" loc="131:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x2b67a70a6538" loc="137:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPolarity" ref="0x2b67a70aa518" loc="125:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="highWhenIdle" ref="0x2b67a70aa2a8" loc="125:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterDoubleSpeed" ref="0x2b67a70a54a0" loc="141:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDataOrder" ref="0x2b67a708a290" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lsbFirst" ref="0x2b67a708a020" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x2b67a708fb30" loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="99:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Write the SPI data register &#10; </short>
          <long> &#10; Write the SPI data register &#10; @param data   next data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b67a708f8c0" loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x2b67a708b0a8" loc="116:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="busOn" ref="0x2b67a708cdf8" loc="116:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterBitSet" ref="0x2b67a70abb48" loc="123:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPhase" ref="0x2b67a70a9d18" loc="129:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClock" ref="0x2b67a70a8d80" loc="132:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="hasWriteCollided" ref="0x2b67a70a6c80" loc="139:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOrderLsbFirst" ref="0x2b67a708a9a8" loc="120:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b67a6a2f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x2b67a7090a40" loc="89:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Disable and sleep the ATmega128 SPI bus.</short>
          <long> Disable and sleep the ATmega128 SPI bus. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b67a708e4e0" loc="109:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="105:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
          <short>&#10; Interrupt signalling SPI data cycle is complete.</short>
          <long>&#10; Interrupt signalling SPI data cycle is complete. &#10; @param data   data byte from data register&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b67a708e270" loc="109:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b67a682e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
