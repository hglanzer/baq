<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="19:BlinkAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2ade437d2d60"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2ade4361a220"/></to>
    </wire>
    <wire loc="72:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2ade4361a220"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2ade437ca198"/></to>
    </wire>
    <wire loc="20:BlinkAppC.nc">
      <from><interface-ref name="Timer0" scoped="" ref="0x2ade437eb578"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2ade43b40420"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x2ade43b40420"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2ade43b59550"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="21:BlinkAppC.nc">
      <from><interface-ref name="GLCD" scoped="" ref="0x2ade437d0020"/></from>
      <to><interface-ref name="GLCD" scoped="" ref="0x2ade4381d770"/></to>
    </wire>
    <wire loc="9:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDC.nc">
      <from><interface-ref name="GLCD" scoped="" ref="0x2ade4381d770"/></from>
      <to><interface-ref name="GLCD" scoped="" ref="0x2ade43829170"/></to>
    </wire>
    <wire loc="23:BlinkAppC.nc">
      <from><interface-ref name="UDP" scoped="" ref="0x2ade437f5b18"/></from>
      <to><interface-ref name="UDP" scoped="" ref="0x2ade43cff280"/></to>
    </wire>
    <wire loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDPC.nc">
      <from><interface-ref name="UDP" scoped="" ref="0x2ade43cff280"/></from>
      <to><interface-ref name="UDP" scoped="" ref="0x2ade43d21190"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2ade43619620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ade443d5cb8"/></to>
    </wire>
    <wire loc="53:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2ade43619620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ade43b54e48"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2ade43619620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ade443119f8"/></to>
    </wire>
    <wire loc="67:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2ade437ca7d0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2ade43522600"/></to>
    </wire>
    <wire loc="53:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2ade43522600"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2ade435d9448"/></to>
    </wire>
    <wire loc="68:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2ade437c91d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ade4361c620"/></to>
    </wire>
    <wire loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2ade4361c620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ade4362b600"/></to>
    </wire>
    <wire loc="71:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2ade437c9898"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x2ade43619620"/></to>
    </wire>
    <wire loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2ade43617380"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ade438e3d48"/></to>
    </wire>
    <wire loc="59:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2ade4361f618"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2ade437ac8f0"/></to>
    </wire>
    <wire loc="61:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x2ade4362a398"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ade437ac2c0"/></to>
    </wire>
    <wire loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x2ade4362bca0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2ade43624b98"/></to>
    </wire>
    <wire loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2ade43624b98"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2ade4362e698"/></to>
    </wire>
    <wire loc="63:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2ade43631360"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2ade43617380"/></to>
    </wire>
    <wire loc="29:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2ade4362db08"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2ade43631360"/></to>
    </wire>
    <wire loc="191:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x2ade43676af0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade4374f970"/></to>
    </wire>
    <wire loc="165:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x2ade43658658"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2ade436f6020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2ade436f6020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44158710"/></to>
    </wire>
    <wire loc="176:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x2ade43669658"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2ade43705d60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2ade43705d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade4419a710"/></to>
    </wire>
    <wire loc="185:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x2ade4366e348"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2ade437075b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2ade437075b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44224710"/></to>
    </wire>
    <wire loc="143:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x2ade43644348"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2ade436cd740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2ade436cd740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44019710"/></to>
    </wire>
    <wire loc="183:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x2ade43670020"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2ade437092a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2ade437092a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade4422a710"/></to>
    </wire>
    <wire loc="146:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x2ade43642658"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2ade436d5930"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2ade436d5930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade440676a8"/></to>
    </wire>
    <wire loc="157:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x2ade436537e0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2ade436e4740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2ade436e4740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade440d7710"/></to>
    </wire>
    <wire loc="168:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x2ade43663af0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2ade436f2430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2ade436f2430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade4414f710"/></to>
    </wire>
    <wire loc="179:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x2ade43666af0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2ade43701120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2ade43701120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade441cc710"/></to>
    </wire>
    <wire loc="138:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x2ade4363caf0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2ade436c2020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2ade436c2020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44029710"/></to>
    </wire>
    <wire loc="149:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x2ade4364daf0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2ade436d2d60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2ade436d2d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44094710"/></to>
    </wire>
    <wire loc="160:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x2ade43650c78"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2ade436e1bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2ade436e1bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44105710"/></to>
    </wire>
    <wire loc="171:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x2ade4365f020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2ade436ef8c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2ade436ef8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44145710"/></to>
    </wire>
    <wire loc="188:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x2ade4366b7e0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2ade43716a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2ade43716a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade4421a710"/></to>
    </wire>
    <wire loc="194:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x2ade436727e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade43764020"/></to>
    </wire>
    <wire loc="174:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x2ade4365d348"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2ade436f7a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2ade436f7a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade441a0710"/></to>
    </wire>
    <wire loc="141:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x2ade43646020"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2ade436bf430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2ade436bf430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade4401f710"/></to>
    </wire>
    <wire loc="152:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x2ade436491a0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2ade436de120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2ade436de120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade4408a710"/></to>
    </wire>
    <wire loc="192:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x2ade436744d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade4375cab0"/></to>
    </wire>
    <wire loc="155:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x2ade436554d0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2ade436e6500"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2ade436e6500"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade440dd6a8"/></to>
    </wire>
    <wire loc="166:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x2ade436577e0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2ade436f5120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2ade436f5120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44155710"/></to>
    </wire>
    <wire loc="177:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x2ade436687e0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2ade43704e18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2ade43704e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade441d3710"/></to>
    </wire>
    <wire loc="186:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x2ade4366d4d0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2ade43718740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2ade43718740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44221710"/></to>
    </wire>
    <wire loc="144:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x2ade436434d0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2ade436cc8c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2ade436cc8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44016710"/></to>
    </wire>
    <wire loc="147:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x2ade436417e0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2ade436d4a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2ade436d4a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44064710"/></to>
    </wire>
    <wire loc="158:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x2ade43652968"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2ade436e38c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2ade436e38c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade440d4710"/></to>
    </wire>
    <wire loc="169:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x2ade43662c78"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2ade436f15b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2ade436f15b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade4414b710"/></to>
    </wire>
    <wire loc="180:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x2ade43665c78"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2ade437002a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2ade437002a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade441c9710"/></to>
    </wire>
    <wire loc="139:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x2ade4363bc78"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2ade436c1120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2ade436c1120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44026710"/></to>
    </wire>
    <wire loc="150:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x2ade4364cc78"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2ade436d1e18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2ade436d1e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44090710"/></to>
    </wire>
    <wire loc="161:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x2ade4364fe00"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2ade436dfd60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2ade436dfd60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44102710"/></to>
    </wire>
    <wire loc="189:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x2ade43677968"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2ade43715bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2ade43715bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44217710"/></to>
    </wire>
    <wire loc="164:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x2ade436591a0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2ade436e8e40"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2ade436e8e40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade4415b6a8"/></to>
    </wire>
    <wire loc="175:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x2ade4366a4d0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2ade43706bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2ade43706bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade4419d710"/></to>
    </wire>
    <wire loc="184:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x2ade4366f1a0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2ade43708430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2ade43708430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44227710"/></to>
    </wire>
    <wire loc="195:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x2ade4367f968"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade43771180"/></to>
    </wire>
    <wire loc="142:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x2ade436451a0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2ade436ce5b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2ade436ce5b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade4401c710"/></to>
    </wire>
    <wire loc="153:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x2ade43648348"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2ade436dd2a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2ade436dd2a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44087710"/></to>
    </wire>
    <wire loc="182:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x2ade43664e00"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2ade4370a1e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2ade4370a1e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade4422d6a8"/></to>
    </wire>
    <wire loc="156:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x2ade43654658"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2ade436e55b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2ade436e55b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade440da710"/></to>
    </wire>
    <wire loc="167:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x2ade43656968"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2ade436f32a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2ade436f32a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44152710"/></to>
    </wire>
    <wire loc="178:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x2ade43667968"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2ade43702020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2ade43702020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade441d0710"/></to>
    </wire>
    <wire loc="187:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x2ade4366c658"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2ade437178c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2ade437178c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade4421e710"/></to>
    </wire>
    <wire loc="137:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x2ade4362f870"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2ade436c4dc0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2ade436c4dc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade43ff26a8"/></to>
    </wire>
    <wire loc="148:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x2ade4364e968"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2ade436d3bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2ade436d3bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44061710"/></to>
    </wire>
    <wire loc="159:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x2ade43651af0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2ade436e2a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2ade436e2a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade440d1710"/></to>
    </wire>
    <wire loc="170:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x2ade43661e00"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2ade436f0740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2ade436f0740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44148710"/></to>
    </wire>
    <wire loc="193:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x2ade43673658"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade43758c38"/></to>
    </wire>
    <wire loc="173:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x2ade4365e1a0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2ade436f8930"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2ade436f8930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade441a36a8"/></to>
    </wire>
    <wire loc="162:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x2ade4365a020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2ade436eee18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2ade436eee18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade440ff710"/></to>
    </wire>
    <wire loc="140:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x2ade4363ae00"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2ade436c02a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2ade436c02a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade44023710"/></to>
    </wire>
    <wire loc="151:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x2ade4364a020"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2ade436cf020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2ade436cf020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2ade4408d710"/></to>
    </wire>
    <wire loc="54:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435d82b0"/></to>
    </wire>
    <wire loc="55:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x2ade435e1758"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x2ade435f8660"/></to>
    </wire>
    <wire loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x2ade435fe2b0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x2ade43c01268"/></to>
    </wire>
    <wire loc="31:BlinkC.nc">
      <from><interface-ref name="testTask" scoped="" ref="0x2ade438055d8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDC.nc">
      <from><interface-ref name="LCD128x64" scoped="" ref="0x2ade43853958"/></from>
      <to><interface-ref name="LCD128x64" scoped="" ref="0x2ade43a5f020"/></to>
    </wire>
    <wire loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64C.nc">
      <from><interface-ref name="LCD128x64" scoped="" ref="0x2ade43a5f020"/></from>
      <to><interface-ref name="LCD128x64" scoped="" ref="0x2ade43a8bc98"/></to>
    </wire>
    <wire loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDC.nc">
      <from><interface-ref name="TouchScreen" scoped="" ref="0x2ade438372b8"/></from>
      <to><interface-ref name="TouchScreen" scoped="" ref="0x2ade4382c580"/></to>
    </wire>
    <wire loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="TouchScreen" scoped="" ref="0x2ade4382c580"/></from>
      <to><interface-ref name="TouchScreen" scoped="" ref="0x2ade438aa318"/></to>
    </wire>
    <wire loc="13:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x2ade43898dd8"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2ade43a69358"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Read" scoped="" ref="0x2ade43a69358"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2ade438cb668"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2ade43a67a28"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2ade438a7998"/></to>
    </wire>
    <wire loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="driveA" scoped="" ref="0x2ade438994e0"/></from>
      <to><interface-ref name="PortG3" scoped="" ref="0x2ade436727e0"/></to>
    </wire>
    <wire loc="16:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="driveB" scoped="" ref="0x2ade43897698"/></from>
      <to><interface-ref name="PortG4" scoped="" ref="0x2ade4367f968"/></to>
    </wire>
    <wire loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="adcX" scoped="" ref="0x2ade438ad820"/></from>
      <to><interface-ref name="PortF0" scoped="" ref="0x2ade43664e00"/></to>
    </wire>
    <wire loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="adcY" scoped="" ref="0x2ade438ac9a8"/></from>
      <to><interface-ref name="PortF1" scoped="" ref="0x2ade43670020"/></to>
    </wire>
    <wire loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <from><interface-ref name="checkTS" scoped="" ref="0x2ade438a6970"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2ade438db020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2ade43a67a28"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2ade438da1c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x2ade438d9ca8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2ade438e8890"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2ade43a663f0"/></to>
    </wire>
    <wire loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Read" scoped="" ref="0x2ade438cb668"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2ade43a30a28"/></to>
    </wire>
    <wire loc="31:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x2ade438c82f0"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x2ade43a1a880"/></to>
    </wire>
    <wire loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2ade43a52b28"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2ade438da1c8"/></to>
    </wire>
    <wire loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2ade43a17e78"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2ade438db020"/></to>
    </wire>
    <wire loc="35:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x2ade43a53348"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2ade43a1cc68"/></to>
    </wire>
    <wire loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2ade43a17020"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2ade438e4d50"/></to>
    </wire>
    <wire loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2ade438e4d50"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2ade438f2488"/></to>
    </wire>
    <wire loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2ade438f69b0"/></from>
      <to><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2ade438f2de0"/></to>
    </wire>
    <wire loc="66:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2ade438d9ca8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2ade439eaa40"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2ade439eaa40"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2ade4430e060"/></to>
    </wire>
    <wire loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2ade439e7550"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2ade438e8890"/></to>
    </wire>
    <wire loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x2ade438f9940"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x2ade4392e020"/></to>
    </wire>
    <wire loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x2ade4392e020"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x2ade439435b8"/></to>
    </wire>
    <wire loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2ade438eed30"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2ade4361f618"/></to>
    </wire>
    <wire loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x2ade43a00478"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x2ade438f0c10"/></to>
    </wire>
    <wire loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2ade43a07268"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2ade439e8020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2ade439e8020"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2ade4430c4c0"/></to>
    </wire>
    <wire loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x2ade43941ad8"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x2ade43601a80"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x2ade439e9820"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x2ade4430ed58"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2ade439e8bd8"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2ade4430b0e0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2ade4430b980"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2ade439e7550"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Queue" scoped="" ref="0x2ade4430a130"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x2ade44310020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="grantedTask" scoped="" ref="0x2ade44308470"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x2ade44318470"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x2ade43a00478"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x2ade44318b90"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x2ade43a00b98"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2ade44317268"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2ade43a07268"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2ade44317e20"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2ade43a07e20"/></to>
    </wire>
    <wire loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <from><interface-ref name="acquiredData" scoped="" ref="0x2ade43a25bf8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeRectangle" scoped="" ref="0x2ade43ad6bd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="219:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeString" scoped="" ref="0x2ade43ade368"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeCircle" scoped="" ref="0x2ade43ace9b8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="278:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeLine" scoped="" ref="0x2ade43b09ca0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="37:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="wait4Controller" scoped="" ref="0x2ade43aa4368"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="356:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeBar" scoped="" ref="0x2ade43b11590"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="247:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="clearScreenNB" scoped="" ref="0x2ade43af1420"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x2ade43b59550"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2ade43b51b68"/></to>
    </wire>
    <wire loc="61:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x2ade43b51b68"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2ade43cd4020"/></to>
    </wire>
    <wire loc="59:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2ade43b54e48"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ade43b696f0"/></to>
    </wire>
    <wire loc="65:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x2ade43b6c108"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x2ade43ceec38"/></to>
    </wire>
    <wire loc="35:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2ade43b696f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ade43c61190"/></to>
    </wire>
    <wire loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x2ade43cf6208"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2ade43ca9ab0"/></to>
    </wire>
    <wire loc="63:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x2ade43ca4c70"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x2ade43b66020"/></to>
    </wire>
    <wire loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x2ade43b66020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x2ade43c61938"/></to>
    </wire>
    <wire loc="66:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x2ade43cede48"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x2ade43b7c150"/></to>
    </wire>
    <wire loc="37:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x2ade43b7c150"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x2ade43c5da90"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Counter" scoped="" ref="0x2ade43c5da90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x2ade4433a020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Init" scoped="" ref="0x2ade43c61190"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ade4433f600"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Alarm" scoped="" ref="0x2ade43c61938"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x2ade4433fda8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x2ade44338168"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2ade43bfae00"/></to>
    </wire>
    <wire loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x2ade43bfae00"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2ade43c0b180"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x2ade44375020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x2ade43bf0020"/></to>
    </wire>
    <wire loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x2ade43bf0020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x2ade43c06160"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Compare" scoped="" ref="0x2ade44374020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x2ade43bef020"/></to>
    </wire>
    <wire loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x2ade43bef020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x2ade43c05190"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerSync" scoped="" ref="0x2ade443700a0"/></from>
      <to><interface-ref name="TimerSync" scoped="" ref="0x2ade43c0f218"/></to>
    </wire>
    <wire loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="TimerSync" scoped="" ref="0x2ade43c0f218"/></from>
      <to><interface-ref name="TimerSync" scoped="" ref="0x2ade43c01958"/></to>
    </wire>
    <wire>
      <from><interface-ref name="fired" scoped="" ref="0x2ade43ca0cf0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x2ade43cf1478"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDPC.nc">
      <from><interface-ref name="IP" scoped="" ref="0x2ade43d1ad80"/></from>
      <to><interface-ref name="IP" scoped="" ref="0x2ade43cfb758"/></to>
    </wire>
    <wire loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IPC.nc">
      <from><interface-ref name="IP" scoped="" ref="0x2ade43cfb758"/></from>
      <to><interface-ref name="IP" scoped="" ref="0x2ade43d4a020"/></to>
    </wire>
    <wire loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IPC.nc">
      <from><interface-ref name="IEEE8023" scoped="" ref="0x2ade43d410d0"/></from>
      <to><interface-ref name="IEEE8023" scoped="" ref="0x2ade43d2e788"/></to>
    </wire>
    <wire loc="13:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023C.nc">
      <from><interface-ref name="IEEE8023" scoped="" ref="0x2ade43d2e788"/></from>
      <to><interface-ref name="IEEE8023" scoped="" ref="0x2ade43dafda8"/></to>
    </wire>
    <wire loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023C.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x2ade43dcc388"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x2ade43e40d80"/></to>
    </wire>
    <wire loc="94:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x2ade43e40d80"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x2ade43e5cd80"/></to>
    </wire>
    <wire loc="16:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2ade43dcc9b8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2ade43e3b978"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023C.nc">
      <from><interface-ref name="ssMMC" scoped="" ref="0x2ade43dd8c78"/></from>
      <to><interface-ref name="PortG1" scoped="" ref="0x2ade436744d0"/></to>
    </wire>
    <wire loc="19:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023C.nc">
      <from><interface-ref name="ssETH" scoped="" ref="0x2ade43dd7e38"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x2ade43642658"/></to>
    </wire>
    <wire loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023C.nc">
      <from><interface-ref name="rstETH" scoped="" ref="0x2ade43dd5020"/></from>
      <to><interface-ref name="PortB4" scoped="" ref="0x2ade4364cc78"/></to>
    </wire>
    <wire loc="21:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023C.nc">
      <from><interface-ref name="intETH" scoped="" ref="0x2ade43dcf5f8"/></from>
      <to><interface-ref name="Int2" scoped="" ref="0x2ade43f7d6a0"/></to>
    </wire>
    <wire loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int2" scoped="" ref="0x2ade43f7d6a0"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x2ade43f9e3e0"/></to>
    </wire>
    <wire loc="500:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023P.nc">
      <from><interface-ref name="checkInterruptflag" scoped="" ref="0x2ade43e20af8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="96:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x2ade43e5eb68"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x2ade43e5a020"/></to>
    </wire>
    <wire loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2ade43e40760"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2ade43e5c7a0"/></to>
    </wire>
    <wire loc="95:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x2ade43e383f8"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x2ade43e5b428"/></to>
    </wire>
    <wire loc="97:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2ade43e3b978"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2ade43e5ac88"/></to>
    </wire>
    <wire loc="99:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="ResourceArbiter" scoped="" ref="0x2ade43e69020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2ade43f57200"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2ade43f57200"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2ade443d1100"/></to>
    </wire>
    <wire loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2ade43e69c48"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2ade43f56760"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2ade43f56760"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2ade443d0578"/></to>
    </wire>
    <wire loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="Spi" scoped="" ref="0x2ade43e6bc78"/></from>
      <to><interface-ref name="SpiBus" scoped="" ref="0x2ade43ea8100"/></to>
    </wire>
    <wire loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SpiBus" scoped="" ref="0x2ade43ea8100"/></from>
      <to><interface-ref name="SPI" scoped="" ref="0x2ade43ed2020"/></to>
    </wire>
    <wire loc="102:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x2ade43e68478"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x2ade43601a80"/></to>
    </wire>
    <wire loc="255:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <from><interface-ref name="zeroTask" scoped="" ref="0x2ade43ea4b58"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="Mcu" scoped="" ref="0x2ade43ecbaf8"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x2ade43601a80"/></to>
    </wire>
    <wire loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SS" scoped="" ref="0x2ade43ecf508"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x2ade43642658"/></to>
    </wire>
    <wire loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="SCK" scoped="" ref="0x2ade43ece648"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0x2ade436417e0"/></to>
    </wire>
    <wire loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MOSI" scoped="" ref="0x2ade43ecd7d0"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0x2ade4364e968"/></to>
    </wire>
    <wire loc="89:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <from><interface-ref name="MISO" scoped="" ref="0x2ade43ecc958"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0x2ade4364daf0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x2ade43f56020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x2ade443d1df8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2ade443d0e18"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2ade43f55020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Queue" scoped="" ref="0x2ade443cf5d0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x2ade443d4328"/></to>
    </wire>
    <wire>
      <from><interface-ref name="grantedTask" scoped="" ref="0x2ade443ce100"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int6" scoped="" ref="0x2ade43f796a0"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x2ade43fc1970"/></to>
    </wire>
    <wire loc="72:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int1" scoped="" ref="0x2ade43f7e6a0"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x2ade43fa27a8"/></to>
    </wire>
    <wire loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int4" scoped="" ref="0x2ade43f7b6a0"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x2ade43fcacd8"/></to>
    </wire>
    <wire loc="78:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int7" scoped="" ref="0x2ade43f776a0"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x2ade43fbd6a8"/></to>
    </wire>
    <wire loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int5" scoped="" ref="0x2ade43f7a6a0"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x2ade43fc69d8"/></to>
    </wire>
    <wire loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int0" scoped="" ref="0x2ade43f81708"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x2ade43f84a70"/></to>
    </wire>
    <wire loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="Int3" scoped="" ref="0x2ade43f7c6a0"/></from>
      <to><interface-ref name="Irq" scoped="" ref="0x2ade43fcd020"/></to>
    </wire>
    <wire loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fa5908"/></from>
      <to><interface-ref name="IntSig0" scoped="" ref="0x2ade43f70390"/></to>
    </wire>
    <wire loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fa15f8"/></from>
      <to><interface-ref name="IntSig1" scoped="" ref="0x2ade43f70ac8"/></to>
    </wire>
    <wire loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fd12e8"/></from>
      <to><interface-ref name="IntSig2" scoped="" ref="0x2ade43f72240"/></to>
    </wire>
    <wire loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fcdde0"/></from>
      <to><interface-ref name="IntSig3" scoped="" ref="0x2ade43f72978"/></to>
    </wire>
    <wire loc="84:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fc9b10"/></from>
      <to><interface-ref name="IntSig4" scoped="" ref="0x2ade43f71108"/></to>
    </wire>
    <wire loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fc4908"/></from>
      <to><interface-ref name="IntSig5" scoped="" ref="0x2ade43f71840"/></to>
    </wire>
    <wire loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fc0780"/></from>
      <to><interface-ref name="IntSig6" scoped="" ref="0x2ade43f6f020"/></to>
    </wire>
    <wire loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <from><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fbc5f8"/></from>
      <to><interface-ref name="IntSig7" scoped="" ref="0x2ade43f6f758"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <documentation loc="45:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
        <short>&#10; Initialisation component for mica-family platforms.</short>
        <long>&#10; Initialisation component for mica-family platforms. See TEP107. Each &#10; mica-family member must also provide a MotePlatformC with initialisation&#10; specific to that member.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
        <short>&#10; Internal platform boot code.</short>
        <long>&#10; Internal platform boot code.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc" safe="">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:59">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:58">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:57">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:56">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:53">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc" safe="">
      <documentation loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc" safe="">
      <documentation loc="49:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.11 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BlinkC" loc="16:BlinkC.nc" safe="">
      <module/>
    </component>
    <component qname="GLCDC" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDC.nc">
      <configuration/>
    </component>
    <component qname="GLCDP" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDP.nc">
      <module/>
    </component>
    <component qname="TouchScreenC" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <configuration/>
    </component>
    <component qname="TouchScreenP" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <module/>
    </component>
    <component qname="TouchScreenC.AdcReadClientC" loc="21(TouchScreenC.AdcReadClientC):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcP" loc="16:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
        <short>&#10; Support component for AdcReadClientC and AdcReadNowClientC.</short>
        <long>&#10; Support component for AdcReadClientC and AdcReadNowClientC.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcC" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <documentation loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
        <short>&#10; HAL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HAL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcP" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc" safe="">
      <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
        <short>&#10; Internal component of the Atmega128 A/D HAL.</short>
        <long>&#10; Internal component of the Atmega128 A/D HAL.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Phil Buonadonna&#10; @author Hu Siquan &#60;husq@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128AdcC" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128AdcP" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc" safe="">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter" loc="89(Atm128AdcC.AdcArbiter):/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:atm128adc.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Queue" loc="42(Atm128AdcC.AdcArbiter.Queue):/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Arbiter" loc="52(Atm128AdcC.AdcArbiter.Arbiter):/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.PM" loc="67(Atm128AdcC.PM):/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.PM.PowerManager" loc="58(Atm128AdcC.PM.PowerManager):/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AdcP" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc" safe="">
      <documentation loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
        <short>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.</short>
        <long>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcP.ArbitrateRead" loc="23(WireAdcP.ArbitrateRead):/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LCD128x64C" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64C.nc">
      <configuration/>
    </component>
    <component qname="LCD128x64P" loc="23:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <module/>
    </component>
    <component qname="BlinkAppC.TIMER0" loc="44(BlinkAppC.TIMER0):/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmSyncC" loc="30(AlarmCounterMilliP.Atm128AlarmSyncC):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmSyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP" loc="30(AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmSyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2ade43b74068"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer0SyncC" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer0SyncP" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
        <short>&#10; HPL interface to Atmega128 timer 0 in SYNC mode.</short>
        <long>&#10; HPL interface to Atmega128 timer 0 in SYNC mode. This is a specialised&#10; HPL component that assumes that timer 0 is used in SYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;--> CHANGED TO SYNC-Mode(CPL_CLK)&#9;hglanzer&#10;--> AS0=0 in ASSR&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="UDPC" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDPC.nc">
      <configuration/>
    </component>
    <component qname="UDPP" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDPP.nc">
      <module/>
    </component>
    <component qname="IPC" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IPC.nc">
      <configuration/>
    </component>
    <component qname="IPP" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IPP.nc">
      <module/>
    </component>
    <component qname="IEEE8023C" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023C.nc">
      <configuration/>
    </component>
    <component qname="IEEE8023P" loc="5:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023P.nc">
      <module/>
    </component>
    <component qname="Atm128SpiC" loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <documentation loc="66:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
        <short>&#10; The HAL of the SPI bus on the atm128.</short>
        <long>&#10; The HAL of the SPI bus on the atm128.&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiC.nc,v 1.7 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10; @author Joe Polastre&#10; @date   September 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128SpiP" loc="89:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc" safe="">
      <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
        <short>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.</short>
        <long>&#10; Primitives for accessing the SPI module on ATmega128&#10; microcontroller.  This module assumes the bus has been reserved and&#10; checks that the bus owner is in fact the person using the bus.&#10; SpiPacket provides an asynchronous send interface where the&#10; transmit data length is equal to the receive data length, while&#10; SpiByte provides an interface for sending a single byte&#10; synchronously. SpiByte allows a component to send a few bytes&#10; in a simple fashion: if more than a handful need to be sent,&#10; SpiPacket should be used.&#10;&#10;&#10; &#60;pre>&#10;  $Id: Atm128SpiP.nc,v 1.12 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128SpiC" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
        <short>&#10; Configuration encapsulating the basic SPI HPL for the atm128.</short>
        <long>&#10; Configuration encapsulating the basic SPI HPL for the atm128.&#10;&#10; &#60;pre>&#10; $Id: HplAtm128SpiC.nc,v 1.5 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128SpiP" loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc" safe="">
      <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
        <short>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.</short>
        <long>&#10; Implementation of the SPI bus abstraction for the atm128&#10; microcontroller.&#10;&#10; @author Philip Levis&#10; @author Martin Turon&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter" loc="83(Atm128SpiC.Arbiter):/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
      <documentation loc="62:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleFcfsArbiterC"/>
        <arguments>
          <value cst="S:Atm128SpiC.Resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Queue" loc="42(Atm128SpiC.Arbiter.Queue):/homes/hglanzer/GIT/tinyos/tos/system/FcfsResourceQueueC.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/system/FcfsResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128SpiC.Arbiter.Arbiter" loc="49(Atm128SpiC.Arbiter.Arbiter):/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
      <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SimpleArbiterP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
        <short>&#10; Component providing access to all external interrupt pins on ATmega128.</short>
        <long>&#10; Component providing access to all external interrupt pins on ATmega128.&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128InterruptSigP" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10; Exposes just the interrupt vector routine for &#10; easy linking to generic components.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin0" loc="39(HplAtm128InterruptC.IntPin0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin1" loc="39(HplAtm128InterruptC.IntPin1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin2" loc="39(HplAtm128InterruptC.IntPin2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin3" loc="39(HplAtm128InterruptC.IntPin3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:106">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin4" loc="39(HplAtm128InterruptC.IntPin4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:90">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin5" loc="39(HplAtm128InterruptC.IntPin5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:90">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin6" loc="39(HplAtm128InterruptC.IntPin6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:90">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128InterruptC.IntPin7" loc="39(HplAtm128InterruptC.IntPin7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128InterruptPinP"/>
        <arguments>
          <value cst="I:90">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2ade4367cba0" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2ade43686020" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2ade43686368" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2ade4368a610" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2ade4368a978" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2ade4368ace0" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2ade43687060" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2ade4371e020" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2ade4371e388" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2ade4371e6f0" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2ade4371ea20" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadClientC" loc="21:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc" abstract="">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinArbiterC" loc="89:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc" abstract="">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x2ade439731c8" loc="89:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
          <component-ref qname="RoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x2ade43983dd8" loc="42:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x2ade43998c50" loc="52:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ArbitratedReadC" loc="23:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc" abstract="" safe="">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0x2ade43a319d0" loc="23:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0x2ade43a319d0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmSyncC" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc" abstract="">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x2ade43b74068" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
          <component-ref qname="Atm128AlarmSyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2ade43b74068"/></type-var>
        </typedef>
        <constant name="divider" ref="0x2ade43b74358" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
          <component-ref qname="Atm128AlarmSyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmSyncP" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc" abstract="" safe="">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x2ade43b8e748" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
          <component-ref qname="Atm128AlarmSyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2ade43b8e748"/></type-var>
        </typedef>
        <constant name="divider" ref="0x2ade43b8ea38" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
          <component-ref qname="Atm128AlarmSyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2ade43b67c68" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2ade43b67c68"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2ade43c9ecd0" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2ade43c9ecd0"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x2ade43c9b020" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2ade43cec510" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2ade43cec510"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleFcfsArbiterC" loc="83:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc" abstract="">
      <documentation loc="62:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and Resource&#10; Controller interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x2ade43f13578" loc="83:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
          <component-ref qname="SimpleFcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:/homes/hglanzer/GIT/tinyos/tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/system/FcfsResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="size" ref="0x2ade43f0edf0" loc="42:/homes/hglanzer/GIT/tinyos/tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SimpleArbiterP" loc="49:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc" abstract="" safe="">
      <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceRequested&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; An queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource becomes idle and any&#10; user can put in a request and immediately receive access to the&#10; Resource.&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128InterruptPinP" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc" abstract="" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
        <short>&#10; Interrupt interface access for interrupt capable GPIO pins.</short>
        <long>&#10; Interrupt interface access for interrupt capable GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="ctrl_addr" ref="0x2ade43f877e8" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
        <constant name="edge0bit" ref="0x2ade43f87b50" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
        <constant name="edge1bit" ref="0x2ade43fb7020" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2ade43fb7350" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
          <component-ref qname="HplAtm128InterruptPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x2ade43619620" loc="58:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2ade43619620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade43619970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2ade4361a220" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2ade4361a220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2ade4361a570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2ade43617380" loc="52:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2ade43617380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade436176d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ade4361c620" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ade4361c620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade4361c970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2ade4361f618" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2ade4361f618"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2ade4361f968"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2ade4361faf0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2ade4361fc78"/>
        <function-ref name="actualMicro" scoped="" ref="0x2ade4361fe00"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2ade43617020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x2ade4362bca0" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x2ade4362bca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade4362a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ade4362b600" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ade4362b600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade4362b950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x2ade4362a398" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x2ade4362a398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade4362a6e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2ade43631360" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2ade43631360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade436316b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2ade43624b98" loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2ade43624b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade43631020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2ade4362db08" loc="19:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2ade4362db08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade4362de58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x2ade436358d8" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x2ade436358d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43635c28"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43635db0"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4362d020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4362d1a8"/>
        <function-ref name="get" scoped="" ref="0x2ade4362d330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4362d4b8"/>
        <function-ref name="set" scoped="" ref="0x2ade4362d640"/>
        <function-ref name="clr" scoped="" ref="0x2ade4362d7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2ade4362e698" loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2ade4362e698"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade4362e9e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x2ade43676af0" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x2ade43676af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436755e8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43675770"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436758f8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43675a80"/>
        <function-ref name="get" scoped="" ref="0x2ade43675c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43675d90"/>
        <function-ref name="set" scoped="" ref="0x2ade43674020"/>
        <function-ref name="clr" scoped="" ref="0x2ade436741a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x2ade43658658" loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x2ade43658658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436589a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43658b30"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43658cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43658e40"/>
        <function-ref name="get" scoped="" ref="0x2ade43657020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436571a8"/>
        <function-ref name="set" scoped="" ref="0x2ade43657330"/>
        <function-ref name="clr" scoped="" ref="0x2ade436574b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x2ade43669658" loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x2ade43669658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436699a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43669b30"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43669cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43669e40"/>
        <function-ref name="get" scoped="" ref="0x2ade43668020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436681a8"/>
        <function-ref name="set" scoped="" ref="0x2ade43668330"/>
        <function-ref name="clr" scoped="" ref="0x2ade436684b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x2ade4366e348" loc="94:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x2ade4366e348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4366e698"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4366e820"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4366e9a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4366eb30"/>
        <function-ref name="get" scoped="" ref="0x2ade4366ecb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4366ee40"/>
        <function-ref name="set" scoped="" ref="0x2ade4366d020"/>
        <function-ref name="clr" scoped="" ref="0x2ade4366d1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x2ade43644348" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x2ade43644348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43644698"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43644820"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436449a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43644b30"/>
        <function-ref name="get" scoped="" ref="0x2ade43644cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43644e40"/>
        <function-ref name="set" scoped="" ref="0x2ade43643020"/>
        <function-ref name="clr" scoped="" ref="0x2ade436431a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x2ade43670020" loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x2ade43670020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43670370"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436704f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43670680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43670808"/>
        <function-ref name="get" scoped="" ref="0x2ade43670990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43670b18"/>
        <function-ref name="set" scoped="" ref="0x2ade43670ca0"/>
        <function-ref name="clr" scoped="" ref="0x2ade43670e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x2ade43642658" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x2ade43642658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436429a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43642b30"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43642cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43642e40"/>
        <function-ref name="get" scoped="" ref="0x2ade43641020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436411a8"/>
        <function-ref name="set" scoped="" ref="0x2ade43641330"/>
        <function-ref name="clr" scoped="" ref="0x2ade436414b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x2ade436537e0" loc="66:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x2ade436537e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43653b30"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43653cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43653e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43652020"/>
        <function-ref name="get" scoped="" ref="0x2ade436521a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43652330"/>
        <function-ref name="set" scoped="" ref="0x2ade436524b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43652640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x2ade43663af0" loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x2ade43663af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43663e40"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43662020"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436621a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43662330"/>
        <function-ref name="get" scoped="" ref="0x2ade436624b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43662640"/>
        <function-ref name="set" scoped="" ref="0x2ade436627c8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43662950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x2ade43666af0" loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x2ade43666af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43666e40"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43665020"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436651a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43665330"/>
        <function-ref name="get" scoped="" ref="0x2ade436654b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43665640"/>
        <function-ref name="set" scoped="" ref="0x2ade436657c8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43665950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x2ade4363caf0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x2ade4363caf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4363ce40"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4363b020"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4363b1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4363b330"/>
        <function-ref name="get" scoped="" ref="0x2ade4363b4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4363b640"/>
        <function-ref name="set" scoped="" ref="0x2ade4363b7c8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4363b950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x2ade4364daf0" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x2ade4364daf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4364de40"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4364c020"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4364c1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4364c330"/>
        <function-ref name="get" scoped="" ref="0x2ade4364c4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4364c640"/>
        <function-ref name="set" scoped="" ref="0x2ade4364c7c8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4364c950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x2ade43650c78" loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x2ade43650c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4364f020"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4364f1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4364f330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4364f4b8"/>
        <function-ref name="get" scoped="" ref="0x2ade4364f640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4364f7c8"/>
        <function-ref name="set" scoped="" ref="0x2ade4364f950"/>
        <function-ref name="clr" scoped="" ref="0x2ade4364fad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x2ade4365f020" loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x2ade4365f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4365f370"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4365f4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4365f680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4365f808"/>
        <function-ref name="get" scoped="" ref="0x2ade4365f990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4365fb18"/>
        <function-ref name="set" scoped="" ref="0x2ade4365fca0"/>
        <function-ref name="clr" scoped="" ref="0x2ade4365fe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x2ade4366b7e0" loc="97:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x2ade4366b7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4366bb30"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4366bcb8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4366be40"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43677020"/>
        <function-ref name="get" scoped="" ref="0x2ade436771a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43677330"/>
        <function-ref name="set" scoped="" ref="0x2ade436774b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43677640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x2ade436727e0" loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x2ade436727e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43672b30"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43672cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43672e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4367f020"/>
        <function-ref name="get" scoped="" ref="0x2ade4367f1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4367f330"/>
        <function-ref name="set" scoped="" ref="0x2ade4367f4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4367f640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x2ade4365d348" loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x2ade4365d348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4365d698"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4365d820"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4365d9a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4365db30"/>
        <function-ref name="get" scoped="" ref="0x2ade4365dcb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4365de40"/>
        <function-ref name="set" scoped="" ref="0x2ade4366a020"/>
        <function-ref name="clr" scoped="" ref="0x2ade4366a1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x2ade43646020" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x2ade43646020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43646370"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436464f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43646680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43646808"/>
        <function-ref name="get" scoped="" ref="0x2ade43646990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43646b18"/>
        <function-ref name="set" scoped="" ref="0x2ade43646ca0"/>
        <function-ref name="clr" scoped="" ref="0x2ade43646e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x2ade436491a0" loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x2ade436491a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436494f0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43649678"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43649800"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43649988"/>
        <function-ref name="get" scoped="" ref="0x2ade43649b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43649c98"/>
        <function-ref name="set" scoped="" ref="0x2ade43649e20"/>
        <function-ref name="clr" scoped="" ref="0x2ade43648020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x2ade436744d0" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x2ade436744d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43674820"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436749a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43674b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43674cb8"/>
        <function-ref name="get" scoped="" ref="0x2ade43674e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43673020"/>
        <function-ref name="set" scoped="" ref="0x2ade436731a8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43673330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x2ade436554d0" loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x2ade436554d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43655820"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436559a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43655b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43655cb8"/>
        <function-ref name="get" scoped="" ref="0x2ade43655e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43654020"/>
        <function-ref name="set" scoped="" ref="0x2ade436541a8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43654330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x2ade436577e0" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x2ade436577e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43657b30"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43657cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43657e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43656020"/>
        <function-ref name="get" scoped="" ref="0x2ade436561a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43656330"/>
        <function-ref name="set" scoped="" ref="0x2ade436564b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43656640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x2ade436687e0" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x2ade436687e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43668b30"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43668cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43668e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43667020"/>
        <function-ref name="get" scoped="" ref="0x2ade436671a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43667330"/>
        <function-ref name="set" scoped="" ref="0x2ade436674b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43667640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x2ade4366d4d0" loc="95:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x2ade4366d4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4366d820"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4366d9a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4366db30"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4366dcb8"/>
        <function-ref name="get" scoped="" ref="0x2ade4366de40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4366c020"/>
        <function-ref name="set" scoped="" ref="0x2ade4366c1a8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4366c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x2ade436434d0" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x2ade436434d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43643820"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436439a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43643b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43643cb8"/>
        <function-ref name="get" scoped="" ref="0x2ade43643e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43642020"/>
        <function-ref name="set" scoped="" ref="0x2ade436421a8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43642330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x2ade436417e0" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x2ade436417e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43641b30"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43641cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43641e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4364e020"/>
        <function-ref name="get" scoped="" ref="0x2ade4364e1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4364e330"/>
        <function-ref name="set" scoped="" ref="0x2ade4364e4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4364e640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x2ade43652968" loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x2ade43652968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43652cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43652e40"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43651020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436511a8"/>
        <function-ref name="get" scoped="" ref="0x2ade43651330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436514b8"/>
        <function-ref name="set" scoped="" ref="0x2ade43651640"/>
        <function-ref name="clr" scoped="" ref="0x2ade436517c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x2ade43662c78" loc="78:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x2ade43662c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43661020"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436611a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43661330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436614b8"/>
        <function-ref name="get" scoped="" ref="0x2ade43661640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436617c8"/>
        <function-ref name="set" scoped="" ref="0x2ade43661950"/>
        <function-ref name="clr" scoped="" ref="0x2ade43661ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x2ade43665c78" loc="89:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x2ade43665c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43664020"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436641a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43664330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436644b8"/>
        <function-ref name="get" scoped="" ref="0x2ade43664640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436647c8"/>
        <function-ref name="set" scoped="" ref="0x2ade43664950"/>
        <function-ref name="clr" scoped="" ref="0x2ade43664ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x2ade4363bc78" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x2ade4363bc78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4363a020"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4363a1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4363a330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4363a4b8"/>
        <function-ref name="get" scoped="" ref="0x2ade4363a640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4363a7c8"/>
        <function-ref name="set" scoped="" ref="0x2ade4363a950"/>
        <function-ref name="clr" scoped="" ref="0x2ade4363aad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x2ade4364cc78" loc="59:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x2ade4364cc78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4364b0f0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4364b278"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4364b400"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4364b588"/>
        <function-ref name="get" scoped="" ref="0x2ade4364b710"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4364b898"/>
        <function-ref name="set" scoped="" ref="0x2ade4364ba20"/>
        <function-ref name="clr" scoped="" ref="0x2ade4364bba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x2ade4364fe00" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x2ade4364fe00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4365c1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4365c330"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4365c4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4365c640"/>
        <function-ref name="get" scoped="" ref="0x2ade4365c7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4365c950"/>
        <function-ref name="set" scoped="" ref="0x2ade4365cad8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4365cc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x2ade43677968" loc="98:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x2ade43677968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43677cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43677e40"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43676020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436761a8"/>
        <function-ref name="get" scoped="" ref="0x2ade43676330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436764b8"/>
        <function-ref name="set" scoped="" ref="0x2ade43676640"/>
        <function-ref name="clr" scoped="" ref="0x2ade436767c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x2ade436591a0" loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x2ade436591a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436596f0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43659878"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43659a00"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43659b88"/>
        <function-ref name="get" scoped="" ref="0x2ade43659d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43658020"/>
        <function-ref name="set" scoped="" ref="0x2ade436581a8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43658330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x2ade4366a4d0" loc="84:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x2ade4366a4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4366a820"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4366a9a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4366ab30"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4366acb8"/>
        <function-ref name="get" scoped="" ref="0x2ade4366ae40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43669020"/>
        <function-ref name="set" scoped="" ref="0x2ade436691a8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43669330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x2ade4366f1a0" loc="93:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x2ade4366f1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4366f4f0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4366f678"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4366f800"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4366f988"/>
        <function-ref name="get" scoped="" ref="0x2ade4366fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4366fc98"/>
        <function-ref name="set" scoped="" ref="0x2ade4366fe20"/>
        <function-ref name="clr" scoped="" ref="0x2ade4366e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x2ade4367f968" loc="104:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x2ade4367f968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4367fcb8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4367fe40"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4367e020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4367e1a8"/>
        <function-ref name="get" scoped="" ref="0x2ade4367e330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4367e4b8"/>
        <function-ref name="set" scoped="" ref="0x2ade4367e640"/>
        <function-ref name="clr" scoped="" ref="0x2ade4367e7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x2ade436451a0" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x2ade436451a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436454f0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43645678"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43645800"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43645988"/>
        <function-ref name="get" scoped="" ref="0x2ade43645b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43645c98"/>
        <function-ref name="set" scoped="" ref="0x2ade43645e20"/>
        <function-ref name="clr" scoped="" ref="0x2ade43644020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x2ade43648348" loc="62:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x2ade43648348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43648698"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43648820"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436489a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43648b30"/>
        <function-ref name="get" scoped="" ref="0x2ade43648cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43648e40"/>
        <function-ref name="set" scoped="" ref="0x2ade43655020"/>
        <function-ref name="clr" scoped="" ref="0x2ade436551a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x2ade43664e00" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x2ade43664e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436711a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43671330"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436714b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43671640"/>
        <function-ref name="get" scoped="" ref="0x2ade436717c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43671950"/>
        <function-ref name="set" scoped="" ref="0x2ade43671ad8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43671c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x2ade43654658" loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x2ade43654658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436549a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43654b30"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43654cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43654e40"/>
        <function-ref name="get" scoped="" ref="0x2ade43653020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436531a8"/>
        <function-ref name="set" scoped="" ref="0x2ade43653330"/>
        <function-ref name="clr" scoped="" ref="0x2ade436534b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x2ade43656968" loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x2ade43656968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43656cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43656e40"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43663020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436631a8"/>
        <function-ref name="get" scoped="" ref="0x2ade43663330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436634b8"/>
        <function-ref name="set" scoped="" ref="0x2ade43663640"/>
        <function-ref name="clr" scoped="" ref="0x2ade436637c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x2ade43667968" loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x2ade43667968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43667cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43667e40"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43666020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436661a8"/>
        <function-ref name="get" scoped="" ref="0x2ade43666330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436664b8"/>
        <function-ref name="set" scoped="" ref="0x2ade43666640"/>
        <function-ref name="clr" scoped="" ref="0x2ade436667c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x2ade4366c658" loc="96:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x2ade4366c658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4366c9a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4366cb30"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4366ccb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4366ce40"/>
        <function-ref name="get" scoped="" ref="0x2ade4366b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4366b1a8"/>
        <function-ref name="set" scoped="" ref="0x2ade4366b330"/>
        <function-ref name="clr" scoped="" ref="0x2ade4366b4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x2ade4362f870" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x2ade4362f870"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4362fbc0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4362fd48"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4363c020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4363c1a8"/>
        <function-ref name="get" scoped="" ref="0x2ade4363c330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4363c4b8"/>
        <function-ref name="set" scoped="" ref="0x2ade4363c640"/>
        <function-ref name="clr" scoped="" ref="0x2ade4363c7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x2ade4364e968" loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x2ade4364e968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4364ecb8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4364ee40"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4364d020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4364d1a8"/>
        <function-ref name="get" scoped="" ref="0x2ade4364d330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4364d4b8"/>
        <function-ref name="set" scoped="" ref="0x2ade4364d640"/>
        <function-ref name="clr" scoped="" ref="0x2ade4364d7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x2ade43651af0" loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x2ade43651af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43651e40"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43650020"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436501a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43650330"/>
        <function-ref name="get" scoped="" ref="0x2ade436504b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43650640"/>
        <function-ref name="set" scoped="" ref="0x2ade436507c8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43650950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x2ade43661e00" loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x2ade43661e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436601a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43660330"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436604b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43660640"/>
        <function-ref name="get" scoped="" ref="0x2ade436607c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43660950"/>
        <function-ref name="set" scoped="" ref="0x2ade43660ad8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43660c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x2ade43673658" loc="102:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x2ade43673658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436739a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43673b30"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43673cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43673e40"/>
        <function-ref name="get" scoped="" ref="0x2ade43672020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436721a8"/>
        <function-ref name="set" scoped="" ref="0x2ade43672330"/>
        <function-ref name="clr" scoped="" ref="0x2ade436724b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x2ade4365e1a0" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x2ade4365e1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4365e4f0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4365e678"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4365e800"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4365e988"/>
        <function-ref name="get" scoped="" ref="0x2ade4365eb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4365ec98"/>
        <function-ref name="set" scoped="" ref="0x2ade4365ee20"/>
        <function-ref name="clr" scoped="" ref="0x2ade4365d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x2ade4365a020" loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x2ade4365a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4365a370"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4365a4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4365a680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4365a808"/>
        <function-ref name="get" scoped="" ref="0x2ade4365a990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4365ab18"/>
        <function-ref name="set" scoped="" ref="0x2ade4365aca0"/>
        <function-ref name="clr" scoped="" ref="0x2ade4365ae28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x2ade4363ae00" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x2ade4363ae00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436471a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43647330"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436474b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43647640"/>
        <function-ref name="get" scoped="" ref="0x2ade436477c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43647950"/>
        <function-ref name="set" scoped="" ref="0x2ade43647ad8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43647c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x2ade4364a020" loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x2ade4364a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4364a370"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4364a4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4364a680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4364a808"/>
        <function-ref name="get" scoped="" ref="0x2ade4364a990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4364ab18"/>
        <function-ref name="set" scoped="" ref="0x2ade4364aca0"/>
        <function-ref name="clr" scoped="" ref="0x2ade4364ae28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2ade436c1120" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2ade436c1120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436c1470"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436c15f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436c1780"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436c1908"/>
        <function-ref name="get" scoped="" ref="0x2ade436c1a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436c1c18"/>
        <function-ref name="set" scoped="" ref="0x2ade436c1da0"/>
        <function-ref name="clr" scoped="" ref="0x2ade436c0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2ade436ce5b8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2ade436ce5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436ce908"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436cea90"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436cec18"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436ceda0"/>
        <function-ref name="get" scoped="" ref="0x2ade436cd020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436cd1a8"/>
        <function-ref name="set" scoped="" ref="0x2ade436cd330"/>
        <function-ref name="clr" scoped="" ref="0x2ade436cd4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2ade436c4dc0" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2ade436c4dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436c3170"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436c32f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436c3480"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436c3608"/>
        <function-ref name="get" scoped="" ref="0x2ade436c3790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436c3918"/>
        <function-ref name="set" scoped="" ref="0x2ade436c3aa0"/>
        <function-ref name="clr" scoped="" ref="0x2ade436c3c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2ade436c02a8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2ade436c02a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436c05f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436c0780"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436c0908"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436c0a90"/>
        <function-ref name="get" scoped="" ref="0x2ade436c0c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436c0da0"/>
        <function-ref name="set" scoped="" ref="0x2ade436bf020"/>
        <function-ref name="clr" scoped="" ref="0x2ade436bf1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2ade436cd740" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2ade436cd740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436cda90"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436cdc18"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436cdda0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436cc020"/>
        <function-ref name="get" scoped="" ref="0x2ade436cc1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436cc330"/>
        <function-ref name="set" scoped="" ref="0x2ade436cc4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade436cc640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2ade436c2020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2ade436c2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436c2370"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436c24f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436c2680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436c2808"/>
        <function-ref name="get" scoped="" ref="0x2ade436c2990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436c2b18"/>
        <function-ref name="set" scoped="" ref="0x2ade436c2ca0"/>
        <function-ref name="clr" scoped="" ref="0x2ade436c2e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2ade436bf430" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2ade436bf430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436bf780"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436bf908"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436bfa90"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436bfc18"/>
        <function-ref name="get" scoped="" ref="0x2ade436bfda0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436ce020"/>
        <function-ref name="set" scoped="" ref="0x2ade436ce1a8"/>
        <function-ref name="clr" scoped="" ref="0x2ade436ce330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2ade436cc8c8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2ade436cc8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436ccc18"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436ccda0"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436cb020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436cb1a8"/>
        <function-ref name="get" scoped="" ref="0x2ade436cb330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436cb4b8"/>
        <function-ref name="set" scoped="" ref="0x2ade436cb640"/>
        <function-ref name="clr" scoped="" ref="0x2ade436cb7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade43ff26a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade43ff26a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43ff29f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43ff2b80"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43ff2d08"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43ff1020"/>
        <function-ref name="get" scoped="" ref="0x2ade43ff11a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43ff1330"/>
        <function-ref name="set" scoped="" ref="0x2ade43ff14b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43ff1640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44029710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44029710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44029a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44029be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44029d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44028020"/>
        <function-ref name="get" scoped="" ref="0x2ade440281a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44028330"/>
        <function-ref name="set" scoped="" ref="0x2ade440284b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44028640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44026710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44026710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44026a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44026be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44026d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44025020"/>
        <function-ref name="get" scoped="" ref="0x2ade440251a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44025330"/>
        <function-ref name="set" scoped="" ref="0x2ade440254b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44025640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44023710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44023710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44023a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44023be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44023d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44021020"/>
        <function-ref name="get" scoped="" ref="0x2ade440211a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44021330"/>
        <function-ref name="set" scoped="" ref="0x2ade440214b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44021640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4401f710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4401f710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4401fa60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4401fbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4401fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4401e020"/>
        <function-ref name="get" scoped="" ref="0x2ade4401e1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4401e330"/>
        <function-ref name="set" scoped="" ref="0x2ade4401e4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4401e640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4401c710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4401c710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4401ca60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4401cbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4401cd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4401b020"/>
        <function-ref name="get" scoped="" ref="0x2ade4401b1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4401b330"/>
        <function-ref name="set" scoped="" ref="0x2ade4401b4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4401b640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44019710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44019710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44019a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44019be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44019d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44018020"/>
        <function-ref name="get" scoped="" ref="0x2ade440181a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44018330"/>
        <function-ref name="set" scoped="" ref="0x2ade440184b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44018640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44016710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44016710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44016a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44016be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44016d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44015020"/>
        <function-ref name="get" scoped="" ref="0x2ade440151a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44015330"/>
        <function-ref name="set" scoped="" ref="0x2ade440154b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44015640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2ade436d3bd8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2ade436d3bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436d2020"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436d21a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436d2330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436d24b8"/>
        <function-ref name="get" scoped="" ref="0x2ade436d2640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436d27c8"/>
        <function-ref name="set" scoped="" ref="0x2ade436d2950"/>
        <function-ref name="clr" scoped="" ref="0x2ade436d2ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2ade436cf020" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2ade436cf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436cf370"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436cf4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436cf680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436cf808"/>
        <function-ref name="get" scoped="" ref="0x2ade436cf990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436cfb18"/>
        <function-ref name="set" scoped="" ref="0x2ade436cfca0"/>
        <function-ref name="clr" scoped="" ref="0x2ade436cfe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2ade436d5930" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2ade436d5930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436d5c80"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436d5e08"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436d4020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436d41a8"/>
        <function-ref name="get" scoped="" ref="0x2ade436d4330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436d44b8"/>
        <function-ref name="set" scoped="" ref="0x2ade436d4640"/>
        <function-ref name="clr" scoped="" ref="0x2ade436d47c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2ade436d2d60" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2ade436d2d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436d10d8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436d1260"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436d13e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436d1570"/>
        <function-ref name="get" scoped="" ref="0x2ade436d16f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436d1880"/>
        <function-ref name="set" scoped="" ref="0x2ade436d1a08"/>
        <function-ref name="clr" scoped="" ref="0x2ade436d1b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2ade436de120" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2ade436de120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436de470"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436de5f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436de780"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436de908"/>
        <function-ref name="get" scoped="" ref="0x2ade436dea90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436dec18"/>
        <function-ref name="set" scoped="" ref="0x2ade436deda0"/>
        <function-ref name="clr" scoped="" ref="0x2ade436dd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2ade436d4a50" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2ade436d4a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436d4da0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436d3020"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436d31a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436d3330"/>
        <function-ref name="get" scoped="" ref="0x2ade436d34b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436d3640"/>
        <function-ref name="set" scoped="" ref="0x2ade436d37c8"/>
        <function-ref name="clr" scoped="" ref="0x2ade436d3950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2ade436d1e18" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2ade436d1e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436d01a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436d0330"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436d04b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436d0640"/>
        <function-ref name="get" scoped="" ref="0x2ade436d07c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436d0950"/>
        <function-ref name="set" scoped="" ref="0x2ade436d0ad8"/>
        <function-ref name="clr" scoped="" ref="0x2ade436d0c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2ade436dd2a8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2ade436dd2a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436dd5f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436dd780"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436dd908"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436dda90"/>
        <function-ref name="get" scoped="" ref="0x2ade436ddc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436ddda0"/>
        <function-ref name="set" scoped="" ref="0x2ade436dc020"/>
        <function-ref name="clr" scoped="" ref="0x2ade436dc1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade440676a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade440676a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade440679f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44067b80"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44067d08"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44066020"/>
        <function-ref name="get" scoped="" ref="0x2ade440661a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44066330"/>
        <function-ref name="set" scoped="" ref="0x2ade440664b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44066640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44064710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44064710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44064a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44064be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44064d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44063020"/>
        <function-ref name="get" scoped="" ref="0x2ade440631a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44063330"/>
        <function-ref name="set" scoped="" ref="0x2ade440634b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44063640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44061710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44061710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44061a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44061be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44061d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44096020"/>
        <function-ref name="get" scoped="" ref="0x2ade440961a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44096330"/>
        <function-ref name="set" scoped="" ref="0x2ade440964b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44096640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44094710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44094710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44094a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44094be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44094d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44092020"/>
        <function-ref name="get" scoped="" ref="0x2ade440921a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44092330"/>
        <function-ref name="set" scoped="" ref="0x2ade440924b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44092640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44090710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44090710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44090a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44090be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44090d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4408f020"/>
        <function-ref name="get" scoped="" ref="0x2ade4408f1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4408f330"/>
        <function-ref name="set" scoped="" ref="0x2ade4408f4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4408f640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4408d710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4408d710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4408da60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4408dbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4408dd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4408c020"/>
        <function-ref name="get" scoped="" ref="0x2ade4408c1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4408c330"/>
        <function-ref name="set" scoped="" ref="0x2ade4408c4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4408c640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4408a710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4408a710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4408aa60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4408abe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4408ad70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44089020"/>
        <function-ref name="get" scoped="" ref="0x2ade440891a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44089330"/>
        <function-ref name="set" scoped="" ref="0x2ade440894b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44089640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44087710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44087710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44087a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44087be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44087d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44086020"/>
        <function-ref name="get" scoped="" ref="0x2ade440861a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44086330"/>
        <function-ref name="set" scoped="" ref="0x2ade440864b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44086640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2ade436e4740" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2ade436e4740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436e4a90"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436e4c18"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436e4da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436e3020"/>
        <function-ref name="get" scoped="" ref="0x2ade436e31a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436e3330"/>
        <function-ref name="set" scoped="" ref="0x2ade436e34b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade436e3640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2ade436e1bd8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2ade436e1bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436df020"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436df1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436df330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436df4b8"/>
        <function-ref name="get" scoped="" ref="0x2ade436df640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436df7c8"/>
        <function-ref name="set" scoped="" ref="0x2ade436df950"/>
        <function-ref name="clr" scoped="" ref="0x2ade436dfad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2ade436e6500" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2ade436e6500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436e6850"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436e69d8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436e6b60"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436e6ce8"/>
        <function-ref name="get" scoped="" ref="0x2ade436e6e70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436e5020"/>
        <function-ref name="set" scoped="" ref="0x2ade436e51a8"/>
        <function-ref name="clr" scoped="" ref="0x2ade436e5330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2ade436e38c8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2ade436e38c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436e3c18"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436e3da0"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436e2020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436e21a8"/>
        <function-ref name="get" scoped="" ref="0x2ade436e2330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436e24b8"/>
        <function-ref name="set" scoped="" ref="0x2ade436e2640"/>
        <function-ref name="clr" scoped="" ref="0x2ade436e27c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2ade436dfd60" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2ade436dfd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436ee0d8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436ee260"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436ee3e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436ee570"/>
        <function-ref name="get" scoped="" ref="0x2ade436ee6f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436ee880"/>
        <function-ref name="set" scoped="" ref="0x2ade436eea08"/>
        <function-ref name="clr" scoped="" ref="0x2ade436eeb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2ade436e55b8" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2ade436e55b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436e5908"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436e5a90"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436e5c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436e5da0"/>
        <function-ref name="get" scoped="" ref="0x2ade436e4020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436e41a8"/>
        <function-ref name="set" scoped="" ref="0x2ade436e4330"/>
        <function-ref name="clr" scoped="" ref="0x2ade436e44b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2ade436e2a50" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2ade436e2a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436e2da0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436e1020"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436e11a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436e1330"/>
        <function-ref name="get" scoped="" ref="0x2ade436e14b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436e1640"/>
        <function-ref name="set" scoped="" ref="0x2ade436e17c8"/>
        <function-ref name="clr" scoped="" ref="0x2ade436e1950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2ade436eee18" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2ade436eee18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436ed1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436ed330"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436ed4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436ed640"/>
        <function-ref name="get" scoped="" ref="0x2ade436ed7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436ed950"/>
        <function-ref name="set" scoped="" ref="0x2ade436edad8"/>
        <function-ref name="clr" scoped="" ref="0x2ade436edc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade440dd6a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade440dd6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade440dd9f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade440ddb80"/>
        <function-ref name="toggle" scoped="" ref="0x2ade440ddd08"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade440dc020"/>
        <function-ref name="get" scoped="" ref="0x2ade440dc1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade440dc330"/>
        <function-ref name="set" scoped="" ref="0x2ade440dc4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade440dc640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade440da710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade440da710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade440daa60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade440dabe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade440dad70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade440d9020"/>
        <function-ref name="get" scoped="" ref="0x2ade440d91a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade440d9330"/>
        <function-ref name="set" scoped="" ref="0x2ade440d94b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade440d9640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade440d7710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade440d7710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade440d7a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade440d7be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade440d7d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade440d6020"/>
        <function-ref name="get" scoped="" ref="0x2ade440d61a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade440d6330"/>
        <function-ref name="set" scoped="" ref="0x2ade440d64b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade440d6640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade440d4710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade440d4710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade440d4a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade440d4be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade440d4d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade440d3020"/>
        <function-ref name="get" scoped="" ref="0x2ade440d31a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade440d3330"/>
        <function-ref name="set" scoped="" ref="0x2ade440d34b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade440d3640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade440d1710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade440d1710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade440d1a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade440d1be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade440d1d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade440cf020"/>
        <function-ref name="get" scoped="" ref="0x2ade440cf1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade440cf330"/>
        <function-ref name="set" scoped="" ref="0x2ade440cf4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade440cf640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44105710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44105710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44105a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44105be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44105d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44104020"/>
        <function-ref name="get" scoped="" ref="0x2ade441041a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44104330"/>
        <function-ref name="set" scoped="" ref="0x2ade441044b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44104640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44102710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44102710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44102a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44102be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44102d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44101020"/>
        <function-ref name="get" scoped="" ref="0x2ade441011a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44101330"/>
        <function-ref name="set" scoped="" ref="0x2ade441014b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44101640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade440ff710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade440ff710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade440ffa60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade440ffbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade440ffd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade440fe020"/>
        <function-ref name="get" scoped="" ref="0x2ade440fe1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade440fe330"/>
        <function-ref name="set" scoped="" ref="0x2ade440fe4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade440fe640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2ade436f5120" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2ade436f5120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436f5470"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436f55f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436f5780"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436f5908"/>
        <function-ref name="get" scoped="" ref="0x2ade436f5a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436f5c18"/>
        <function-ref name="set" scoped="" ref="0x2ade436f5da0"/>
        <function-ref name="clr" scoped="" ref="0x2ade436f3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2ade436f15b8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2ade436f15b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436f1908"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436f1a90"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436f1c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436f1da0"/>
        <function-ref name="get" scoped="" ref="0x2ade436f0020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436f01a8"/>
        <function-ref name="set" scoped="" ref="0x2ade436f0330"/>
        <function-ref name="clr" scoped="" ref="0x2ade436f04b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2ade436e8e40" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2ade436e8e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436e71c0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436e7348"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436e74d0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436e7658"/>
        <function-ref name="get" scoped="" ref="0x2ade436e77e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436e7968"/>
        <function-ref name="set" scoped="" ref="0x2ade436e7af0"/>
        <function-ref name="clr" scoped="" ref="0x2ade436e7c78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2ade436f32a8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2ade436f32a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436f35f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436f3780"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436f3908"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436f3a90"/>
        <function-ref name="get" scoped="" ref="0x2ade436f3c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436f3da0"/>
        <function-ref name="set" scoped="" ref="0x2ade436f2020"/>
        <function-ref name="clr" scoped="" ref="0x2ade436f21a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2ade436f0740" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2ade436f0740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436f0a90"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436f0c18"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436f0da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436ef020"/>
        <function-ref name="get" scoped="" ref="0x2ade436ef1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436ef330"/>
        <function-ref name="set" scoped="" ref="0x2ade436ef4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade436ef640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2ade436f6020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2ade436f6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436f6370"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436f64f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436f6680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436f6808"/>
        <function-ref name="get" scoped="" ref="0x2ade436f6990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436f6b18"/>
        <function-ref name="set" scoped="" ref="0x2ade436f6ca0"/>
        <function-ref name="clr" scoped="" ref="0x2ade436f6e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2ade436f2430" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2ade436f2430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436f2780"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436f2908"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436f2a90"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436f2c18"/>
        <function-ref name="get" scoped="" ref="0x2ade436f2da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436f1020"/>
        <function-ref name="set" scoped="" ref="0x2ade436f11a8"/>
        <function-ref name="clr" scoped="" ref="0x2ade436f1330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2ade436ef8c8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2ade436ef8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436efc18"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436efda0"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436fe020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436fe1a8"/>
        <function-ref name="get" scoped="" ref="0x2ade436fe330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436fe4b8"/>
        <function-ref name="set" scoped="" ref="0x2ade436fe640"/>
        <function-ref name="clr" scoped="" ref="0x2ade436fe7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4415b6a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4415b6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4415b9f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4415bb80"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4415bd08"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4415a020"/>
        <function-ref name="get" scoped="" ref="0x2ade4415a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4415a330"/>
        <function-ref name="set" scoped="" ref="0x2ade4415a4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4415a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44158710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44158710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44158a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44158be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44158d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44157020"/>
        <function-ref name="get" scoped="" ref="0x2ade441571a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44157330"/>
        <function-ref name="set" scoped="" ref="0x2ade441574b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44157640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44155710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44155710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44155a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44155be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44155d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44154020"/>
        <function-ref name="get" scoped="" ref="0x2ade441541a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44154330"/>
        <function-ref name="set" scoped="" ref="0x2ade441544b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44154640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44152710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44152710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44152a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44152be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44152d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44151020"/>
        <function-ref name="get" scoped="" ref="0x2ade441511a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44151330"/>
        <function-ref name="set" scoped="" ref="0x2ade441514b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44151640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4414f710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4414f710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4414fa60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4414fbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4414fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4414d020"/>
        <function-ref name="get" scoped="" ref="0x2ade4414d1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4414d330"/>
        <function-ref name="set" scoped="" ref="0x2ade4414d4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4414d640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4414b710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4414b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4414ba60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4414bbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4414bd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4414a020"/>
        <function-ref name="get" scoped="" ref="0x2ade4414a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4414a330"/>
        <function-ref name="set" scoped="" ref="0x2ade4414a4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4414a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44148710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44148710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44148a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44148be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44148d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44147020"/>
        <function-ref name="get" scoped="" ref="0x2ade441471a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44147330"/>
        <function-ref name="set" scoped="" ref="0x2ade441474b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44147640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44145710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44145710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44145a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44145be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44145d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44144020"/>
        <function-ref name="get" scoped="" ref="0x2ade441441a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44144330"/>
        <function-ref name="set" scoped="" ref="0x2ade441444b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44144640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2ade43706bd8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2ade43706bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43705020"/>
        <function-ref name="isInput" scoped="" ref="0x2ade437051a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43705330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade437054b8"/>
        <function-ref name="get" scoped="" ref="0x2ade43705640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade437057c8"/>
        <function-ref name="set" scoped="" ref="0x2ade43705950"/>
        <function-ref name="clr" scoped="" ref="0x2ade43705ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2ade43702020" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2ade43702020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43702370"/>
        <function-ref name="isInput" scoped="" ref="0x2ade437024f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43702680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43702808"/>
        <function-ref name="get" scoped="" ref="0x2ade43702990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43702b18"/>
        <function-ref name="set" scoped="" ref="0x2ade43702ca0"/>
        <function-ref name="clr" scoped="" ref="0x2ade43702e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2ade436f8930" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2ade436f8930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436f8c80"/>
        <function-ref name="isInput" scoped="" ref="0x2ade436f8e08"/>
        <function-ref name="toggle" scoped="" ref="0x2ade436f7020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade436f71a8"/>
        <function-ref name="get" scoped="" ref="0x2ade436f7330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade436f74b8"/>
        <function-ref name="set" scoped="" ref="0x2ade436f7640"/>
        <function-ref name="clr" scoped="" ref="0x2ade436f77c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2ade43705d60" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2ade43705d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade437040d8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43704260"/>
        <function-ref name="toggle" scoped="" ref="0x2ade437043e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43704570"/>
        <function-ref name="get" scoped="" ref="0x2ade437046f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43704880"/>
        <function-ref name="set" scoped="" ref="0x2ade43704a08"/>
        <function-ref name="clr" scoped="" ref="0x2ade43704b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2ade43701120" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2ade43701120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43701470"/>
        <function-ref name="isInput" scoped="" ref="0x2ade437015f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43701780"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43701908"/>
        <function-ref name="get" scoped="" ref="0x2ade43701a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43701c18"/>
        <function-ref name="set" scoped="" ref="0x2ade43701da0"/>
        <function-ref name="clr" scoped="" ref="0x2ade43700020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2ade436f7a50" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2ade436f7a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade436f7da0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43706020"/>
        <function-ref name="toggle" scoped="" ref="0x2ade437061a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43706330"/>
        <function-ref name="get" scoped="" ref="0x2ade437064b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43706640"/>
        <function-ref name="set" scoped="" ref="0x2ade437067c8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43706950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2ade43704e18" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2ade43704e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade437031a8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43703330"/>
        <function-ref name="toggle" scoped="" ref="0x2ade437034b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43703640"/>
        <function-ref name="get" scoped="" ref="0x2ade437037c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43703950"/>
        <function-ref name="set" scoped="" ref="0x2ade43703ad8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43703c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2ade437002a8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2ade437002a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade437005f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43700780"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43700908"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43700a90"/>
        <function-ref name="get" scoped="" ref="0x2ade43700c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43700da0"/>
        <function-ref name="set" scoped="" ref="0x2ade436ff020"/>
        <function-ref name="clr" scoped="" ref="0x2ade436ff1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade441a36a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade441a36a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade441a39f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade441a3b80"/>
        <function-ref name="toggle" scoped="" ref="0x2ade441a3d08"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade441a2020"/>
        <function-ref name="get" scoped="" ref="0x2ade441a21a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade441a2330"/>
        <function-ref name="set" scoped="" ref="0x2ade441a24b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade441a2640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade441a0710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade441a0710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade441a0a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade441a0be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade441a0d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4419f020"/>
        <function-ref name="get" scoped="" ref="0x2ade4419f1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4419f330"/>
        <function-ref name="set" scoped="" ref="0x2ade4419f4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4419f640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4419d710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4419d710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4419da60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4419dbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4419dd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4419c020"/>
        <function-ref name="get" scoped="" ref="0x2ade4419c1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4419c330"/>
        <function-ref name="set" scoped="" ref="0x2ade4419c4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4419c640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4419a710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4419a710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4419aa60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4419abe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4419ad70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44199020"/>
        <function-ref name="get" scoped="" ref="0x2ade441991a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44199330"/>
        <function-ref name="set" scoped="" ref="0x2ade441994b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44199640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade441d3710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade441d3710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade441d3a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade441d3be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade441d3d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade441d2020"/>
        <function-ref name="get" scoped="" ref="0x2ade441d21a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade441d2330"/>
        <function-ref name="set" scoped="" ref="0x2ade441d24b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade441d2640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade441d0710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade441d0710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade441d0a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade441d0be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade441d0d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade441ce020"/>
        <function-ref name="get" scoped="" ref="0x2ade441ce1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade441ce330"/>
        <function-ref name="set" scoped="" ref="0x2ade441ce4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade441ce640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade441cc710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade441cc710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade441cca60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade441ccbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade441ccd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade441cb020"/>
        <function-ref name="get" scoped="" ref="0x2ade441cb1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade441cb330"/>
        <function-ref name="set" scoped="" ref="0x2ade441cb4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade441cb640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade441c9710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade441c9710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade441c9a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade441c9be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade441c9d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade441c8020"/>
        <function-ref name="get" scoped="" ref="0x2ade441c81a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade441c8330"/>
        <function-ref name="set" scoped="" ref="0x2ade441c84b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade441c8640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2ade43708430" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2ade43708430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43708780"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43708908"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43708a90"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43708c18"/>
        <function-ref name="get" scoped="" ref="0x2ade43708da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43707020"/>
        <function-ref name="set" scoped="" ref="0x2ade437071a8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43707330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2ade437178c8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2ade437178c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43717c18"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43717da0"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43716020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade437161a8"/>
        <function-ref name="get" scoped="" ref="0x2ade43716330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade437164b8"/>
        <function-ref name="set" scoped="" ref="0x2ade43716640"/>
        <function-ref name="clr" scoped="" ref="0x2ade437167c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2ade4370a1e8" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2ade4370a1e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4370a538"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4370a6c0"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4370a848"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4370a9d0"/>
        <function-ref name="get" scoped="" ref="0x2ade4370ab58"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4370ace0"/>
        <function-ref name="set" scoped="" ref="0x2ade4370ae68"/>
        <function-ref name="clr" scoped="" ref="0x2ade43709020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2ade437075b8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2ade437075b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43707908"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43707a90"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43707c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43707da0"/>
        <function-ref name="get" scoped="" ref="0x2ade43718020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade437181a8"/>
        <function-ref name="set" scoped="" ref="0x2ade43718330"/>
        <function-ref name="clr" scoped="" ref="0x2ade437184b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2ade43716a50" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2ade43716a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43716da0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43715020"/>
        <function-ref name="toggle" scoped="" ref="0x2ade437151a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43715330"/>
        <function-ref name="get" scoped="" ref="0x2ade437154b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43715640"/>
        <function-ref name="set" scoped="" ref="0x2ade437157c8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43715950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2ade437092a8" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2ade437092a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade437095f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43709780"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43709908"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43709a90"/>
        <function-ref name="get" scoped="" ref="0x2ade43709c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43709da0"/>
        <function-ref name="set" scoped="" ref="0x2ade43708020"/>
        <function-ref name="clr" scoped="" ref="0x2ade437081a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2ade43718740" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2ade43718740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43718a90"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43718c18"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43718da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43717020"/>
        <function-ref name="get" scoped="" ref="0x2ade437171a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43717330"/>
        <function-ref name="set" scoped="" ref="0x2ade437174b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43717640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2ade43715bd8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2ade43715bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43713020"/>
        <function-ref name="isInput" scoped="" ref="0x2ade437131a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43713330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade437134b8"/>
        <function-ref name="get" scoped="" ref="0x2ade43713640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade437137c8"/>
        <function-ref name="set" scoped="" ref="0x2ade43713950"/>
        <function-ref name="clr" scoped="" ref="0x2ade43713ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4422d6a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4422d6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4422d9f8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4422db80"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4422dd08"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4422c020"/>
        <function-ref name="get" scoped="" ref="0x2ade4422c1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4422c330"/>
        <function-ref name="set" scoped="" ref="0x2ade4422c4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4422c640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4422a710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4422a710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4422aa60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4422abe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4422ad70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44229020"/>
        <function-ref name="get" scoped="" ref="0x2ade442291a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44229330"/>
        <function-ref name="set" scoped="" ref="0x2ade442294b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44229640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44227710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44227710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44227a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44227be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44227d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44226020"/>
        <function-ref name="get" scoped="" ref="0x2ade442261a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44226330"/>
        <function-ref name="set" scoped="" ref="0x2ade442264b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44226640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44224710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44224710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44224a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44224be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44224d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44223020"/>
        <function-ref name="get" scoped="" ref="0x2ade442231a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44223330"/>
        <function-ref name="set" scoped="" ref="0x2ade442234b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44223640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44221710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44221710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44221a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44221be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44221d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44220020"/>
        <function-ref name="get" scoped="" ref="0x2ade442201a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44220330"/>
        <function-ref name="set" scoped="" ref="0x2ade442204b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44220640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4421e710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4421e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4421ea60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4421ebe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4421ed70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4421c020"/>
        <function-ref name="get" scoped="" ref="0x2ade4421c1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4421c330"/>
        <function-ref name="set" scoped="" ref="0x2ade4421c4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4421c640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4421a710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4421a710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4421aa60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4421abe8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4421ad70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44219020"/>
        <function-ref name="get" scoped="" ref="0x2ade442191a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44219330"/>
        <function-ref name="set" scoped="" ref="0x2ade442194b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44219640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade44217710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade44217710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade44217a60"/>
        <function-ref name="isInput" scoped="" ref="0x2ade44217be8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade44217d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade44216020"/>
        <function-ref name="get" scoped="" ref="0x2ade442161a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade44216330"/>
        <function-ref name="set" scoped="" ref="0x2ade442164b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade44216640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4371fac0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4371fac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4371fe10"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4372d020"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4372d1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4372d330"/>
        <function-ref name="get" scoped="" ref="0x2ade4372d4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4372d640"/>
        <function-ref name="set" scoped="" ref="0x2ade4372d7c8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4372d950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4373cdb8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4373cdb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4373b170"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4373b2f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4373b480"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4373b608"/>
        <function-ref name="get" scoped="" ref="0x2ade4373b790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4373b918"/>
        <function-ref name="set" scoped="" ref="0x2ade4373baa0"/>
        <function-ref name="clr" scoped="" ref="0x2ade4373bc28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade437363e0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade437363e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43736730"/>
        <function-ref name="isInput" scoped="" ref="0x2ade437368b8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43736a40"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43736bc8"/>
        <function-ref name="get" scoped="" ref="0x2ade43736d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43735020"/>
        <function-ref name="set" scoped="" ref="0x2ade437351a8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43735330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade437437e8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade437437e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43743b38"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43743cc0"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43743e48"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43742020"/>
        <function-ref name="get" scoped="" ref="0x2ade437421a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43742330"/>
        <function-ref name="set" scoped="" ref="0x2ade437424b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43742640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4373fc38" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4373fc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4373e020"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4373e1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4373e330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4373e4b8"/>
        <function-ref name="get" scoped="" ref="0x2ade4373e640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4373e7c8"/>
        <function-ref name="set" scoped="" ref="0x2ade4373e950"/>
        <function-ref name="clr" scoped="" ref="0x2ade4373ead8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4374b020" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4374b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4374b370"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4374b4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4374b680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4374b808"/>
        <function-ref name="get" scoped="" ref="0x2ade4374b990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4374bb18"/>
        <function-ref name="set" scoped="" ref="0x2ade4374bca0"/>
        <function-ref name="clr" scoped="" ref="0x2ade4374be28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade43746480" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade43746480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade437467d0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43746958"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43746ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43746c68"/>
        <function-ref name="get" scoped="" ref="0x2ade43746df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43757020"/>
        <function-ref name="set" scoped="" ref="0x2ade437571a8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43757330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade437547e8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade437547e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43754b38"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43754cc0"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43754e48"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43753020"/>
        <function-ref name="get" scoped="" ref="0x2ade437531a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43753330"/>
        <function-ref name="set" scoped="" ref="0x2ade437534b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43753640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4374f970" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4374f970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4374fcc0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4374fe48"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43760020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade437601a8"/>
        <function-ref name="get" scoped="" ref="0x2ade43760330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade437604b8"/>
        <function-ref name="set" scoped="" ref="0x2ade43760640"/>
        <function-ref name="clr" scoped="" ref="0x2ade437607c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade4375cab0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade4375cab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade4375ce00"/>
        <function-ref name="isInput" scoped="" ref="0x2ade4375b020"/>
        <function-ref name="toggle" scoped="" ref="0x2ade4375b1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade4375b330"/>
        <function-ref name="get" scoped="" ref="0x2ade4375b4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade4375b640"/>
        <function-ref name="set" scoped="" ref="0x2ade4375b7c8"/>
        <function-ref name="clr" scoped="" ref="0x2ade4375b950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade43758c38" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade43758c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43769020"/>
        <function-ref name="isInput" scoped="" ref="0x2ade437691a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43769330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade437694b8"/>
        <function-ref name="get" scoped="" ref="0x2ade43769640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade437697c8"/>
        <function-ref name="set" scoped="" ref="0x2ade43769950"/>
        <function-ref name="clr" scoped="" ref="0x2ade43769ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade43764020" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade43764020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43764370"/>
        <function-ref name="isInput" scoped="" ref="0x2ade437644f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43764680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43764808"/>
        <function-ref name="get" scoped="" ref="0x2ade43764990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43764b18"/>
        <function-ref name="set" scoped="" ref="0x2ade43764ca0"/>
        <function-ref name="clr" scoped="" ref="0x2ade43764e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2ade43771180" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2ade43771180"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade437714d0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43771658"/>
        <function-ref name="toggle" scoped="" ref="0x2ade437717e0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43771968"/>
        <function-ref name="get" scoped="" ref="0x2ade43771af0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43771c78"/>
        <function-ref name="set" scoped="" ref="0x2ade43771e00"/>
        <function-ref name="clr" scoped="" ref="0x2ade43770020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ade437ac2c0" loc="27:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ade437ac2c0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x2ade4351d128"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x2ade4351d128"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade437ac610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2ade437ac8f0" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2ade437ac8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2ade437acc40"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2ade437acdc8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2ade437ab020"/>
        <function-ref name="actualMicro" scoped="" ref="0x2ade437ab1a8"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2ade437ab330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x2ade437c9898" loc="60:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2ade437c9898"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade437c9be8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2ade437ca198" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2ade437ca198"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2ade437ca4e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x2ade437c91d0" loc="59:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2ade437c91d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade437c9520"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x2ade437ca7d0" loc="58:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2ade437ca7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade437cab20"/>
        <function-ref name="taskLoop" scoped="" ref="0x2ade437caca8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2ade437cae30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2ade435251c8" loc="48:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2ade435251c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade43525518"/>
        <function-ref name="runTask" scoped="" ref="0x2ade435256a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2ade43522600" loc="47:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2ade43522600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade43522950"/>
        <function-ref name="taskLoop" scoped="" ref="0x2ade43522ad8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2ade43522c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2ade435d82b0" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2ade435d82b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade435d8600"/>
        <function-ref name="runTask" scoped="" ref="0x2ade435d8788"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x2ade435e1758" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2ade435e1758"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2ade435e1aa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2ade435d9448" loc="55:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2ade435d9448"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade435d9798"/>
        <function-ref name="taskLoop" scoped="" ref="0x2ade435d9920"/>
        <function-ref name="runNextTask" scoped="" ref="0x2ade435d9aa8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x2ade435fe2b0" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2ade435fe2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2ade435fe600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x2ade435f8660" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2ade435f8660"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2ade435f89b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x2ade43601a80" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2ade43601a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2ade43601dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer0" ref="0x2ade437eb578" loc="20:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer0" scoped="" ref="0x2ade437eb578"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ade437e98f0"/>
        <function-ref name="fired" scoped="" ref="0x2ade437e1020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ade437e1d10"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ade437e18c0"/>
        <function-ref name="getdt" scoped="" ref="0x2ade437fc1c0"/>
        <function-ref name="gett0" scoped="" ref="0x2ade437e9d40"/>
        <function-ref name="isRunning" scoped="" ref="0x2ade437e1470"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ade437e20f8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ade437e9320"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ade437e2598"/>
        <function-ref name="stop" scoped="" ref="0x2ade437e2a38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x2ade437d2d60" loc="18:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2ade437d2d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2ade437d10d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="testTask" ref="0x2ade438055d8" loc="31:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="testTask" scoped="" ref="0x2ade438055d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade43805928"/>
        <function-ref name="runTask" scoped="" ref="0x2ade43805ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GLCD" ref="0x2ade437d0020" loc="19:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GLCD" scoped="" ref="0x2ade437d0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GLCD"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2ade437d0370"/>
        <function-ref name="tsPressed" scoped="" ref="0x2ade437d04f8"/>
        <function-ref name="initDone" scoped="" ref="0x2ade437d0680"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2ade437d0808"/>
        <function-ref name="isPressed" scoped="" ref="0x2ade437d0990"/>
        <function-ref name="calibrated" scoped="" ref="0x2ade437d0b18"/>
        <function-ref name="calibrateTouchScreen" scoped="" ref="0x2ade437d0ca0"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2ade437d0e28"/>
        <function-ref name="getXY" scoped="" ref="0x2ade437cf020"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2ade437cf1a8"/>
        <function-ref name="barWritten" scoped="" ref="0x2ade437cf330"/>
        <function-ref name="lineWritten" scoped="" ref="0x2ade437cf4b8"/>
        <function-ref name="screenCleared" scoped="" ref="0x2ade437cf640"/>
        <function-ref name="startWriteString" scoped="" ref="0x2ade437cf8c8"/>
        <function-ref name="xyReady" scoped="" ref="0x2ade437cfa50"/>
        <function-ref name="writeByte" scoped="" ref="0x2ade437cfbd8"/>
        <function-ref name="setPixel" scoped="" ref="0x2ade437cfd60"/>
        <function-ref name="circleWritten" scoped="" ref="0x2ade437e3020"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2ade437e31a8"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2ade437e3330"/>
        <function-ref name="writePixel" scoped="" ref="0x2ade437e34b8"/>
        <function-ref name="initLCD" scoped="" ref="0x2ade437e3640"/>
        <function-ref name="stringWritten" scoped="" ref="0x2ade437e37c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UDP" ref="0x2ade437f5b18" loc="22:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UDP" scoped="" ref="0x2ade437f5b18"/></type-interface>
      <instance>
        <interfacedef-ref qname="UDP"/>
      </instance>
      <interface-functions>
        <function-ref name="initDone" scoped="" ref="0x2ade437f5e68"/>
        <function-ref name="initStack" scoped="" ref="0x2ade437fb020"/>
        <function-ref name="sendData" scoped="" ref="0x2ade437fb1a8"/>
        <function-ref name="gotDatagram" scoped="" ref="0x2ade437fb330"/>
        <function-ref name="hwInterrupt" scoped="" ref="0x2ade437fb4b8"/>
        <function-ref name="sendDone" scoped="" ref="0x2ade437fb640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GLCD" ref="0x2ade4381d770" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDC.nc">
      <component-ref qname="GLCDC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GLCD" scoped="" ref="0x2ade4381d770"/></type-interface>
      <instance>
        <interfacedef-ref qname="GLCD"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2ade4381dac0"/>
        <function-ref name="tsPressed" scoped="" ref="0x2ade4381dc48"/>
        <function-ref name="initDone" scoped="" ref="0x2ade4381ddd0"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2ade43830020"/>
        <function-ref name="isPressed" scoped="" ref="0x2ade438301a8"/>
        <function-ref name="calibrated" scoped="" ref="0x2ade43830330"/>
        <function-ref name="calibrateTouchScreen" scoped="" ref="0x2ade438304b8"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2ade43830640"/>
        <function-ref name="getXY" scoped="" ref="0x2ade438307c8"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2ade43830950"/>
        <function-ref name="barWritten" scoped="" ref="0x2ade43830ad8"/>
        <function-ref name="lineWritten" scoped="" ref="0x2ade43830c60"/>
        <function-ref name="screenCleared" scoped="" ref="0x2ade43830de8"/>
        <function-ref name="startWriteString" scoped="" ref="0x2ade4382f120"/>
        <function-ref name="xyReady" scoped="" ref="0x2ade4382f2a8"/>
        <function-ref name="writeByte" scoped="" ref="0x2ade4382f430"/>
        <function-ref name="setPixel" scoped="" ref="0x2ade4382f5b8"/>
        <function-ref name="circleWritten" scoped="" ref="0x2ade4382f740"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2ade4382f8c8"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2ade4382fa50"/>
        <function-ref name="writePixel" scoped="" ref="0x2ade4382fbd8"/>
        <function-ref name="initLCD" scoped="" ref="0x2ade4382fd60"/>
        <function-ref name="stringWritten" scoped="" ref="0x2ade4382e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LCD128x64" ref="0x2ade43853958" loc="8:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDP.nc">
      <component-ref qname="GLCDP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LCD128x64" scoped="" ref="0x2ade43853958"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2ade43853ca8"/>
        <function-ref name="initDone" scoped="" ref="0x2ade43853e30"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2ade4383c020"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2ade4383c1a8"/>
        <function-ref name="barWritten" scoped="" ref="0x2ade4383c330"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2ade4383c4b8"/>
        <function-ref name="screenCleared" scoped="" ref="0x2ade4383c640"/>
        <function-ref name="lineWritten" scoped="" ref="0x2ade4383c7c8"/>
        <function-ref name="startWriteString" scoped="" ref="0x2ade4383c950"/>
        <function-ref name="writeByte" scoped="" ref="0x2ade4383cad8"/>
        <function-ref name="setPixel" scoped="" ref="0x2ade4383cc60"/>
        <function-ref name="circleWritten" scoped="" ref="0x2ade4383cde8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2ade4383b020"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2ade4383b2a8"/>
        <function-ref name="writePixel" scoped="" ref="0x2ade4383b430"/>
        <function-ref name="initLCD" scoped="" ref="0x2ade4383b5b8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2ade4383b740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GLCD" ref="0x2ade43829170" loc="5:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDP.nc">
      <component-ref qname="GLCDP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GLCD" scoped="" ref="0x2ade43829170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GLCD"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2ade438294c0"/>
        <function-ref name="tsPressed" scoped="" ref="0x2ade43829648"/>
        <function-ref name="initDone" scoped="" ref="0x2ade438297d0"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2ade43829958"/>
        <function-ref name="isPressed" scoped="" ref="0x2ade43829ae0"/>
        <function-ref name="calibrated" scoped="" ref="0x2ade43829c68"/>
        <function-ref name="calibrateTouchScreen" scoped="" ref="0x2ade43829df0"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2ade43828020"/>
        <function-ref name="getXY" scoped="" ref="0x2ade438281a8"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2ade43828330"/>
        <function-ref name="barWritten" scoped="" ref="0x2ade438284b8"/>
        <function-ref name="lineWritten" scoped="" ref="0x2ade43828640"/>
        <function-ref name="screenCleared" scoped="" ref="0x2ade438287c8"/>
        <function-ref name="startWriteString" scoped="" ref="0x2ade43828a50"/>
        <function-ref name="xyReady" scoped="" ref="0x2ade43828bd8"/>
        <function-ref name="writeByte" scoped="" ref="0x2ade43828d60"/>
        <function-ref name="setPixel" scoped="" ref="0x2ade4383d020"/>
        <function-ref name="circleWritten" scoped="" ref="0x2ade4383d1a8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2ade4383d330"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2ade4383d4b8"/>
        <function-ref name="writePixel" scoped="" ref="0x2ade4383d640"/>
        <function-ref name="initLCD" scoped="" ref="0x2ade4383d7c8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2ade4383d950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TouchScreen" ref="0x2ade438372b8" loc="7:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDP.nc">
      <component-ref qname="GLCDP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TouchScreen" scoped="" ref="0x2ade438372b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TouchScreen"/>
      </instance>
      <interface-functions>
        <function-ref name="tsPressed" scoped="" ref="0x2ade43837608"/>
        <function-ref name="isPressed" scoped="" ref="0x2ade43837790"/>
        <function-ref name="getXY" scoped="" ref="0x2ade43837918"/>
        <function-ref name="xyReady" scoped="" ref="0x2ade43837aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TouchScreen" ref="0x2ade4382c580" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <component-ref qname="TouchScreenC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TouchScreen" scoped="" ref="0x2ade4382c580"/></type-interface>
      <instance>
        <interfacedef-ref qname="TouchScreen"/>
      </instance>
      <interface-functions>
        <function-ref name="tsPressed" scoped="" ref="0x2ade4382c8d0"/>
        <function-ref name="isPressed" scoped="" ref="0x2ade4382ca58"/>
        <function-ref name="getXY" scoped="" ref="0x2ade4382cbe0"/>
        <function-ref name="xyReady" scoped="" ref="0x2ade4382cd68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read" ref="0x2ade43898dd8" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2ade43898dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2ade4389a9e0"/>
        <function-ref name="readDone" scoped="" ref="0x2ade4389ae30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="driveA" ref="0x2ade438994e0" loc="21:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="driveA" scoped="" ref="0x2ade438994e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43899830"/>
        <function-ref name="isInput" scoped="" ref="0x2ade438999b8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43899b40"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43899cc8"/>
        <function-ref name="get" scoped="" ref="0x2ade43899e50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43897020"/>
        <function-ref name="set" scoped="" ref="0x2ade438971a8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43897330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcConfig" ref="0x2ade438a7998" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2ade438a7998"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2ade438a7ce8"/>
        <function-ref name="getChannel" scoped="" ref="0x2ade438a7e70"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2ade438aa020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="checkTS" ref="0x2ade438a6970" loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="checkTS" scoped="" ref="0x2ade438a6970"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade438a6cc0"/>
        <function-ref name="runTask" scoped="" ref="0x2ade438a6e48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="adcX" ref="0x2ade438ad820" loc="23:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="adcX" scoped="" ref="0x2ade438ad820"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade438adb70"/>
        <function-ref name="isInput" scoped="" ref="0x2ade438adcf8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade438ade80"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade438ac030"/>
        <function-ref name="get" scoped="" ref="0x2ade438ac1b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade438ac340"/>
        <function-ref name="set" scoped="" ref="0x2ade438ac4c8"/>
        <function-ref name="clr" scoped="" ref="0x2ade438ac650"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="driveB" ref="0x2ade43897698" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="driveB" scoped="" ref="0x2ade43897698"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade438979e8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43897b70"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43897cf8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43897e80"/>
        <function-ref name="get" scoped="" ref="0x2ade438ad030"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade438ad1b8"/>
        <function-ref name="set" scoped="" ref="0x2ade438ad340"/>
        <function-ref name="clr" scoped="" ref="0x2ade438ad4c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TouchScreen" ref="0x2ade438aa318" loc="27:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TouchScreen" scoped="" ref="0x2ade438aa318"/></type-interface>
      <instance>
        <interfacedef-ref qname="TouchScreen"/>
      </instance>
      <interface-functions>
        <function-ref name="tsPressed" scoped="" ref="0x2ade438aa668"/>
        <function-ref name="isPressed" scoped="" ref="0x2ade438aa7f0"/>
        <function-ref name="getXY" scoped="" ref="0x2ade438aa978"/>
        <function-ref name="xyReady" scoped="" ref="0x2ade438aab00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="adcY" ref="0x2ade438ac9a8" loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="adcY" scoped="" ref="0x2ade438ac9a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade438accf8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade438ace80"/>
        <function-ref name="toggle" scoped="" ref="0x2ade438ab030"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade438ab1b8"/>
        <function-ref name="get" scoped="" ref="0x2ade438ab340"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade438ab4c8"/>
        <function-ref name="set" scoped="" ref="0x2ade438ab650"/>
        <function-ref name="clr" scoped="" ref="0x2ade438ab7d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2ade43a663f0" loc="25:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="TouchScreenC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2ade43a663f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2ade43a66740"/>
        <function-ref name="configure" scoped="" ref="0x2ade43a668c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2ade43a69358" loc="22:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="TouchScreenC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2ade43a69358"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2ade43a67020"/>
        <function-ref name="readDone" scoped="" ref="0x2ade43a67470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2ade43a67a28" loc="24:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="TouchScreenC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2ade43a67a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2ade43a67d78"/>
        <function-ref name="getChannel" scoped="" ref="0x2ade43a66020"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2ade43a661a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2ade438cb668" loc="18:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2ade438cb668"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2ade438c91e8"/>
        <function-ref name="readDone" scoped="" ref="0x2ade438c9638"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2ade438c82f0" loc="19:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2ade438c82f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2ade438c8e70"/>
        <function-ref name="readDone" scoped="" ref="0x2ade438c7320"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2ade438db020" loc="22:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2ade438db020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2ade438db370"/>
        <function-ref name="getChannel" scoped="" ref="0x2ade438db4f8"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2ade438db680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2ade438da1c8" loc="23:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2ade438da1c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2ade438da518"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2ade438da6a0"/>
        <function-ref name="request" scoped="" ref="0x2ade438da828"/>
        <function-ref name="granted" scoped="" ref="0x2ade438da9b0"/>
        <function-ref name="isOwner" scoped="" ref="0x2ade438dab38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2ade438e8890" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2ade438e8890"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2ade438e8be0"/>
        <function-ref name="configure" scoped="" ref="0x2ade438e8d68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x2ade438f69b0" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2ade438f69b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2ade438f6d00"/>
        <function-ref name="dataReady" scoped="" ref="0x2ade438e8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x2ade438e4d50" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2ade438e4d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2ade438e90d8"/>
        <function-ref name="cancel" scoped="" ref="0x2ade438e9260"/>
        <function-ref name="dataReady" scoped="" ref="0x2ade438e93e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2ade438d9ca8" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2ade438d9ca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2ade438ea020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2ade438ea1a8"/>
        <function-ref name="request" scoped="" ref="0x2ade438ea330"/>
        <function-ref name="granted" scoped="" ref="0x2ade438ea4b8"/>
        <function-ref name="isOwner" scoped="" ref="0x2ade438ea640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ade438e3d48" loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ade438e3d48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade438f30d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x2ade438f2de0" loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2ade438f2de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2ade438f1170"/>
        <function-ref name="dataReady" scoped="" ref="0x2ade438f12f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x2ade438f2488" loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2ade438f2488"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2ade438f27d8"/>
        <function-ref name="cancel" scoped="" ref="0x2ade438f2960"/>
        <function-ref name="dataReady" scoped="" ref="0x2ade438f2ae8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Adc" ref="0x2ade438f9940" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2ade438f9940"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2ade438f9c90"/>
        <function-ref name="getAdmux" scoped="" ref="0x2ade438f9e18"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2ade438ef020"/>
        <function-ref name="isEnabled" scoped="" ref="0x2ade438ef1a8"/>
        <function-ref name="enableAdc" scoped="" ref="0x2ade438ef330"/>
        <function-ref name="setAdmux" scoped="" ref="0x2ade438ef4b8"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2ade438ef640"/>
        <function-ref name="isComplete" scoped="" ref="0x2ade438ef7c8"/>
        <function-ref name="cancel" scoped="" ref="0x2ade438ef950"/>
        <function-ref name="disableAdc" scoped="" ref="0x2ade438efad8"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2ade438efc60"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2ade438efde8"/>
        <function-ref name="startConversion" scoped="" ref="0x2ade438ee020"/>
        <function-ref name="isStarted" scoped="" ref="0x2ade438ee2a8"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2ade438ee430"/>
        <function-ref name="setContinuous" scoped="" ref="0x2ade438ee5b8"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2ade438ee740"/>
        <function-ref name="getValue" scoped="" ref="0x2ade438ee8c8"/>
        <function-ref name="dataReady" scoped="" ref="0x2ade438eea50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x2ade438f0c10" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2ade438f0c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2ade438f2020"/>
        <function-ref name="stop" scoped="" ref="0x2ade438f21a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x2ade438eed30" loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2ade438eed30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2ade438f80d8"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2ade438f8260"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2ade438f83e8"/>
        <function-ref name="actualMicro" scoped="" ref="0x2ade438f8570"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2ade438f86f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x2ade4392e020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <component-ref qname="HplAtm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2ade4392e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2ade4392e370"/>
        <function-ref name="getAdmux" scoped="" ref="0x2ade4392e4f8"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2ade4392e680"/>
        <function-ref name="isEnabled" scoped="" ref="0x2ade4392e808"/>
        <function-ref name="enableAdc" scoped="" ref="0x2ade4392e990"/>
        <function-ref name="setAdmux" scoped="" ref="0x2ade4392eb18"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2ade4392eca0"/>
        <function-ref name="isComplete" scoped="" ref="0x2ade4392ee28"/>
        <function-ref name="cancel" scoped="" ref="0x2ade4392d020"/>
        <function-ref name="disableAdc" scoped="" ref="0x2ade4392d1a8"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2ade4392d330"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2ade4392d4b8"/>
        <function-ref name="startConversion" scoped="" ref="0x2ade4392d640"/>
        <function-ref name="isStarted" scoped="" ref="0x2ade4392d8c8"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2ade4392da50"/>
        <function-ref name="setContinuous" scoped="" ref="0x2ade4392dbd8"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2ade4392dd60"/>
        <function-ref name="getValue" scoped="" ref="0x2ade4392c020"/>
        <function-ref name="dataReady" scoped="" ref="0x2ade4392c1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x2ade439435b8" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2ade439435b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2ade43943908"/>
        <function-ref name="getAdmux" scoped="" ref="0x2ade43943a90"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2ade43943c18"/>
        <function-ref name="isEnabled" scoped="" ref="0x2ade43943da0"/>
        <function-ref name="enableAdc" scoped="" ref="0x2ade43942020"/>
        <function-ref name="setAdmux" scoped="" ref="0x2ade439421a8"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2ade43942330"/>
        <function-ref name="isComplete" scoped="" ref="0x2ade439424b8"/>
        <function-ref name="cancel" scoped="" ref="0x2ade43942640"/>
        <function-ref name="disableAdc" scoped="" ref="0x2ade439427c8"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2ade43942950"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2ade43942ad8"/>
        <function-ref name="startConversion" scoped="" ref="0x2ade43942c60"/>
        <function-ref name="isStarted" scoped="" ref="0x2ade43941020"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2ade439411a8"/>
        <function-ref name="setContinuous" scoped="" ref="0x2ade43941330"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2ade439414b8"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43941640"/>
        <function-ref name="dataReady" scoped="" ref="0x2ade439417c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x2ade43941ad8" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2ade43941ad8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2ade43941e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2ade439e9820" loc="92:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2ade439e9820"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2ade439e9b90"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2ade439e9d18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2ade439e7550" loc="96:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2ade439e7550"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2ade439e78c0"/>
        <function-ref name="configure" scoped="" ref="0x2ade439e7a48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x2ade439e8020" loc="93:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2ade439e8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2ade439e8370"/>
        <function-ref name="requested" scoped="" ref="0x2ade439e84f8"/>
        <function-ref name="granted" scoped="" ref="0x2ade439e8680"/>
        <function-ref name="isOwner" scoped="" ref="0x2ade439e8808"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2ade439e8990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2ade439eaa40" loc="91:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2ade439eaa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2ade439eadb0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2ade439e9020"/>
        <function-ref name="request" scoped="" ref="0x2ade439e91a8"/>
        <function-ref name="granted" scoped="" ref="0x2ade439e9330"/>
        <function-ref name="isOwner" scoped="" ref="0x2ade439e94b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2ade439e8bd8" loc="94:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2ade439e8bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2ade439e7020"/>
        <function-ref name="userId" scoped="" ref="0x2ade439e71a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ade443119f8" loc="44:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ade443119f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade44311d48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x2ade44310020" loc="45:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0x2ade44310020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2ade44310370"/>
        <function-ref name="isEmpty" scoped="" ref="0x2ade443104f8"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2ade44310680"/>
        <function-ref name="dequeue" scoped="" ref="0x2ade44310808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2ade4430ed58" loc="55:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2ade4430ed58"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2ade4430c0f0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2ade4430c278"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2ade4430b980" loc="60:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2ade4430b980"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2ade4430bcf0"/>
        <function-ref name="configure" scoped="" ref="0x2ade4430be78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x2ade4430a130" loc="61:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x2ade4430a130"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2ade4430a480"/>
        <function-ref name="isEmpty" scoped="" ref="0x2ade4430a608"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2ade4430a790"/>
        <function-ref name="dequeue" scoped="" ref="0x2ade4430a918"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x2ade4430c4c0" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2ade4430c4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2ade4430c810"/>
        <function-ref name="requested" scoped="" ref="0x2ade4430c998"/>
        <function-ref name="granted" scoped="" ref="0x2ade4430cb20"/>
        <function-ref name="isOwner" scoped="" ref="0x2ade4430cca8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2ade4430ce30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x2ade4430ab60" loc="62:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x2ade4430ab60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x2ade44309020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x2ade443091a8"/>
        <function-ref name="led1On" scoped="" ref="0x2ade44309330"/>
        <function-ref name="led1Toggle" scoped="" ref="0x2ade443094b8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x2ade44309640"/>
        <function-ref name="get" scoped="" ref="0x2ade443097c8"/>
        <function-ref name="led1Off" scoped="" ref="0x2ade44309950"/>
        <function-ref name="setPort" scoped="" ref="0x2ade44309ad8"/>
        <function-ref name="led0On" scoped="" ref="0x2ade443081a8"/>
        <function-ref name="set" scoped="" ref="0x2ade44309de8"/>
        <function-ref name="led2On" scoped="" ref="0x2ade44309c60"/>
        <function-ref name="led2Off" scoped="" ref="0x2ade44308020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2ade4430e060" loc="54:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2ade4430e060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2ade4430e3d0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2ade4430e558"/>
        <function-ref name="request" scoped="" ref="0x2ade4430e6e0"/>
        <function-ref name="granted" scoped="" ref="0x2ade4430e868"/>
        <function-ref name="isOwner" scoped="" ref="0x2ade4430e9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2ade4430b0e0" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2ade4430b0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2ade4430b430"/>
        <function-ref name="userId" scoped="" ref="0x2ade4430b5b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x2ade44308470" loc="75:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x2ade44308470"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade443087c0"/>
        <function-ref name="runTask" scoped="" ref="0x2ade44308948"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x2ade43a00b98" loc="72:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x2ade43a00b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x2ade43a07020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x2ade43a07268" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2ade43a07268"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2ade43a075b8"/>
        <function-ref name="requested" scoped="" ref="0x2ade43a07740"/>
        <function-ref name="granted" scoped="" ref="0x2ade43a078c8"/>
        <function-ref name="isOwner" scoped="" ref="0x2ade43a07a50"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2ade43a07bd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x2ade43a00478" loc="70:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2ade43a00478"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2ade43a007c8"/>
        <function-ref name="stop" scoped="" ref="0x2ade43a00950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2ade43a07e20" loc="74:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2ade43a07e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2ade43a061a8"/>
        <function-ref name="userId" scoped="" ref="0x2ade43a06330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x2ade44318b90" loc="62:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x2ade44318b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x2ade44317020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x2ade44317268" loc="63:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2ade44317268"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2ade443175b8"/>
        <function-ref name="requested" scoped="" ref="0x2ade44317740"/>
        <function-ref name="granted" scoped="" ref="0x2ade443178c8"/>
        <function-ref name="isOwner" scoped="" ref="0x2ade44317a50"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2ade44317bd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x2ade44318470" loc="60:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2ade44318470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2ade443187c0"/>
        <function-ref name="stop" scoped="" ref="0x2ade44318948"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2ade44317e20" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2ade44317e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2ade443581a8"/>
        <function-ref name="userId" scoped="" ref="0x2ade44358330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2ade43a1cc68" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2ade43a1cc68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2ade43a1b7e8"/>
        <function-ref name="readDone" scoped="" ref="0x2ade43a1bc38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2ade43a1a880" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2ade43a1a880"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2ade43a19490"/>
        <function-ref name="readDone" scoped="" ref="0x2ade43a19918"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2ade43a17e78" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2ade43a17e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2ade43a161f8"/>
        <function-ref name="getChannel" scoped="" ref="0x2ade43a16380"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2ade43a16508"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0x2ade43a17020" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2ade43a17020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2ade43a17370"/>
        <function-ref name="cancel" scoped="" ref="0x2ade43a174f8"/>
        <function-ref name="dataReady" scoped="" ref="0x2ade43a17680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="acquiredData" ref="0x2ade43a25bf8" loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="acquiredData" scoped="" ref="0x2ade43a25bf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade43a24020"/>
        <function-ref name="runTask" scoped="" ref="0x2ade43a241a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2ade43a30a28" loc="24:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2ade43a30a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2ade43a4d620"/>
        <function-ref name="readDone" scoped="" ref="0x2ade43a4da90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x2ade43a53348" loc="26:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x2ade43a53348"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2ade43a52020"/>
        <function-ref name="readDone" scoped="" ref="0x2ade43a52490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2ade43a52b28" loc="27:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2ade43a52b28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2ade43a51020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2ade43a511a8"/>
        <function-ref name="request" scoped="" ref="0x2ade43a51330"/>
        <function-ref name="granted" scoped="" ref="0x2ade43a514b8"/>
        <function-ref name="isOwner" scoped="" ref="0x2ade43a51640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LCD128x64" ref="0x2ade43a5f020" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64C.nc">
      <component-ref qname="LCD128x64C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LCD128x64" scoped="" ref="0x2ade43a5f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2ade43a5f370"/>
        <function-ref name="initDone" scoped="" ref="0x2ade43a5f4f8"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2ade43a5f680"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2ade43a5f808"/>
        <function-ref name="barWritten" scoped="" ref="0x2ade43a5f990"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2ade43a5fb18"/>
        <function-ref name="screenCleared" scoped="" ref="0x2ade43a5fca0"/>
        <function-ref name="lineWritten" scoped="" ref="0x2ade43a5fe28"/>
        <function-ref name="startWriteString" scoped="" ref="0x2ade43a5e020"/>
        <function-ref name="writeByte" scoped="" ref="0x2ade43a5e1a8"/>
        <function-ref name="setPixel" scoped="" ref="0x2ade43a5e330"/>
        <function-ref name="circleWritten" scoped="" ref="0x2ade43a5e4b8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2ade43a5e640"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2ade43a5e8c8"/>
        <function-ref name="writePixel" scoped="" ref="0x2ade43a5ea50"/>
        <function-ref name="initLCD" scoped="" ref="0x2ade43a5ebd8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2ade43a5ed60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeRectangle" ref="0x2ade43ad6bd0" loc="170:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeRectangle" scoped="" ref="0x2ade43ad6bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade43ad5020"/>
        <function-ref name="runTask" scoped="" ref="0x2ade43ad51a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LCD128x64" ref="0x2ade43a8bc98" loc="25:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LCD128x64" scoped="" ref="0x2ade43a8bc98"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2ade43a8a020"/>
        <function-ref name="initDone" scoped="" ref="0x2ade43a8a1a8"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2ade43a8a330"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2ade43a8a4b8"/>
        <function-ref name="barWritten" scoped="" ref="0x2ade43a8a640"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2ade43a8a7c8"/>
        <function-ref name="screenCleared" scoped="" ref="0x2ade43a8a950"/>
        <function-ref name="lineWritten" scoped="" ref="0x2ade43a8aad8"/>
        <function-ref name="startWriteString" scoped="" ref="0x2ade43a8ac60"/>
        <function-ref name="writeByte" scoped="" ref="0x2ade43a8ade8"/>
        <function-ref name="setPixel" scoped="" ref="0x2ade43aa9020"/>
        <function-ref name="circleWritten" scoped="" ref="0x2ade43aa91a8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2ade43aa9330"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2ade43aa95b8"/>
        <function-ref name="writePixel" scoped="" ref="0x2ade43aa9740"/>
        <function-ref name="initLCD" scoped="" ref="0x2ade43aa98c8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2ade43aa9a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeString" ref="0x2ade43ade368" loc="219:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeString" scoped="" ref="0x2ade43ade368"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade43ade6b8"/>
        <function-ref name="runTask" scoped="" ref="0x2ade43ade840"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeCircle" ref="0x2ade43ace9b8" loc="186:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeCircle" scoped="" ref="0x2ade43ace9b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade43aced08"/>
        <function-ref name="runTask" scoped="" ref="0x2ade43acd020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeLine" ref="0x2ade43b09ca0" loc="278:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeLine" scoped="" ref="0x2ade43b09ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade43b08020"/>
        <function-ref name="runTask" scoped="" ref="0x2ade43b081a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="wait4Controller" ref="0x2ade43aa4368" loc="37:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="wait4Controller" scoped="" ref="0x2ade43aa4368"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade43aa46b8"/>
        <function-ref name="runTask" scoped="" ref="0x2ade43aa4840"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeBar" ref="0x2ade43b11590" loc="356:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeBar" scoped="" ref="0x2ade43b11590"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade43b118e0"/>
        <function-ref name="runTask" scoped="" ref="0x2ade43b11a68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="clearScreenNB" ref="0x2ade43af1420" loc="247:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="clearScreenNB" scoped="" ref="0x2ade43af1420"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade43af1770"/>
        <function-ref name="runTask" scoped="" ref="0x2ade43af18f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2ade43b40420" loc="45:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
      <component-ref qname="BlinkAppC.TIMER0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2ade43b40420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ade43d026c8"/>
        <function-ref name="fired" scoped="" ref="0x2ade43d04db0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ade43d03ad8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ade43d03688"/>
        <function-ref name="getdt" scoped="" ref="0x2ade43d00020"/>
        <function-ref name="gett0" scoped="" ref="0x2ade43d02b18"/>
        <function-ref name="isRunning" scoped="" ref="0x2ade43d03238"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ade43d04020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ade43d020f8"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ade43d044c0"/>
        <function-ref name="stop" scoped="" ref="0x2ade43d04960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x2ade43b59550" loc="49:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x2ade43b59550"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ade43b56768"/>
        <function-ref name="fired" scoped="" ref="0x2ade43b58e50"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ade43b57b78"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ade43b57728"/>
        <function-ref name="getdt" scoped="" ref="0x2ade43b54088"/>
        <function-ref name="gett0" scoped="" ref="0x2ade43b56bb8"/>
        <function-ref name="isRunning" scoped="" ref="0x2ade43b572d8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ade43b580c0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ade43b56198"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ade43b58560"/>
        <function-ref name="stop" scoped="" ref="0x2ade43b58a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x2ade43b51b68" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x2ade43b51b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ade43b6fd98"/>
        <function-ref name="fired" scoped="" ref="0x2ade43b4e4d8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ade43b6f1f8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ade43b4ed78"/>
        <function-ref name="getdt" scoped="" ref="0x2ade43b6e688"/>
        <function-ref name="gett0" scoped="" ref="0x2ade43b6e238"/>
        <function-ref name="isRunning" scoped="" ref="0x2ade43b4e928"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ade43b506f0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ade43b6f7c8"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ade43b50b90"/>
        <function-ref name="stop" scoped="" ref="0x2ade43b4e088"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x2ade43b6c108" loc="47:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x2ade43b6c108"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2ade43b6cc88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ade43b54e48" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ade43b54e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade43b511c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x2ade43b7c150" loc="29:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x2ade43b7c150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2ade43b7b020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2ade43b7b930"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2ade43b7b4a8"/>
        <function-ref name="overflow" scoped="" ref="0x2ade43b7bdb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ade43b696f0" loc="27:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ade43b696f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade43b69a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x2ade43b66020" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x2ade43b66020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ade43b7f690"/>
        <function-ref name="fired" scoped="" ref="0x2ade43b656f8"/>
        <function-ref name="startAt" scoped="" ref="0x2ade43b7f088"/>
        <function-ref name="isRunning" scoped="" ref="0x2ade43b65b80"/>
        <function-ref name="getAlarm" scoped="" ref="0x2ade43b7fb18"/>
        <function-ref name="start" scoped="" ref="0x2ade43b66d70"/>
        <function-ref name="stop" scoped="" ref="0x2ade43b65270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x2ade43c61938" loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2ade43c61938"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ade43c5d020"/>
        <function-ref name="fired" scoped="" ref="0x2ade43c5f088"/>
        <function-ref name="startAt" scoped="" ref="0x2ade43c5f998"/>
        <function-ref name="isRunning" scoped="" ref="0x2ade43c5f510"/>
        <function-ref name="getAlarm" scoped="" ref="0x2ade43c5d4a8"/>
        <function-ref name="start" scoped="" ref="0x2ade43c606b0"/>
        <function-ref name="stop" scoped="" ref="0x2ade43c60b88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ade43c61190" loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ade43c61190"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x2ade4351ed88"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x2ade4351ed88"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade43c614e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x2ade43c5da90" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2ade43c5da90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2ade43c82828"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2ade43c81190"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2ade43c82cb0"/>
        <function-ref name="overflow" scoped="" ref="0x2ade43c81618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x2ade44375020" loc="38:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2ade44375020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2ade44375370"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2ade443754f8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2ade44375680"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2ade44375808"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2ade44375990"/>
        <function-ref name="setControl" scoped="" ref="0x2ade44375b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x2ade4433fda8" loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2ade4433fda8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ade4433b470"/>
        <function-ref name="fired" scoped="" ref="0x2ade4433d510"/>
        <function-ref name="startAt" scoped="" ref="0x2ade4433de20"/>
        <function-ref name="isRunning" scoped="" ref="0x2ade4433d998"/>
        <function-ref name="getAlarm" scoped="" ref="0x2ade4433b8f8"/>
        <function-ref name="start" scoped="" ref="0x2ade4433eb38"/>
        <function-ref name="stop" scoped="" ref="0x2ade4433d088"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ade4433f600" loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ade4433f600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade4433f950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x2ade4433a020" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2ade4433a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2ade4433ad70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2ade443396b8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2ade44339230"/>
        <function-ref name="overflow" scoped="" ref="0x2ade44339b40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerSync" ref="0x2ade443700a0" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerSync" scoped="" ref="0x2ade443700a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
      </instance>
      <interface-functions>
        <function-ref name="setAssr" scoped="" ref="0x2ade44370b98"/>
        <function-ref name="controlBusy" scoped="" ref="0x2ade44370578"/>
        <function-ref name="compareBusy" scoped="" ref="0x2ade44370700"/>
        <function-ref name="countBusy" scoped="" ref="0x2ade44370888"/>
        <function-ref name="getAssr" scoped="" ref="0x2ade44370a10"/>
        <function-ref name="setTimer0Synchronous" scoped="" ref="0x2ade443703f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x2ade44374020" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2ade44374020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2ade443717a8"/>
        <function-ref name="fired" scoped="" ref="0x2ade44372560"/>
        <function-ref name="get" scoped="" ref="0x2ade44374ba0"/>
        <function-ref name="reset" scoped="" ref="0x2ade443729e8"/>
        <function-ref name="isOn" scoped="" ref="0x2ade44371c30"/>
        <function-ref name="set" scoped="" ref="0x2ade44372088"/>
        <function-ref name="start" scoped="" ref="0x2ade44372e70"/>
        <function-ref name="stop" scoped="" ref="0x2ade44371320"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x2ade44338168" loc="37:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2ade44338168"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2ade44376270"/>
        <function-ref name="test" scoped="" ref="0x2ade44377930"/>
        <function-ref name="get" scoped="" ref="0x2ade44338ce8"/>
        <function-ref name="setScale" scoped="" ref="0x2ade443766f8"/>
        <function-ref name="getScale" scoped="" ref="0x2ade44376bd0"/>
        <function-ref name="reset" scoped="" ref="0x2ade44379b58"/>
        <function-ref name="overflow" scoped="" ref="0x2ade443796d0"/>
        <function-ref name="isOn" scoped="" ref="0x2ade44377db8"/>
        <function-ref name="set" scoped="" ref="0x2ade443791f8"/>
        <function-ref name="start" scoped="" ref="0x2ade44377020"/>
        <function-ref name="stop" scoped="" ref="0x2ade443774a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x2ade43bf0020" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2ade43bf0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2ade43bf0370"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2ade43bf04f8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2ade43bf0680"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2ade43bf0808"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2ade43bf0990"/>
        <function-ref name="setControl" scoped="" ref="0x2ade43bf0b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerSync" ref="0x2ade43c0f218" loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerSync" scoped="" ref="0x2ade43c0f218"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
      </instance>
      <interface-functions>
        <function-ref name="setAssr" scoped="" ref="0x2ade43c0fd10"/>
        <function-ref name="controlBusy" scoped="" ref="0x2ade43c0f6f0"/>
        <function-ref name="compareBusy" scoped="" ref="0x2ade43c0f878"/>
        <function-ref name="countBusy" scoped="" ref="0x2ade43c0fa00"/>
        <function-ref name="getAssr" scoped="" ref="0x2ade43c0fb88"/>
        <function-ref name="setTimer0Synchronous" scoped="" ref="0x2ade43c0f568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x2ade43bef020" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2ade43bef020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2ade43bed7a8"/>
        <function-ref name="fired" scoped="" ref="0x2ade43bee560"/>
        <function-ref name="get" scoped="" ref="0x2ade43befba0"/>
        <function-ref name="reset" scoped="" ref="0x2ade43bee9e8"/>
        <function-ref name="isOn" scoped="" ref="0x2ade43bedc30"/>
        <function-ref name="set" scoped="" ref="0x2ade43bee088"/>
        <function-ref name="start" scoped="" ref="0x2ade43beee70"/>
        <function-ref name="stop" scoped="" ref="0x2ade43bed320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2ade43bfae00" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2ade43bfae00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2ade43bf20f8"/>
        <function-ref name="test" scoped="" ref="0x2ade43bf3798"/>
        <function-ref name="get" scoped="" ref="0x2ade43bf6a18"/>
        <function-ref name="setScale" scoped="" ref="0x2ade43bf2580"/>
        <function-ref name="getScale" scoped="" ref="0x2ade43bf2a58"/>
        <function-ref name="reset" scoped="" ref="0x2ade43bf4980"/>
        <function-ref name="overflow" scoped="" ref="0x2ade43bf44f8"/>
        <function-ref name="isOn" scoped="" ref="0x2ade43bf3c20"/>
        <function-ref name="set" scoped="" ref="0x2ade43bf4020"/>
        <function-ref name="start" scoped="" ref="0x2ade43bf4e08"/>
        <function-ref name="stop" scoped="" ref="0x2ade43bf3310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x2ade43c06160" loc="62:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2ade43c06160"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2ade43c064b0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2ade43c06638"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2ade43c067c0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2ade43c06948"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2ade43c06ad0"/>
        <function-ref name="setControl" scoped="" ref="0x2ade43c06c58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x2ade43c01268" loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2ade43c01268"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2ade43c015b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerSync" ref="0x2ade43c01958" loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerSync" scoped="" ref="0x2ade43c01958"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
      </instance>
      <interface-functions>
        <function-ref name="setAssr" scoped="" ref="0x2ade43c004b8"/>
        <function-ref name="controlBusy" scoped="" ref="0x2ade43c01e30"/>
        <function-ref name="compareBusy" scoped="" ref="0x2ade43c00020"/>
        <function-ref name="countBusy" scoped="" ref="0x2ade43c001a8"/>
        <function-ref name="getAssr" scoped="" ref="0x2ade43c00330"/>
        <function-ref name="setTimer0Synchronous" scoped="" ref="0x2ade43c01ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x2ade43c05190" loc="63:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2ade43c05190"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2ade43c03930"/>
        <function-ref name="fired" scoped="" ref="0x2ade43c046d0"/>
        <function-ref name="get" scoped="" ref="0x2ade43c05d10"/>
        <function-ref name="reset" scoped="" ref="0x2ade43c04b58"/>
        <function-ref name="isOn" scoped="" ref="0x2ade43c03db8"/>
        <function-ref name="set" scoped="" ref="0x2ade43c041f8"/>
        <function-ref name="start" scoped="" ref="0x2ade43c03020"/>
        <function-ref name="stop" scoped="" ref="0x2ade43c034a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2ade43c0b180" loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2ade43c0b180"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2ade43c07270"/>
        <function-ref name="test" scoped="" ref="0x2ade43c09930"/>
        <function-ref name="get" scoped="" ref="0x2ade43c0bd00"/>
        <function-ref name="setScale" scoped="" ref="0x2ade43c076f8"/>
        <function-ref name="getScale" scoped="" ref="0x2ade43c07bd0"/>
        <function-ref name="reset" scoped="" ref="0x2ade43c0ab58"/>
        <function-ref name="overflow" scoped="" ref="0x2ade43c0a6d0"/>
        <function-ref name="isOn" scoped="" ref="0x2ade43c09db8"/>
        <function-ref name="set" scoped="" ref="0x2ade43c0a1f8"/>
        <function-ref name="start" scoped="" ref="0x2ade43c09020"/>
        <function-ref name="stop" scoped="" ref="0x2ade43c094a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x2ade43ca0cf0" loc="74:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x2ade43ca0cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade43c9f0a0"/>
        <function-ref name="runTask" scoped="" ref="0x2ade43c9f228"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x2ade43ca4c70" loc="49:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2ade43ca4c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ade43ca0410"/>
        <function-ref name="fired" scoped="" ref="0x2ade43ca14a8"/>
        <function-ref name="startAt" scoped="" ref="0x2ade43ca1db8"/>
        <function-ref name="isRunning" scoped="" ref="0x2ade43ca1930"/>
        <function-ref name="getAlarm" scoped="" ref="0x2ade43ca0898"/>
        <function-ref name="start" scoped="" ref="0x2ade43ca39f0"/>
        <function-ref name="stop" scoped="" ref="0x2ade43ca1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2ade43ca9ab0" loc="48:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2ade43ca9ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ade43ca5d60"/>
        <function-ref name="fired" scoped="" ref="0x2ade43ca7470"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ade43ca51c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ade43ca7d10"/>
        <function-ref name="getdt" scoped="" ref="0x2ade43ca4648"/>
        <function-ref name="gett0" scoped="" ref="0x2ade43ca41f8"/>
        <function-ref name="isRunning" scoped="" ref="0x2ade43ca78c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ade43ca8620"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ade43ca5790"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ade43ca8ac0"/>
        <function-ref name="stop" scoped="" ref="0x2ade43ca7020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x2ade43cf1478" loc="71:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x2ade43cf1478"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade43cf17c8"/>
        <function-ref name="runTask" scoped="" ref="0x2ade43cf1950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x2ade43cf6208" loc="49:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x2ade43cf6208"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ade43cf25f0"/>
        <function-ref name="fired" scoped="" ref="0x2ade43cf5b28"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ade43cf38c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ade43cf3470"/>
        <function-ref name="getdt" scoped="" ref="0x2ade43cf1020"/>
        <function-ref name="gett0" scoped="" ref="0x2ade43cf2a40"/>
        <function-ref name="isRunning" scoped="" ref="0x2ade43cf3020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ade43cf6d50"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ade43cf2020"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ade43cf5238"/>
        <function-ref name="stop" scoped="" ref="0x2ade43cf56d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2ade43cd4020" loc="48:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2ade43cd4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2ade43cf7358"/>
        <function-ref name="fired" scoped="" ref="0x2ade43cd39b8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2ade43cf9748"/>
        <function-ref name="isOneShot" scoped="" ref="0x2ade43cf92d8"/>
        <function-ref name="getdt" scoped="" ref="0x2ade43cf7c38"/>
        <function-ref name="gett0" scoped="" ref="0x2ade43cf77c8"/>
        <function-ref name="isRunning" scoped="" ref="0x2ade43cd3e28"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2ade43cd4b88"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2ade43cf9d38"/>
        <function-ref name="startOneShot" scoped="" ref="0x2ade43cd3088"/>
        <function-ref name="stop" scoped="" ref="0x2ade43cd3548"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x2ade43ceec38" loc="48:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x2ade43ceec38"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2ade43ced820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x2ade43cede48" loc="49:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2ade43cede48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2ade4359e530"/>
            <typename><typedef-ref name="TMilli" ref="0x2ade4359e888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2ade43d0bbe8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2ade43d0a548"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2ade43d0a0c0"/>
        <function-ref name="overflow" scoped="" ref="0x2ade43d0a9d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UDP" ref="0x2ade43cff280" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDPC.nc">
      <component-ref qname="UDPC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UDP" scoped="" ref="0x2ade43cff280"/></type-interface>
      <instance>
        <interfacedef-ref qname="UDP"/>
      </instance>
      <interface-functions>
        <function-ref name="initDone" scoped="" ref="0x2ade43cff5d0"/>
        <function-ref name="initStack" scoped="" ref="0x2ade43cff758"/>
        <function-ref name="sendData" scoped="" ref="0x2ade43cff8e0"/>
        <function-ref name="gotDatagram" scoped="" ref="0x2ade43cffa68"/>
        <function-ref name="hwInterrupt" scoped="" ref="0x2ade43cffbf0"/>
        <function-ref name="sendDone" scoped="" ref="0x2ade43cffd78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UDP" ref="0x2ade43d21190" loc="5:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDPP.nc">
      <component-ref qname="UDPP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UDP" scoped="" ref="0x2ade43d21190"/></type-interface>
      <instance>
        <interfacedef-ref qname="UDP"/>
      </instance>
      <interface-functions>
        <function-ref name="initDone" scoped="" ref="0x2ade43d214e0"/>
        <function-ref name="initStack" scoped="" ref="0x2ade43d21668"/>
        <function-ref name="sendData" scoped="" ref="0x2ade43d217f0"/>
        <function-ref name="gotDatagram" scoped="" ref="0x2ade43d21978"/>
        <function-ref name="hwInterrupt" scoped="" ref="0x2ade43d21b00"/>
        <function-ref name="sendDone" scoped="" ref="0x2ade43d21c88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IP" ref="0x2ade43d1ad80" loc="6:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDPP.nc">
      <component-ref qname="UDPP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IP" scoped="" ref="0x2ade43d1ad80"/></type-interface>
      <instance>
        <interfacedef-ref qname="IP"/>
      </instance>
      <interface-functions>
        <function-ref name="initDone" scoped="" ref="0x2ade43d1f170"/>
        <function-ref name="initStack" scoped="" ref="0x2ade43d1f2f8"/>
        <function-ref name="gotDatagram" scoped="" ref="0x2ade43d1f480"/>
        <function-ref name="hwInterrupt" scoped="" ref="0x2ade43d1f608"/>
        <function-ref name="sendDatagram" scoped="" ref="0x2ade43d1f790"/>
        <function-ref name="sendDone" scoped="" ref="0x2ade43d1f918"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IP" ref="0x2ade43cfb758" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IPC.nc">
      <component-ref qname="IPC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IP" scoped="" ref="0x2ade43cfb758"/></type-interface>
      <instance>
        <interfacedef-ref qname="IP"/>
      </instance>
      <interface-functions>
        <function-ref name="initDone" scoped="" ref="0x2ade43cfbaa8"/>
        <function-ref name="initStack" scoped="" ref="0x2ade43cfbc30"/>
        <function-ref name="gotDatagram" scoped="" ref="0x2ade43cfbdb8"/>
        <function-ref name="hwInterrupt" scoped="" ref="0x2ade43d2f020"/>
        <function-ref name="sendDatagram" scoped="" ref="0x2ade43d2f1a8"/>
        <function-ref name="sendDone" scoped="" ref="0x2ade43d2f330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IEEE8023" ref="0x2ade43d410d0" loc="7:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IPP.nc">
      <component-ref qname="IPP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IEEE8023" scoped="" ref="0x2ade43d410d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="IEEE8023"/>
      </instance>
      <interface-functions>
        <function-ref name="initDone" scoped="" ref="0x2ade43d41420"/>
        <function-ref name="gotDatagram" scoped="" ref="0x2ade43d415a8"/>
        <function-ref name="init" scoped="" ref="0x2ade43d41730"/>
        <function-ref name="sendFrame" scoped="" ref="0x2ade43d418b8"/>
        <function-ref name="hwInterrupt" scoped="" ref="0x2ade43d41a40"/>
        <function-ref name="sendDone" scoped="" ref="0x2ade43d41bc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IP" ref="0x2ade43d4a020" loc="6:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IPP.nc">
      <component-ref qname="IPP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IP" scoped="" ref="0x2ade43d4a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="IP"/>
      </instance>
      <interface-functions>
        <function-ref name="initDone" scoped="" ref="0x2ade43d4a370"/>
        <function-ref name="initStack" scoped="" ref="0x2ade43d4a4f8"/>
        <function-ref name="gotDatagram" scoped="" ref="0x2ade43d4a680"/>
        <function-ref name="hwInterrupt" scoped="" ref="0x2ade43d4a808"/>
        <function-ref name="sendDatagram" scoped="" ref="0x2ade43d4a990"/>
        <function-ref name="sendDone" scoped="" ref="0x2ade43d4ab18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEE8023" ref="0x2ade43d2e788" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023C.nc">
      <component-ref qname="IEEE8023C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IEEE8023" scoped="" ref="0x2ade43d2e788"/></type-interface>
      <instance>
        <interfacedef-ref qname="IEEE8023"/>
      </instance>
      <interface-functions>
        <function-ref name="initDone" scoped="" ref="0x2ade43d2ead8"/>
        <function-ref name="gotDatagram" scoped="" ref="0x2ade43d2ec60"/>
        <function-ref name="init" scoped="" ref="0x2ade43d2ede8"/>
        <function-ref name="sendFrame" scoped="" ref="0x2ade43daf020"/>
        <function-ref name="hwInterrupt" scoped="" ref="0x2ade43daf1a8"/>
        <function-ref name="sendDone" scoped="" ref="0x2ade43daf330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ssMMC" ref="0x2ade43dd8c78" loc="8:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023P.nc">
      <component-ref qname="IEEE8023P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ssMMC" scoped="" ref="0x2ade43dd8c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43dd7020"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43dd71a8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43dd7330"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43dd74b8"/>
        <function-ref name="get" scoped="" ref="0x2ade43dd7640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43dd77c8"/>
        <function-ref name="set" scoped="" ref="0x2ade43dd7950"/>
        <function-ref name="clr" scoped="" ref="0x2ade43dd7ad8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiByte" ref="0x2ade43dcc388" loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023P.nc">
      <component-ref qname="IEEE8023P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x2ade43dcc388"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x2ade43dcc6d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ssETH" ref="0x2ade43dd7e38" loc="9:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023P.nc">
      <component-ref qname="IEEE8023P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ssETH" scoped="" ref="0x2ade43dd7e38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43dd61c0"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43dd6348"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43dd64d0"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43dd6658"/>
        <function-ref name="get" scoped="" ref="0x2ade43dd67e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43dd6968"/>
        <function-ref name="set" scoped="" ref="0x2ade43dd6af0"/>
        <function-ref name="clr" scoped="" ref="0x2ade43dd6c78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEE8023" ref="0x2ade43dafda8" loc="7:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023P.nc">
      <component-ref qname="IEEE8023P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IEEE8023" scoped="" ref="0x2ade43dafda8"/></type-interface>
      <instance>
        <interfacedef-ref qname="IEEE8023"/>
      </instance>
      <interface-functions>
        <function-ref name="initDone" scoped="" ref="0x2ade43dd8170"/>
        <function-ref name="gotDatagram" scoped="" ref="0x2ade43dd82f8"/>
        <function-ref name="init" scoped="" ref="0x2ade43dd8480"/>
        <function-ref name="sendFrame" scoped="" ref="0x2ade43dd8608"/>
        <function-ref name="hwInterrupt" scoped="" ref="0x2ade43dd8790"/>
        <function-ref name="sendDone" scoped="" ref="0x2ade43dd8918"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="rstETH" ref="0x2ade43dd5020" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023P.nc">
      <component-ref qname="IEEE8023P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="rstETH" scoped="" ref="0x2ade43dd5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43dd5370"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43dd54f8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43dd5680"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43dd5808"/>
        <function-ref name="get" scoped="" ref="0x2ade43dd5990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43dd5b18"/>
        <function-ref name="set" scoped="" ref="0x2ade43dd5ca0"/>
        <function-ref name="clr" scoped="" ref="0x2ade43dd5e28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="intETH" ref="0x2ade43dcf5f8" loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023P.nc">
      <component-ref qname="IEEE8023P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="intETH" scoped="" ref="0x2ade43dcf5f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43dcf948"/>
        <function-ref name="fired" scoped="" ref="0x2ade43dcfad0"/>
        <function-ref name="disable" scoped="" ref="0x2ade43dcfc58"/>
        <function-ref name="edge" scoped="" ref="0x2ade43dcfde0"/>
        <function-ref name="enable" scoped="" ref="0x2ade43dd3020"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43dd31a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="checkInterruptflag" ref="0x2ade43e20af8" loc="500:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023P.nc">
      <component-ref qname="IEEE8023P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="checkInterruptflag" scoped="" ref="0x2ade43e20af8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade43e20e48"/>
        <function-ref name="runTask" scoped="" ref="0x2ade43e1f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2ade43dcc9b8" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023P.nc">
      <component-ref qname="IEEE8023P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2ade43dcc9b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2ade43dccd08"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2ade43dd2020"/>
        <function-ref name="request" scoped="" ref="0x2ade43dd21a8"/>
        <function-ref name="granted" scoped="" ref="0x2ade43dd2330"/>
        <function-ref name="isOwner" scoped="" ref="0x2ade43dd24b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x2ade43e5eb68" loc="84:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x2ade43e5eb68"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2ade43e3b020"/>
        <function-ref name="sendDone" scoped="" ref="0x2ade43e3b1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x2ade43e40d80" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x2ade43e40d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x2ade43e3d170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ade43e40760" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ade43e40760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade43e40ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x2ade43e383f8" loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x2ade43e383f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x2ade43e38748"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x2ade43e388d0"/>
        <function-ref name="splitRead" scoped="" ref="0x2ade43e38a58"/>
        <function-ref name="write" scoped="" ref="0x2ade43e38be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2ade43e3b978" loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiC.nc">
      <component-ref qname="Atm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2ade43e3b978"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2ade43e3bcc8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2ade43e3be50"/>
        <function-ref name="request" scoped="" ref="0x2ade43e37020"/>
        <function-ref name="granted" scoped="" ref="0x2ade43e371a8"/>
        <function-ref name="isOwner" scoped="" ref="0x2ade43e37330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="zeroTask" ref="0x2ade43ea4b58" loc="255:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="zeroTask" scoped="" ref="0x2ade43ea4b58"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade43ea3020"/>
        <function-ref name="runTask" scoped="" ref="0x2ade43ea31a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x2ade43e5a020" loc="94:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiPacket" scoped="" ref="0x2ade43e5a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2ade43e5a370"/>
        <function-ref name="sendDone" scoped="" ref="0x2ade43e5a4f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceArbiter" ref="0x2ade43e69020" loc="99:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceArbiter" scoped="" ref="0x2ade43e69020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2ade43e69370"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2ade43e694f8"/>
        <function-ref name="request" scoped="" ref="0x2ade43e69680"/>
        <function-ref name="granted" scoped="" ref="0x2ade43e69808"/>
        <function-ref name="isOwner" scoped="" ref="0x2ade43e69990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x2ade43e5cd80" loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiByte" scoped="" ref="0x2ade43e5cd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x2ade43e5b170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ade43e5c7a0" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ade43e5c7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade43e5caf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Spi" ref="0x2ade43e6bc78" loc="98:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Spi" scoped="" ref="0x2ade43e6bc78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x2ade43e56020"/>
        <function-ref name="sleep" scoped="" ref="0x2ade43e6a4b8"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x2ade43e56330"/>
        <function-ref name="dataReady" scoped="" ref="0x2ade43e6a640"/>
        <function-ref name="initMaster" scoped="" ref="0x2ade43e56640"/>
        <function-ref name="setMasterBit" scoped="" ref="0x2ade43e567c8"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x2ade43e56950"/>
        <function-ref name="read" scoped="" ref="0x2ade43e56ad8"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x2ade43e56c60"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x2ade43e56de8"/>
        <function-ref name="setClock" scoped="" ref="0x2ade43e55020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x2ade43e551a8"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x2ade43e55330"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x2ade43e555b8"/>
        <function-ref name="setDataOrder" scoped="" ref="0x2ade43e55740"/>
        <function-ref name="write" scoped="" ref="0x2ade43e558c8"/>
        <function-ref name="enableSpi" scoped="" ref="0x2ade43e55a50"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x2ade43e55bd8"/>
        <function-ref name="getClockPhase" scoped="" ref="0x2ade43e55d60"/>
        <function-ref name="getClock" scoped="" ref="0x2ade43e6a020"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x2ade43e6a1a8"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x2ade43e561a8"/>
        <function-ref name="setClockPhase" scoped="" ref="0x2ade43e564b8"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x2ade43e6a330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x2ade43e5b428" loc="93:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FastSpiByte" scoped="" ref="0x2ade43e5b428"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x2ade43e5b778"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x2ade43e5b900"/>
        <function-ref name="splitRead" scoped="" ref="0x2ade43e5ba88"/>
        <function-ref name="write" scoped="" ref="0x2ade43e5bc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2ade43e5ac88" loc="95:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2ade43e5ac88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2ade43e58020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2ade43e581a8"/>
        <function-ref name="request" scoped="" ref="0x2ade43e58330"/>
        <function-ref name="granted" scoped="" ref="0x2ade43e584b8"/>
        <function-ref name="isOwner" scoped="" ref="0x2ade43e58640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2ade43e69c48" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2ade43e69c48"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2ade43e68020"/>
        <function-ref name="userId" scoped="" ref="0x2ade43e681a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x2ade43e68478" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128SpiP.nc">
      <component-ref qname="Atm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2ade43e68478"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2ade43e687c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiBus" ref="0x2ade43ea8100" loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiC.nc">
      <component-ref qname="HplAtm128SpiC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiBus" scoped="" ref="0x2ade43ea8100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x2ade43ea8450"/>
        <function-ref name="sleep" scoped="" ref="0x2ade43ed6950"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x2ade43ea8760"/>
        <function-ref name="dataReady" scoped="" ref="0x2ade43ed6ad8"/>
        <function-ref name="initMaster" scoped="" ref="0x2ade43ea8a70"/>
        <function-ref name="setMasterBit" scoped="" ref="0x2ade43ea8bf8"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x2ade43ea8d80"/>
        <function-ref name="read" scoped="" ref="0x2ade43ea7020"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x2ade43ea71a8"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x2ade43ea7330"/>
        <function-ref name="setClock" scoped="" ref="0x2ade43ea74b8"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x2ade43ea7640"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x2ade43ea77c8"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x2ade43ea7a50"/>
        <function-ref name="setDataOrder" scoped="" ref="0x2ade43ea7bd8"/>
        <function-ref name="write" scoped="" ref="0x2ade43ea7d60"/>
        <function-ref name="enableSpi" scoped="" ref="0x2ade43ed6020"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x2ade43ed61a8"/>
        <function-ref name="getClockPhase" scoped="" ref="0x2ade43ed6330"/>
        <function-ref name="getClock" scoped="" ref="0x2ade43ed64b8"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x2ade43ed6640"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x2ade43ea85d8"/>
        <function-ref name="setClockPhase" scoped="" ref="0x2ade43ea88e8"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x2ade43ed67c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MISO" ref="0x2ade43ecc958" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MISO" scoped="" ref="0x2ade43ecc958"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43eccca8"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43ecce30"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43ecb020"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43ecb1a8"/>
        <function-ref name="get" scoped="" ref="0x2ade43ecb330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43ecb4b8"/>
        <function-ref name="set" scoped="" ref="0x2ade43ecb640"/>
        <function-ref name="clr" scoped="" ref="0x2ade43ecb7c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SCK" ref="0x2ade43ece648" loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SCK" scoped="" ref="0x2ade43ece648"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43ece998"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43eceb20"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43ececa8"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43ecee30"/>
        <function-ref name="get" scoped="" ref="0x2ade43ecd020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43ecd1a8"/>
        <function-ref name="set" scoped="" ref="0x2ade43ecd330"/>
        <function-ref name="clr" scoped="" ref="0x2ade43ecd4b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SS" ref="0x2ade43ecf508" loc="78:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SS" scoped="" ref="0x2ade43ecf508"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43ecf858"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43ecf9e0"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43ecfb68"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43ecfcf0"/>
        <function-ref name="get" scoped="" ref="0x2ade43ecfe78"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43ece030"/>
        <function-ref name="set" scoped="" ref="0x2ade43ece1b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43ece340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x2ade43ed0c70" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2ade43ed0c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2ade43ecf020"/>
        <function-ref name="stop" scoped="" ref="0x2ade43ecf1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Mcu" ref="0x2ade43ecbaf8" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Mcu" scoped="" ref="0x2ade43ecbaf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2ade43ecbe48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SPI" ref="0x2ade43ed2020" loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SPI" scoped="" ref="0x2ade43ed2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="initSlave" scoped="" ref="0x2ade43ed2370"/>
        <function-ref name="sleep" scoped="" ref="0x2ade43ed07c8"/>
        <function-ref name="isSpiEnabled" scoped="" ref="0x2ade43ed2680"/>
        <function-ref name="dataReady" scoped="" ref="0x2ade43ed0950"/>
        <function-ref name="initMaster" scoped="" ref="0x2ade43ed2990"/>
        <function-ref name="setMasterBit" scoped="" ref="0x2ade43ed2b18"/>
        <function-ref name="enableInterrupt" scoped="" ref="0x2ade43ed2ca0"/>
        <function-ref name="read" scoped="" ref="0x2ade43ed2e28"/>
        <function-ref name="setMasterDoubleSpeed" scoped="" ref="0x2ade43ed1020"/>
        <function-ref name="isInterruptEnabled" scoped="" ref="0x2ade43ed11a8"/>
        <function-ref name="setClock" scoped="" ref="0x2ade43ed1330"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x2ade43ed14b8"/>
        <function-ref name="setClockPolarity" scoped="" ref="0x2ade43ed1640"/>
        <function-ref name="isMasterDoubleSpeed" scoped="" ref="0x2ade43ed18c8"/>
        <function-ref name="setDataOrder" scoped="" ref="0x2ade43ed1a50"/>
        <function-ref name="write" scoped="" ref="0x2ade43ed1bd8"/>
        <function-ref name="enableSpi" scoped="" ref="0x2ade43ed1d60"/>
        <function-ref name="isMasterBitSet" scoped="" ref="0x2ade43ed0020"/>
        <function-ref name="getClockPhase" scoped="" ref="0x2ade43ed01a8"/>
        <function-ref name="getClock" scoped="" ref="0x2ade43ed0330"/>
        <function-ref name="hasWriteCollided" scoped="" ref="0x2ade43ed04b8"/>
        <function-ref name="getClockPolarity" scoped="" ref="0x2ade43ed24f8"/>
        <function-ref name="setClockPhase" scoped="" ref="0x2ade43ed2808"/>
        <function-ref name="isOrderLsbFirst" scoped="" ref="0x2ade43ed0640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MOSI" ref="0x2ade43ecd7d0" loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/HplAtm128SpiP.nc">
      <component-ref qname="HplAtm128SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MOSI" scoped="" ref="0x2ade43ecd7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2ade43ecdb20"/>
        <function-ref name="isInput" scoped="" ref="0x2ade43ecdca8"/>
        <function-ref name="toggle" scoped="" ref="0x2ade43ecde30"/>
        <function-ref name="isOutput" scoped="" ref="0x2ade43ecc020"/>
        <function-ref name="get" scoped="" ref="0x2ade43ecc1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2ade43ecc330"/>
        <function-ref name="set" scoped="" ref="0x2ade43ecc4b8"/>
        <function-ref name="clr" scoped="" ref="0x2ade43ecc640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2ade43f56020" loc="86:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2ade43f56020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2ade43f56390"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2ade43f56518"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2ade43f55020" loc="89:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2ade43f55020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2ade43f55390"/>
        <function-ref name="configure" scoped="" ref="0x2ade43f55518"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2ade43f57200" loc="85:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2ade43f57200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2ade43f57570"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2ade43f576f8"/>
        <function-ref name="request" scoped="" ref="0x2ade43f57880"/>
        <function-ref name="granted" scoped="" ref="0x2ade43f57a08"/>
        <function-ref name="isOwner" scoped="" ref="0x2ade43f57b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2ade43f56760" loc="87:/homes/hglanzer/GIT/tinyos/tos/system/SimpleFcfsArbiterC.nc">
      <component-ref qname="Atm128SpiC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2ade43f56760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2ade43f56ab0"/>
        <function-ref name="userId" scoped="" ref="0x2ade43f56c38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2ade443d5cb8" loc="44:/homes/hglanzer/GIT/tinyos/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2ade443d5cb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2ade443d40a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x2ade443d4328" loc="45:/homes/hglanzer/GIT/tinyos/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x2ade443d4328"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2ade443d4678"/>
        <function-ref name="isEmpty" scoped="" ref="0x2ade443d4800"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2ade443d4988"/>
        <function-ref name="dequeue" scoped="" ref="0x2ade443d4b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2ade443d1df8" loc="52:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2ade443d1df8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2ade443d01a8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2ade443d0330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2ade443d0e18" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2ade443d0e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2ade443cf1c0"/>
        <function-ref name="configure" scoped="" ref="0x2ade443cf348"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x2ade443cf5d0" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x2ade443cf5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2ade443cf920"/>
        <function-ref name="isEmpty" scoped="" ref="0x2ade443cfaa8"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2ade443cfc30"/>
        <function-ref name="dequeue" scoped="" ref="0x2ade443cfdb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2ade443d1100" loc="51:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2ade443d1100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2ade443d1470"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2ade443d15f8"/>
        <function-ref name="request" scoped="" ref="0x2ade443d1780"/>
        <function-ref name="granted" scoped="" ref="0x2ade443d1908"/>
        <function-ref name="isOwner" scoped="" ref="0x2ade443d1a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2ade443d0578" loc="53:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2ade443d0578"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2ade443d08c8"/>
        <function-ref name="userId" scoped="" ref="0x2ade443d0a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x2ade443ce100" loc="69:/homes/hglanzer/GIT/tinyos/tos/system/SimpleArbiterP.nc">
      <component-ref qname="Atm128SpiC.Arbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x2ade443ce100"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2ade443ce450"/>
        <function-ref name="runTask" scoped="" ref="0x2ade443ce5d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int6" ref="0x2ade43f796a0" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int6" scoped="" ref="0x2ade43f796a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43f799f0"/>
        <function-ref name="fired" scoped="" ref="0x2ade43f79b78"/>
        <function-ref name="disable" scoped="" ref="0x2ade43f79d00"/>
        <function-ref name="edge" scoped="" ref="0x2ade43f77020"/>
        <function-ref name="enable" scoped="" ref="0x2ade43f771a8"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43f77330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int1" ref="0x2ade43f7e6a0" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int1" scoped="" ref="0x2ade43f7e6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43f7e9f0"/>
        <function-ref name="fired" scoped="" ref="0x2ade43f7eb78"/>
        <function-ref name="disable" scoped="" ref="0x2ade43f7ed00"/>
        <function-ref name="edge" scoped="" ref="0x2ade43f7d020"/>
        <function-ref name="enable" scoped="" ref="0x2ade43f7d1a8"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43f7d330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int4" ref="0x2ade43f7b6a0" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int4" scoped="" ref="0x2ade43f7b6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43f7b9f0"/>
        <function-ref name="fired" scoped="" ref="0x2ade43f7bb78"/>
        <function-ref name="disable" scoped="" ref="0x2ade43f7bd00"/>
        <function-ref name="edge" scoped="" ref="0x2ade43f7a020"/>
        <function-ref name="enable" scoped="" ref="0x2ade43f7a1a8"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43f7a330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int7" ref="0x2ade43f776a0" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int7" scoped="" ref="0x2ade43f776a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43f779f0"/>
        <function-ref name="fired" scoped="" ref="0x2ade43f77b78"/>
        <function-ref name="disable" scoped="" ref="0x2ade43f77d00"/>
        <function-ref name="edge" scoped="" ref="0x2ade43f76020"/>
        <function-ref name="enable" scoped="" ref="0x2ade43f761a8"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43f76330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int2" ref="0x2ade43f7d6a0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int2" scoped="" ref="0x2ade43f7d6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43f7d9f0"/>
        <function-ref name="fired" scoped="" ref="0x2ade43f7db78"/>
        <function-ref name="disable" scoped="" ref="0x2ade43f7dd00"/>
        <function-ref name="edge" scoped="" ref="0x2ade43f7c020"/>
        <function-ref name="enable" scoped="" ref="0x2ade43f7c1a8"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43f7c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int5" ref="0x2ade43f7a6a0" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int5" scoped="" ref="0x2ade43f7a6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43f7a9f0"/>
        <function-ref name="fired" scoped="" ref="0x2ade43f7ab78"/>
        <function-ref name="disable" scoped="" ref="0x2ade43f7ad00"/>
        <function-ref name="edge" scoped="" ref="0x2ade43f79020"/>
        <function-ref name="enable" scoped="" ref="0x2ade43f791a8"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43f79330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int0" ref="0x2ade43f81708" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int0" scoped="" ref="0x2ade43f81708"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43f81a58"/>
        <function-ref name="fired" scoped="" ref="0x2ade43f81be0"/>
        <function-ref name="disable" scoped="" ref="0x2ade43f81d68"/>
        <function-ref name="edge" scoped="" ref="0x2ade43f7e020"/>
        <function-ref name="enable" scoped="" ref="0x2ade43f7e1a8"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43f7e330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Int3" ref="0x2ade43f7c6a0" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptC.nc">
      <component-ref qname="HplAtm128InterruptC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Int3" scoped="" ref="0x2ade43f7c6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43f7c9f0"/>
        <function-ref name="fired" scoped="" ref="0x2ade43f7cb78"/>
        <function-ref name="disable" scoped="" ref="0x2ade43f7cd00"/>
        <function-ref name="edge" scoped="" ref="0x2ade43f7b020"/>
        <function-ref name="enable" scoped="" ref="0x2ade43f7b1a8"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43f7b330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig6" ref="0x2ade43f6f020" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig6" scoped="" ref="0x2ade43f6f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43f6f370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig1" ref="0x2ade43f70ac8" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig1" scoped="" ref="0x2ade43f70ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43f70e18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig4" ref="0x2ade43f71108" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig4" scoped="" ref="0x2ade43f71108"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43f71458"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig7" ref="0x2ade43f6f758" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig7" scoped="" ref="0x2ade43f6f758"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43f6faa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig2" ref="0x2ade43f72240" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig2" scoped="" ref="0x2ade43f72240"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43f72590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig5" ref="0x2ade43f71840" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig5" scoped="" ref="0x2ade43f71840"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43f71b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig0" ref="0x2ade43f70390" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig0" scoped="" ref="0x2ade43f70390"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43f706e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IntSig3" ref="0x2ade43f72978" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptSigP.nc">
      <component-ref qname="HplAtm128InterruptSigP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IntSig3" scoped="" ref="0x2ade43f72978"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43f72cc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x2ade43f84a70" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x2ade43f84a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43f84dc0"/>
        <function-ref name="fired" scoped="" ref="0x2ade43fa5020"/>
        <function-ref name="disable" scoped="" ref="0x2ade43fa51a8"/>
        <function-ref name="edge" scoped="" ref="0x2ade43fa5330"/>
        <function-ref name="enable" scoped="" ref="0x2ade43fa54b8"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43fa5640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x2ade43fa5908" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fa5908"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43fa5c58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x2ade43fa27a8" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x2ade43fa27a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43fa2af8"/>
        <function-ref name="fired" scoped="" ref="0x2ade43fa2c80"/>
        <function-ref name="disable" scoped="" ref="0x2ade43fa2e08"/>
        <function-ref name="edge" scoped="" ref="0x2ade43fa1020"/>
        <function-ref name="enable" scoped="" ref="0x2ade43fa11a8"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43fa1330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x2ade43fa15f8" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fa15f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43fa1948"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x2ade43f9e3e0" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x2ade43f9e3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43f9e730"/>
        <function-ref name="fired" scoped="" ref="0x2ade43f9e8b8"/>
        <function-ref name="disable" scoped="" ref="0x2ade43f9ea40"/>
        <function-ref name="edge" scoped="" ref="0x2ade43f9ebc8"/>
        <function-ref name="enable" scoped="" ref="0x2ade43f9ed50"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43fd1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x2ade43fd12e8" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fd12e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43fd1638"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x2ade43fcd020" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x2ade43fcd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43fcd370"/>
        <function-ref name="fired" scoped="" ref="0x2ade43fcd4f8"/>
        <function-ref name="disable" scoped="" ref="0x2ade43fcd680"/>
        <function-ref name="edge" scoped="" ref="0x2ade43fcd808"/>
        <function-ref name="enable" scoped="" ref="0x2ade43fcd990"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43fcdb18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x2ade43fcdde0" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fcdde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43fcc170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x2ade43fcacd8" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x2ade43fcacd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43fc90a0"/>
        <function-ref name="fired" scoped="" ref="0x2ade43fc9228"/>
        <function-ref name="disable" scoped="" ref="0x2ade43fc93b0"/>
        <function-ref name="edge" scoped="" ref="0x2ade43fc9538"/>
        <function-ref name="enable" scoped="" ref="0x2ade43fc96c0"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43fc9848"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x2ade43fc9b10" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fc9b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43fc9e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x2ade43fc69d8" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x2ade43fc69d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43fc6d28"/>
        <function-ref name="fired" scoped="" ref="0x2ade43fc4020"/>
        <function-ref name="disable" scoped="" ref="0x2ade43fc41a8"/>
        <function-ref name="edge" scoped="" ref="0x2ade43fc4330"/>
        <function-ref name="enable" scoped="" ref="0x2ade43fc44b8"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43fc4640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x2ade43fc4908" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fc4908"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43fc4c58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x2ade43fc1970" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x2ade43fc1970"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43fc1cc0"/>
        <function-ref name="fired" scoped="" ref="0x2ade43fc1e48"/>
        <function-ref name="disable" scoped="" ref="0x2ade43fc0020"/>
        <function-ref name="edge" scoped="" ref="0x2ade43fc01a8"/>
        <function-ref name="enable" scoped="" ref="0x2ade43fc0330"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43fc04b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x2ade43fc0780" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fc0780"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43fc0ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Irq" ref="0x2ade43fbd6a8" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Irq" scoped="" ref="0x2ade43fbd6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2ade43fbd9f8"/>
        <function-ref name="fired" scoped="" ref="0x2ade43fbdb80"/>
        <function-ref name="disable" scoped="" ref="0x2ade43fbdd08"/>
        <function-ref name="edge" scoped="" ref="0x2ade43fbc020"/>
        <function-ref name="enable" scoped="" ref="0x2ade43fbc1a8"/>
        <function-ref name="getValue" scoped="" ref="0x2ade43fbc330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IrqSignal" ref="0x2ade43fbc5f8" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptPinP.nc">
      <component-ref qname="HplAtm128InterruptC.IntPin7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IrqSignal" scoped="" ref="0x2ade43fbc5f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x2ade43fbc948"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:/homes/hglanzer/GIT/tinyos/tos/interfaces/Init.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2ade43619178" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/Init.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x2ade43611e40" loc="60:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
        <documentation loc="51:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x2ade4361f290" loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x2ade4361f020" loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x2ade43623940" loc="31:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="27:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x2ade43622378" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2ade43622108" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x2ade43622e00" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2ade43622b90" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x2ade43621698" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x2ade436360d8" loc="44:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x2ade436367a0" loc="45:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x2ade43637328" loc="42:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x2ade43635570" loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2ade436379c8" loc="43:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x2ade43636e58" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2ade436395a8" loc="40:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x2ade43639c18" loc="41:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2ade435243a0" loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="54:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x2ade43522290" loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x2ade43524ab8" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x2ade4352e070" loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x2ade4352e860" loc="75:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
        <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
      <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x2ade435e1450" loc="76:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x2ade435f7d28" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x2ade4357d1a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x2ade436016d8" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2ade437e0338" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2ade437e0338"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2ade437ec020" loc="136:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="132:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2ade437f1710" loc="83:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="80:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x2ade437ef5b8" loc="114:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="100:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2ade437ef020" loc="114:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2ade437ef338" loc="114:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x2ade437f07b8" loc="98:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="94:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x2ade437eb020" loc="151:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="146:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x2ade437ec740" loc="144:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="138:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2ade437f0020" loc="92:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="86:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x2ade437e0e08" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2ade437e0b98" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x2ade437ed5b8" loc="129:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="116:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2ade437ed020" loc="129:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2ade437ed338" loc="129:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x2ade437f28a0" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2ade437f2630" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2ade437f1070" loc="78:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GLCD" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
      <function command="" provided="0" name="startClearScreen" ref="0x2ade437e8d80" loc="66:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2ade437e8b10" loc="66:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="tsPressed" ref="0x2ade437cc510" loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initDone" ref="0x2ade437e7438" loc="68:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteBar" ref="0x2ade437dac18" loc="56:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ade437da020" loc="56:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade437da320" loc="56:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x2ade437da650" loc="56:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="width" ref="0x2ade437da978" loc="56:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isPressed" ref="0x2ade437ceb40" loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x2ade437ce8d0" loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="calibrated" ref="0x2ade437cde58" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateTouchScreen" ref="0x2ade437d1c30" loc="8:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteLine" ref="0x2ade437e8410" loc="64:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ade437d57d8" loc="64:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade437d5ad8" loc="64:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="xEnd" ref="0x2ade437d5df8" loc="64:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="yEnd" ref="0x2ade437e8170" loc="64:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getXY" ref="0x2ade437ce2a8" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteRectangle" ref="0x2ade437d8020" loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ade437d9320" loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade437d9620" loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="a" ref="0x2ade437d9920" loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="b" ref="0x2ade437d9c20" loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="barWritten" ref="0x2ade437e46a0" loc="78:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="lineWritten" ref="0x2ade437e4020" loc="76:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="screenCleared" ref="0x2ade437e4d40" loc="80:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteString" ref="0x2ade437d5128" loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2ade437d7818" loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="x" ref="0x2ade437d7b18" loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade437d7e18" loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="xyReady" ref="0x2ade437cd7b8" loc="19:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ade437cd228" loc="19:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade437cd538" loc="19:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="writeByte" ref="0x2ade437ded40" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ade437de490" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade437de790" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x2ade437deab0" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPixel" ref="0x2ade437dc8a0" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ade437dc320" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade437dc620" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="circleWritten" ref="0x2ade437e7ad8" loc="70:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteCircle" ref="0x2ade437d7040" loc="60:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="xcenter" ref="0x2ade437d8720" loc="60:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="ycenter" ref="0x2ade437d8a58" loc="60:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="radius" ref="0x2ade437d8d88" loc="60:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="rectangleWritten" ref="0x2ade437e6860" loc="74:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writePixel" ref="0x2ade437ddca0" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ade437dd408" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade437dd708" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="on" ref="0x2ade437dda10" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initLCD" ref="0x2ade437ccdf8" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2ade437ccb88" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stringWritten" ref="0x2ade437e61a0" loc="72:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UDP" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDP.nc">
      <function event="" provided="0" name="initDone" ref="0x2ade437f7bd8" loc="7:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDP.nc">
        <interfacedef-ref qname="UDP"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="initStack" ref="0x2ade437f7568" loc="5:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDP.nc">
        <interfacedef-ref qname="UDP"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sendData" ref="0x2ade437f9e78" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDP.nc">
        <interfacedef-ref qname="UDP"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dataPtr" ref="0x2ade437fce30" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDP.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="destPtr" ref="0x2ade437f9208" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDP.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="srcPort" ref="0x2ade437f9550" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDP.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
          <variable name="destPort" ref="0x2ade437f98a8" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDP.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
          <variable name="len" ref="0x2ade437f9bc8" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDP.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="gotDatagram" ref="0x2ade437f5860" loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDP.nc">
        <interfacedef-ref qname="UDP"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="len" ref="0x2ade437f5270" loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDP.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
          <variable name="dataPtr" ref="0x2ade437f55e0" loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDP.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="hwInterrupt" ref="0x2ade437f6bb0" loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDP.nc">
        <interfacedef-ref qname="UDP"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="info" ref="0x2ade437f6940" loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDP.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x2ade437f6290" loc="9:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/udp/UDP.nc">
        <interfacedef-ref qname="UDP"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LCD128x64" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
      <function command="" provided="0" name="startClearScreen" ref="0x2ade43841590" loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2ade43841320" loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="initDone" ref="0x2ade43841c00" loc="38:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteBar" ref="0x2ade438475e8" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ade43833920" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade43833c20" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x2ade43847020" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="width" ref="0x2ade43847348" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteLine" ref="0x2ade43842c00" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ade43842020" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade43842320" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="xEnd" ref="0x2ade43842640" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="yEnd" ref="0x2ade43842960" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="barWritten" ref="0x2ade43853020" loc="48:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteRectangle" ref="0x2ade438468c0" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ade43847c80" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade43846020" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="a" ref="0x2ade43846320" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="b" ref="0x2ade43846620" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="screenCleared" ref="0x2ade438536c0" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="lineWritten" ref="0x2ade4383e860" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteString" ref="0x2ade438448b0" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2ade43844020" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="x" ref="0x2ade43844320" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade43844620" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="writeByte" ref="0x2ade43835748" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ade43836e58" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade43835198" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x2ade438354b8" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPixel" ref="0x2ade438332a0" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ade43834cf0" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade43833020" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="circleWritten" ref="0x2ade43840328" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteCircle" ref="0x2ade43845918" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="xcenter" ref="0x2ade43845020" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="ycenter" ref="0x2ade43845358" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="radius" ref="0x2ade43845688" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="rectangleWritten" ref="0x2ade4383e1d8" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writePixel" ref="0x2ade438346a0" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ade43835da8" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade43834108" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="on" ref="0x2ade43834410" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initLCD" ref="0x2ade43836800" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2ade43836590" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stringWritten" ref="0x2ade438409c8" loc="42:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TouchScreen" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
      <function event="" provided="0" name="tsPressed" ref="0x2ade43837020" loc="13:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isPressed" ref="0x2ade4383ad20" loc="6:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x2ade4383aab0" loc="6:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getXY" ref="0x2ade4383a488" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="xyReady" ref="0x2ade43839940" loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ade438393b0" loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2ade438396c0" loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x2ade4389b410" loc="49:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2ade4389b410"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x2ade4389bc48" loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
        <documentation loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x2ade43898910" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2ade4389b410"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x2ade43898390" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x2ade43898690" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2ade4389b410"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcConfig" loc="19:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
      <documentation loc="13:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <short>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.</short>
        <long>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRefVoltage" ref="0x2ade438a8e00" loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="27:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain reference voltage&#10; </short>
          <long>&#10; Obtain reference voltage&#10; @return The reference voltage to use. Must be one of the &#10;   ATM128_ADC_VREF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x2ade438a8618" loc="25:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="20:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain channel.</short>
          <long>&#10; Obtain channel.&#10; @return The A/D channel to use. Must be one of the ATM128_ADC_SNGL_xxx&#10;   or ATM128_ADC_DIFF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPrescaler" ref="0x2ade438a7658" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain prescaler value.</short>
          <long>&#10; Obtain prescaler value.&#10; @return The prescaler value to use. Must be one of the &#10;   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x2ade438cdb50" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x2ade438cd3a0" loc="59:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x2ade438de378" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2ade438de378"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x2ade438debe8" loc="58:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x2ade438dd8e8" loc="66:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
        <documentation loc="60:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2ade438de378"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x2ade438dd368" loc="66:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x2ade438dd668" loc="66:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2ade438de378"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
      <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x2ade438d7c78" loc="120:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="104:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x2ade438d8d50" loc="97:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="90:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x2ade438d8460" loc="88:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="78:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x2ade438d7518" loc="102:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="99:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x2ade438d5848" loc="128:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="122:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcMultiple" loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.&#10; &#60;p>&#10; Because of the possibility that samples may be imprecise after &#10; switching channels and/or reference voltages, and because there&#10; is a one sample delay on swithcing channels and reference voltages,&#10; Atm128ADCMultiple is complex. Two straightforward uses are:&#10; &#60;ol type=&#34;A&#34;>&#10; &#60;li>Acquire N samples from channel C:&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C at the desired rate&#10;       (note that the choice of prescalers is very limited, so you&#10;       don't have many choices for sampling rate)&#10;    &#60;li>ignore the first dataReady event&#10;    &#60;li>use the results of the next N dataReady() events, return FALSE&#10;       on the last one&#10;    &#60;/ol>&#10; &#60;li>Acquire one sample each from channels C1, ..., Cn (this pseudocode&#10;    assumes that none of these channels are differential)&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C1&#10;    &#60;li>on the ith dataReady event switch to channel Ci+1 by changing&#10;       *newChannel&#10;    &#60;li>the data passed to the ith dataReady event is for channel Ci-1&#10;       (the data from the first dataReady event is ignored)&#10;    &#60;/ol>&#10; &#60;/ol>&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x2ade438e1768" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.</short>
          <long>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.&#10;&#10; @param channel Initial A/D conversion channel. The channel can &#10;   be changed in the dataReady event, though these changes happen&#10;   with a one-sample delay (this is a hardware restriction).&#10; @param refVoltage Initial A/D reference voltage. See the&#10;   ATM128_ADC_VREF_xxx constants in Atm128ADC.h. Like the channel,&#10;   the reference voltage can be changed in the dataReady event with&#10;   a one-sample delay.&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in reference voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x2ade438e2a60" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x2ade438e2db8" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x2ade438e1178" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x2ade438e14c8" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2ade438f63f0" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Returns the next sample in a free-running conversion.</short>
          <long>&#10; Returns the next sample in a free-running conversion. Allow the user&#10; to switch channels and/or reference voltages with a one sample delay.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if this conversion was precise, FALSE if it wasn't &#10;   (we assume that the second conversion after a change of reference&#10;   voltage or after switching to a differential channel is precise)&#10; @param channel Channel this sample was from.&#10; @param newChannel Change this parameter to switch to a new channel&#10;   for the second next sample.&#10; @param newRefVoltage Change this parameter to change the reference &#10;   voltage for the second next sample.&#10;&#10; @return TRUE to continue sampling, FALSE to stop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2ade438e0368" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x2ade438e0688" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0x2ade438e09c0" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="newChannel" ref="0x2ade438e0d70" loc="120:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="newRefVoltage" ref="0x2ade438f6140" loc="120:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcSingle" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x2ade438e60d8" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Initiates an ADC conversion on a given channel.</short>
          <long>&#10; Initiates an ADC conversion on a given channel.&#10;&#10; @param channel A/D conversion channel.&#10; @param refVoltage Select reference voltage for A/D conversion. See&#10;   the ATM128_ADC_VREF_xxx constants in Atm128ADC.h&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in refernce voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x2ade438e73d8" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x2ade438e7730" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x2ade438e7a98" loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x2ade438e7de8" loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2ade438e4930" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Cancel an outstanding getData operation.</short>
          <long>&#10; Cancel an outstanding getData operation. Use with care, to&#10; avoid problems with races between the dataReady event and cancel.&#10; @return TRUE if a conversion was in-progress or an interrupt&#10;   was pending. dataReady will not be signaled. FALSE if the&#10;   conversion was already complete. dataReady will be (or has&#10;   already been) signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2ade438e40b8" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.</short>
          <long>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if the conversion precise, FALSE if it wasn't. This&#10;   values matches the result from the &#60;code>getData&#60;/code> call.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2ade438e6ae0" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x2ade438e6e00" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Adc" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <short>&#10; HPL interface to the Atmega128 A/D conversion subsystem.</short>
        <long>&#10; HPL interface to the Atmega128 A/D conversion subsystem. Please see the&#10; Atmega128 manual for full details on the functioning of this subsystem.&#10; &#60;p>&#10; A word of warning: the Atmega128 SLEEP instruction initiates an A/D&#10; conversion when the ADC and ADC interrupt are enabled.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0x2ade438fd0d8" loc="114:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="111:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdmux" ref="0x2ade438ed1d8" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Read the ADMUX (ADC selection) register&#10; @return Current ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2ade43597478"/>
            <typename><typedef-ref name="Atm128Admux_t" ref="0x2ade43597930"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPrescaler" ref="0x2ade438fa338" loc="140:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="135:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set ADC prescaler selection bits&#10; </short>
          <long>&#10; Set ADC prescaler selection bits&#10; @param scale New ADC prescaler. Must be one of the ATM128_ADC_PRESCALE_xxx&#10;   values from Atm128Adc.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x2ade438fa0c8" loc="140:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x2ade438fd918" loc="122:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="118:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is ADC enabled?&#10; </short>
          <long>&#10; Is ADC enabled?&#10; @return TRUE if the ADC is enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAdc" ref="0x2ade43902d18" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdmux" ref="0x2ade438edbb0" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Set the ADMUX (ADC selection) register&#10; @param admux New ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2ade43597478"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x2ade43597930"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="admux" ref="0x2ade438ed940" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2ade43597478"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x2ade43597930"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterruption" ref="0x2ade43901b88" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isComplete" ref="0x2ade438fc870" loc="133:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="128:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.</short>
          <long>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.&#10; @return TRUE if the A/D conversion is complete, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2ade438faad0" loc="150:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="142:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Cancel A/D conversion and any pending A/D interrupt.</short>
          <long>&#10; Cancel A/D conversion and any pending A/D interrupt. Also disables the&#10; ADC interruption (otherwise a sample might start at the next sleep&#10; instruction). This command can assume that the A/D converter is enabled. &#10; @return TRUE if an A/D conversion was in progress or an A/D interrupt&#10;   was pending, FALSE otherwise. In single conversion mode, a return&#10;   of TRUE implies that the dataReady event will not be signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAdc" ref="0x2ade43901448" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetInterrupt" ref="0x2ade438ffa48" loc="99:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="96:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Clear the ADC interrupt flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterruption" ref="0x2ade438ff328" loc="95:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x2ade438fe1d8" loc="106:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Start ADC conversion.</short>
          <long>&#10; Start ADC conversion. If ADC interrupts are enabled, the dataReady event&#10; will be signaled once (in non-continuous mode) or repeatedly (in&#10; continuous mode).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isStarted" ref="0x2ade438fc0d8" loc="127:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="123:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion in progress?&#10; </short>
          <long>&#10; Is A/D conversion in progress?&#10; @return TRUE if the A/D conversion is in progress, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdcsra" ref="0x2ade438ebdd0" loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Set the ADCSRA (ADC control) register&#10; @param adcsra New ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2ade4359f020"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2ade4359f6e8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adcsra" ref="0x2ade438ebb60" loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2ade4359f020"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2ade4359f6e8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setContinuous" ref="0x2ade438fe990" loc="110:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="107:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdcsra" ref="0x2ade438eb3e0" loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Read the ADCSRA (ADC control) register&#10; @return Current ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2ade4359f020"/>
            <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2ade4359f6e8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x2ade439025b8" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the latest A/D conversion result&#10; </short>
          <long>&#10; Read the latest A/D conversion result&#10; @return A/D value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2ade438f9640" loc="156:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="152:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; A/D interrupt occured&#10; </short>
          <long>&#10; A/D interrupt occured&#10; @param data Latest A/D conversion result&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2ade438f93d0" loc="156:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x2ade438f0020" loc="95:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2ade438f07f8" loc="105:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x2ade4396f4b0" loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x2ade4396fd78" loc="61:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x2ade4396b1d8" loc="56:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x2ade439841d8" loc="73:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x2ade43970958" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x2ade4396b9d8" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x2ade43984aa0" loc="81:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x2ade43982820" loc="90:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x2ade43980070" loc="98:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x2ade43991620" loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2ade439838a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x2ade439913b0" loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2ade439838a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x2ade43979720" loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x2ade43978290" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2ade439838a8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x2ade43978020" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2ade439838a8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x2ade43978b30" loc="70:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x2ade439838a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x2ade439a5020" loc="61:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="58:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x2ade439a5758" loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x2ade439a4020" loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x2ade439a4e70" loc="83:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x2ade439a1480" loc="100:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="96:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2ade439a1c18" loc="117:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="103:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x2ade439a4738" loc="77:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="74:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2ade439bc768" loc="134:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="120:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x2ade439bc4f8" loc="134:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPort" ref="0x2ade439bb600" loc="137:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x2ade439bb060" loc="137:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
          <variable name="pval" ref="0x2ade439bb380" loc="137:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x2ade439a67e0" loc="56:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x2ade439a2608" loc="89:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="86:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x2ade439a2d20" loc="94:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="91:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x2ade439fa020" loc="62:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2ade43b6a340" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2ade43b6a340"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x2ade43b6abd0" loc="61:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2ade43320db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2ade43b7d7b8" loc="57:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2ade43b7d7b8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2ade43b7d9e8" loc="57:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ade43b7d9e8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x2ade43b7a2a8" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ade43b7d9e8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x2ade43b79328" loc="76:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x2ade43b7aac0" loc="71:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x2ade43b79a18" loc="82:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="78:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2ade43b64528" loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2ade43b64528"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2ade43b64758" loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ade43b64758"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2ade43b5f020" loc="109:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="105:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ade43b64758"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2ade43b611d8" loc="78:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x2ade43b606c0" loc="103:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="90:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ade43b64758"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ade43b64758"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2ade43b60120" loc="103:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ade43b64758"/></type-var>
          </variable>
          <variable name="dt" ref="0x2ade43b60440" loc="103:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ade43b64758"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2ade43b61948" loc="88:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="81:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x2ade43b5f7a0" loc="116:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="111:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ade43b64758"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2ade43b62290" loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ade43b64758"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2ade43b62020" loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ade43b64758"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2ade43b62a60" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="68:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControl" ref="0x2ade43b97020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <documentation loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ade435aaa08"/>
            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2ade435aae10"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x2ade43b95360" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <documentation loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ade435b7100"/>
            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2ade435b7508"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x2ade43b961d8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ade435ae980"/>
            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2ade435aed88"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x2ade43b96b90" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ade435ae980"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2ade435aed88"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x2ade43b96920" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ade435ae980"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2ade435aed88"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x2ade43b95d18" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ade435b7100"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2ade435b7508"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x2ade43b95aa8" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ade435b7100"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2ade435b7508"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x2ade43b979f0" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ade435aaa08"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2ade435aae10"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x2ade43b97780" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ade435aaa08"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2ade435aae10"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerSync" loc="22:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setTimer0Synchronous" ref="0x2ade43bab4e8" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Turn on timer 0 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBusy" ref="0x2ade43babbf0" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; @return TRUE if TCCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareBusy" ref="0x2ade43baa3e0" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; @return TRUE if OCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x2ade43baab90" loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; @return TRUE if TCNT0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x2ade43bad328" loc="28:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="24:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Read timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer0 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ade435b1118"/>
            <typename><typedef-ref name="Atm128Assr_t" ref="0x2ade435b1520"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x2ade43badcd8" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Set timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer0 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ade435b1118"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x2ade435b1520"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2ade43bada68" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2ade435b1118"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x2ade435b1520"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x2ade43b99420" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ade43b99420"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x2ade43bb3a40" loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2ade43bb5d88" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2ade43b99cd8" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ade43b99420"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x2ade43bb44c0" loc="62:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x2ade43bb21d8" loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2ade43bb5648" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ade43b99420"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x2ade43bb53d8" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2ade43b99420"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2ade43bb4bb8" loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2ade43bb3328" loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x2ade43b83680" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2ade43b83680"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x2ade43ba0cf0" loc="98:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="97:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x2ade43ba2e20" loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2ade43ba4020" loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2ade43b83680"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x2ade43b9f690" loc="104:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x2ade43b9f420" loc="104:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x2ade43b9fe10" loc="110:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="106:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x2ade43ba37f8" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x2ade43ba30d8" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x2ade43ba05c8" loc="93:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="89:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2ade43ba4958" loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2ade43b83680"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x2ade43ba46e8" loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2ade43b83680"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2ade43ba2020" loc="78:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2ade43ba2708" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="IP" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IP.nc">
      <function event="" provided="0" name="initDone" ref="0x2ade43d1ce58" loc="7:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IP.nc">
        <interfacedef-ref qname="IP"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="initStack" ref="0x2ade43d1c7e8" loc="5:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IP.nc">
        <interfacedef-ref qname="IP"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="gotDatagram" ref="0x2ade43d1aac8" loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IP.nc">
        <interfacedef-ref qname="IP"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="len" ref="0x2ade43d1a4e0" loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IP.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
          <variable name="udpPtr" ref="0x2ade43d1a848" loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IP.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="hwInterrupt" ref="0x2ade43d1be28" loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IP.nc">
        <interfacedef-ref qname="IP"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="info" ref="0x2ade43d1bbb8" loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IP.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendDatagram" ref="0x2ade43d1c128" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IP.nc">
        <interfacedef-ref qname="IP"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="updPtr" ref="0x2ade43d207a8" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IP.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="destIP" ref="0x2ade43d20b10" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IP.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2ade43d20e30" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IP.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x2ade43d1b508" loc="9:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/ip/IP.nc">
        <interfacedef-ref qname="IP"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="IEEE8023" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023.nc">
      <function event="" provided="0" name="initDone" ref="0x2ade43d440f8" loc="16:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023.nc">
        <interfacedef-ref qname="IEEE8023"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="gotDatagram" ref="0x2ade43d43dc0" loc="23:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023.nc">
        <interfacedef-ref qname="IEEE8023"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="len" ref="0x2ade43d43790" loc="23:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
          <variable name="IEEE8023frame" ref="0x2ade43d43b40" loc="23:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x2ade43d496b8" loc="8:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023.nc">
        <interfacedef-ref qname="IEEE8023"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sendFrame" ref="0x2ade43d46a60" loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023.nc">
        <interfacedef-ref qname="IEEE8023"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dataPtr" ref="0x2ade43d49dd8" loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="dstMAC" ref="0x2ade43d46180" loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2ade43d464a0" loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
          <variable name="type" ref="0x2ade43d467c0" loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="hwInterrupt" ref="0x2ade43d43108" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023.nc">
        <interfacedef-ref qname="IEEE8023"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="info" ref="0x2ade43d44e18" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x2ade43d44768" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/eth/IEEE8023.nc">
        <interfacedef-ref qname="IEEE8023"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiByte.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x2ade43dcc020" loc="45:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiByte.nc">
        <documentation loc="40:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x2ade43dd3d28" loc="45:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Interrupt" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <short>&#10; Interface to an Atmega128 external interrupt pin&#10;&#10; </short>
        <long>&#10; Interface to an Atmega128 external interrupt pin&#10;&#10; @author Joe Polastre&#10; @author Martin Turon&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x2ade43dd1940" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Clears the ATmega128 Interrupt Pending Flag for a particular port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2ade43dcf290" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x2ade43dd1258" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Disables ATmega128 hardware interrupt on a particular port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0x2ade43dd0aa8" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Sets whether the edge should be high to low or low to high.</short>
          <long> &#10; Sets whether the edge should be high to low or low to high.&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0x2ade43dd0838" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x2ade43dd4b28" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Enables ATmega128 hardware interrupt on a particular port&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x2ade43dd00d8" loc="63:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
        <documentation loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128Interrupt.nc">
          <short> &#10; Gets the current value of the input voltage of a port&#10;&#10; </short>
          <long> &#10; Gets the current value of the input voltage of a port&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="54:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both. It is a &#34;send&#34; command because reading&#10; from the SPI requires writing bytes. The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.8 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x2ade43e355d0" loc="70:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
        <documentation loc="56:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x2ade43e3cb38" loc="70:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x2ade43e35020" loc="70:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2ade43e35340" loc="70:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x2ade43e34968" loc="82:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
        <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x2ade43e33cb0" loc="82:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x2ade43e34060" loc="82:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2ade43e34380" loc="82:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2ade43320378"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x2ade43e346c8" loc="83:/homes/hglanzer/GIT/tinyos/tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2ade43528ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;call FastSpiByte.spiSplitWrite(data[0]); // start the first byte&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  call FastSpiByte.spiSplitReadWrite(data[i]);&#10;&#9;}&#10;&#9;call FastSpiByte.spiSlitRead(); // finish the last byte&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x2ade43e3a290" loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
        <documentation loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2ade43e3a020" loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x2ade43e39578" loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
        <documentation loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2ade43e39308" loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x2ade43e3aa90" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x2ade43e38020" loc="76:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
        <documentation loc="71:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2ade43e39d10" loc="76:/homes/hglanzer/GIT/tinyos/tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Spi" loc="78:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
      <function command="" provided="0" name="initSlave" ref="0x2ade43e4dd30" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into slave mode.</short>
          <long> Initialize the ATmega128 SPI bus into slave mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPolarity" ref="0x2ade43e715c0" loc="126:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpiEnabled" ref="0x2ade43e74258" loc="117:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPhase" ref="0x2ade43e6f020" loc="128:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sampleOnTrailing" ref="0x2ade43e71cf8" loc="128:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initMaster" ref="0x2ade43e4d5f0" loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Initialize the ATmega128 SPI bus into master mode.</short>
          <long> Initialize the ATmega128 SPI bus into master mode. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterBit" ref="0x2ade43e73c78" loc="122:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="isMaster" ref="0x2ade43e73a08" loc="122:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterrupt" ref="0x2ade43e77a38" loc="113:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enabled" ref="0x2ade43e777c8" loc="113:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x2ade43e4cbf0" loc="97:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="93:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Read the SPI data register &#10; </short>
          <long> &#10; Read the SPI data register &#10; @return last data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterDoubleSpeed" ref="0x2ade43e6b960" loc="142:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x2ade43e6b6f0" loc="142:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptEnabled" ref="0x2ade43e761d8" loc="114:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClock" ref="0x2ade43e6e0a8" loc="131:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="speed" ref="0x2ade43e6fdd8" loc="131:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x2ade43e6d020" loc="137:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPolarity" ref="0x2ade43e72e48" loc="125:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="highWhenIdle" ref="0x2ade43e72bd8" loc="125:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterDoubleSpeed" ref="0x2ade43e6b020" loc="141:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDataOrder" ref="0x2ade43e74ba8" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lsbFirst" ref="0x2ade43e74938" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x2ade43e4a578" loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="99:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
          <short> &#10; Write the SPI data register &#10; </short>
          <long> &#10; Write the SPI data register &#10; @param data   next data byte&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2ade43e4a308" loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x2ade43e76ae8" loc="116:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="busOn" ref="0x2ade43e76878" loc="116:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isMasterBitSet" ref="0x2ade43e724a8" loc="123:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPhase" ref="0x2ade43e6f728" loc="129:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClock" ref="0x2ade43e6e798" loc="132:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="hasWriteCollided" ref="0x2ade43e6d768" loc="139:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOrderLsbFirst" ref="0x2ade43e73328" loc="120:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2ade4351f4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x2ade43e4c488" loc="89:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
          <short> Disable and sleep the ATmega128 SPI bus.</short>
          <long> Disable and sleep the ATmega128 SPI bus. *</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2ade43e77020" loc="109:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
        <documentation loc="105:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
          <short>&#10; Interrupt signalling SPI data cycle is complete.</short>
          <long>&#10; Interrupt signalling SPI data cycle is complete. &#10; @param data   data byte from data register&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2ade43e4ac90" loc="109:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/spi/Atm128Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2ade4331e910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128InterruptSig" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
        <short>&#10; Interface to an Atmega128 external interrupt pin that exposes just the&#10; interrupt vector routine for easy linking to generic components (see&#10; HplAtm128Interrupt for the full interface).</short>
        <long>&#10; Interface to an Atmega128 external interrupt pin that exposes just the&#10; interrupt vector routine for easy linking to generic components (see&#10; HplAtm128Interrupt for the full interface).&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @see HplAtm128Interrupt&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x2ade43f70020" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
        <documentation loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128InterruptSig.nc">
          <short>&#10; Signalled when an interrupt occurs on a pin&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128InterruptSig"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
