<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="18:BlinkAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2b34ed17fd60"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2b34ecfc7220"/></to>
    </wire>
    <wire loc="72:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2b34ecfc7220"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2b34ed177198"/></to>
    </wire>
    <wire loc="19:BlinkAppC.nc">
      <from><interface-ref name="Timer0" scoped="" ref="0x2b34ed198578"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b34ed5e5420"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x2b34ed5e5420"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2b34ed602510"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="20:BlinkAppC.nc">
      <from><interface-ref name="GLCD" scoped="" ref="0x2b34ed17d020"/></from>
      <to><interface-ref name="GLCD" scoped="" ref="0x2b34ed1da020"/></to>
    </wire>
    <wire loc="9:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDC.nc">
      <from><interface-ref name="GLCD" scoped="" ref="0x2b34ed1da020"/></from>
      <to><interface-ref name="GLCD" scoped="" ref="0x2b34ed1e9a50"/></to>
    </wire>
    <wire loc="21:BlinkAppC.nc">
      <from><interface-ref name="bigAVR6UART0" scoped="" ref="0x2b34ed1a0548"/></from>
      <to><interface-ref name="bigAVR6UART0" scoped="" ref="0x2b34ed4f1ad0"/></to>
    </wire>
    <wire loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0C.nc">
      <from><interface-ref name="bigAVR6UART0" scoped="" ref="0x2b34ed4f1ad0"/></from>
      <to><interface-ref name="bigAVR6UART0" scoped="" ref="0x2b34ed4eb140"/></to>
    </wire>
    <wire loc="53:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b34ecfc6620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b34ed5fde48"/></to>
    </wire>
    <wire loc="72:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b34ecfc6620"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0x2b34ed592190"/></to>
    </wire>
    <wire loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b34ecfc6620"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0x2b34ed58e020"/></to>
    </wire>
    <wire loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b34ecfc6620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b34ed525610"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b34ecfc6620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b34edae8520"/></to>
    </wire>
    <wire loc="67:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2b34ed1777d0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2b34ececf600"/></to>
    </wire>
    <wire loc="53:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2b34ececf600"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2b34ecf86448"/></to>
    </wire>
    <wire loc="68:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2b34ed1761d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b34ecfc9620"/></to>
    </wire>
    <wire loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b34ecfc9620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b34ecfd8600"/></to>
    </wire>
    <wire loc="71:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2b34ed176898"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x2b34ecfc6620"/></to>
    </wire>
    <wire loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2b34ecfc4380"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b34ed2a0698"/></to>
    </wire>
    <wire loc="59:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b34ecfcc618"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b34ed1598f0"/></to>
    </wire>
    <wire loc="61:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x2b34ecfd7398"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b34ed1592c0"/></to>
    </wire>
    <wire loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x2b34ecfd8ca0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2b34ecfd1b98"/></to>
    </wire>
    <wire loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2b34ecfd1b98"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2b34ecfdb698"/></to>
    </wire>
    <wire loc="63:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2b34ecfde360"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2b34ecfc4380"/></to>
    </wire>
    <wire loc="29:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2b34ecfdab08"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2b34ecfde360"/></to>
    </wire>
    <wire loc="191:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x2b34ed023af0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed0fc970"/></to>
    </wire>
    <wire loc="165:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x2b34ed005658"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b34ed0a3020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b34ed0a3020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed927710"/></to>
    </wire>
    <wire loc="176:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x2b34ed016658"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b34ed0b2d60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b34ed0b2d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed989710"/></to>
    </wire>
    <wire loc="185:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x2b34ed01b348"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b34ed0b45b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b34ed0b45b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed9f7710"/></to>
    </wire>
    <wire loc="143:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x2b34ecff1348"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b34ed07a740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b34ed07a740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed808710"/></to>
    </wire>
    <wire loc="183:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x2b34ed01d020"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b34ed0b62a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b34ed0b62a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed9fd710"/></to>
    </wire>
    <wire loc="146:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x2b34ecfef658"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b34ed082930"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b34ed082930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed83f6a8"/></to>
    </wire>
    <wire loc="157:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x2b34ed0007e0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b34ed091740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b34ed091740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed8c3710"/></to>
    </wire>
    <wire loc="168:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x2b34ed010af0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b34ed09f430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b34ed09f430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed91e710"/></to>
    </wire>
    <wire loc="179:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x2b34ed013af0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b34ed0ae120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b34ed0ae120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed980710"/></to>
    </wire>
    <wire loc="138:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x2b34ecfe9af0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b34ed06f020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b34ed06f020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed7ea710"/></to>
    </wire>
    <wire loc="149:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x2b34ecffaaf0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b34ed07fd60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b34ed07fd60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed866710"/></to>
    </wire>
    <wire loc="160:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x2b34ecffdc78"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b34ed08ebd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b34ed08ebd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed8ba710"/></to>
    </wire>
    <wire loc="171:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x2b34ed00c020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b34ed09c8c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b34ed09c8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed947710"/></to>
    </wire>
    <wire loc="188:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x2b34ed0187e0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b34ed0c3a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b34ed0c3a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed9ee710"/></to>
    </wire>
    <wire loc="194:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x2b34ed01f7e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed111020"/></to>
    </wire>
    <wire loc="174:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x2b34ed00a348"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b34ed0a4a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b34ed0a4a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed98f710"/></to>
    </wire>
    <wire loc="141:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x2b34ecff3020"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b34ed06c430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b34ed06c430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed7e1710"/></to>
    </wire>
    <wire loc="152:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x2b34ecff61a0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b34ed08b120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b34ed08b120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed85c710"/></to>
    </wire>
    <wire loc="192:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x2b34ed0214d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed109ab0"/></to>
    </wire>
    <wire loc="155:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x2b34ed0024d0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b34ed093500"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b34ed093500"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed8c96a8"/></to>
    </wire>
    <wire loc="166:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x2b34ed0047e0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b34ed0a2120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b34ed0a2120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed924710"/></to>
    </wire>
    <wire loc="177:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x2b34ed0157e0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b34ed0b1e18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b34ed0b1e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed986710"/></to>
    </wire>
    <wire loc="186:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x2b34ed01a4d0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b34ed0c5740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b34ed0c5740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed9f4710"/></to>
    </wire>
    <wire loc="144:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x2b34ecff04d0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b34ed0798c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b34ed0798c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed805710"/></to>
    </wire>
    <wire loc="147:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x2b34ecfee7e0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b34ed081a50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b34ed081a50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed83c710"/></to>
    </wire>
    <wire loc="158:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x2b34ecfff968"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b34ed0908c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b34ed0908c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed8c0710"/></to>
    </wire>
    <wire loc="169:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x2b34ed00fc78"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b34ed09e5b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b34ed09e5b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed91b710"/></to>
    </wire>
    <wire loc="180:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x2b34ed012c78"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b34ed0ad2a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b34ed0ad2a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed9b0710"/></to>
    </wire>
    <wire loc="139:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x2b34ecfe8c78"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b34ed06e120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b34ed06e120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed7e7710"/></to>
    </wire>
    <wire loc="150:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x2b34ecff9c78"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b34ed07ee18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b34ed07ee18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed863710"/></to>
    </wire>
    <wire loc="161:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x2b34ecffce00"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b34ed08cd60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b34ed08cd60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed8b6710"/></to>
    </wire>
    <wire loc="189:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x2b34ed024968"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b34ed0c2bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b34ed0c2bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed9eb710"/></to>
    </wire>
    <wire loc="164:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x2b34ed0061a0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b34ed095e40"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b34ed095e40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed92a6a8"/></to>
    </wire>
    <wire loc="175:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x2b34ed0174d0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b34ed0b3bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b34ed0b3bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed98c710"/></to>
    </wire>
    <wire loc="184:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x2b34ed01c1a0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b34ed0b5430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b34ed0b5430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed9fa710"/></to>
    </wire>
    <wire loc="195:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x2b34ed02c968"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed11e180"/></to>
    </wire>
    <wire loc="142:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x2b34ecff21a0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b34ed07b5b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b34ed07b5b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed80b710"/></to>
    </wire>
    <wire loc="153:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x2b34ecff5348"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b34ed08a2a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b34ed08a2a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed859710"/></to>
    </wire>
    <wire loc="182:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x2b34ed011e00"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b34ed0b71e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b34ed0b71e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34eda006a8"/></to>
    </wire>
    <wire loc="156:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x2b34ed001658"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2b34ed0925b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2b34ed0925b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed8c6710"/></to>
    </wire>
    <wire loc="167:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x2b34ed003968"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b34ed0a02a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b34ed0a02a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed921710"/></to>
    </wire>
    <wire loc="178:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x2b34ed014968"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b34ed0af020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b34ed0af020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed983710"/></to>
    </wire>
    <wire loc="187:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x2b34ed019658"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b34ed0c48c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b34ed0c48c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed9f1710"/></to>
    </wire>
    <wire loc="137:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x2b34ecfdc870"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b34ed071dc0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b34ed071dc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed7ed6a8"/></to>
    </wire>
    <wire loc="148:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x2b34ecffb968"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2b34ed080bd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2b34ed080bd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed869710"/></to>
    </wire>
    <wire loc="159:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x2b34ecffeaf0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2b34ed08fa50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2b34ed08fa50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed8bd710"/></to>
    </wire>
    <wire loc="170:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x2b34ed00ee00"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2b34ed09d740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2b34ed09d740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed918710"/></to>
    </wire>
    <wire loc="193:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x2b34ed020658"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed105c38"/></to>
    </wire>
    <wire loc="173:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x2b34ed00b1a0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2b34ed0a5930"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2b34ed0a5930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed9926a8"/></to>
    </wire>
    <wire loc="162:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x2b34ed007020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2b34ed09be18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2b34ed09be18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed8b3710"/></to>
    </wire>
    <wire loc="140:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x2b34ecfe7e00"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2b34ed06d2a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2b34ed06d2a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed7e4710"/></to>
    </wire>
    <wire loc="151:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x2b34ecff7020"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2b34ed07c020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2b34ed07c020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2b34ed860710"/></to>
    </wire>
    <wire loc="54:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x2b34eced21c8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b34ecf852b0"/></to>
    </wire>
    <wire loc="55:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x2b34ecf8e758"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x2b34ecfa5660"/></to>
    </wire>
    <wire loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x2b34ecfab2b0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x2b34ed6ae268"/></to>
    </wire>
    <wire loc="29:BlinkC.nc">
      <from><interface-ref name="testTask" scoped="" ref="0x2b34ed1b24d8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b34eced21c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDC.nc">
      <from><interface-ref name="LCD128x64" scoped="" ref="0x2b34ed1fb330"/></from>
      <to><interface-ref name="LCD128x64" scoped="" ref="0x2b34ed24c7a8"/></to>
    </wire>
    <wire loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64C.nc">
      <from><interface-ref name="LCD128x64" scoped="" ref="0x2b34ed24c7a8"/></from>
      <to><interface-ref name="LCD128x64" scoped="" ref="0x2b34ed43a538"/></to>
    </wire>
    <wire loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDC.nc">
      <from><interface-ref name="TouchScreen" scoped="" ref="0x2b34ed1e1c58"/></from>
      <to><interface-ref name="TouchScreen" scoped="" ref="0x2b34ed24b080"/></to>
    </wire>
    <wire loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="TouchScreen" scoped="" ref="0x2b34ed24b080"/></from>
      <to><interface-ref name="TouchScreen" scoped="" ref="0x2b34ed2586f8"/></to>
    </wire>
    <wire loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x2b34ed25a870"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b34ed415358"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Read" scoped="" ref="0x2b34ed415358"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b34ed2761c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="13:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b34ed414a28"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b34ed256d78"/></to>
    </wire>
    <wire loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <from><interface-ref name="checkTS" scoped="" ref="0x2b34ed255e70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b34eced21c8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b34ed28bba8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b34ed414a28"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2b34ed281c28"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b34ed296778"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b34ed28f1c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b34ed4133f0"/></to>
    </wire>
    <wire loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Read" scoped="" ref="0x2b34ed2761c8"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b34ed3faa28"/></to>
    </wire>
    <wire loc="31:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x2b34ed288df8"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x2b34ed3c7880"/></to>
    </wire>
    <wire loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2b34ed3ffb28"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b34ed281c28"/></to>
    </wire>
    <wire loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b34ed3c4e78"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b34ed28bba8"/></to>
    </wire>
    <wire loc="35:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x2b34ed400348"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2b34ed3c9c68"/></to>
    </wire>
    <wire loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b34ed3c4020"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b34ed290ac8"/></to>
    </wire>
    <wire loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b34ed290ac8"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b34ed29bca8"/></to>
    </wire>
    <wire loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b34ed2a2420"/></from>
      <to><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b34ed29e628"/></to>
    </wire>
    <wire loc="66:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2b34ed296778"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b34ed397e50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2b34ed397e50"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2b34edae6bb8"/></to>
    </wire>
    <wire loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b34ed3af8a0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b34ed28f1c8"/></to>
    </wire>
    <wire loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b34ed2a40d0"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b34ed2a1a28"/></to>
    </wire>
    <wire loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b34ed2a1a28"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b34ed2ee080"/></to>
    </wire>
    <wire loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b34ed299610"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b34ecfcc618"/></to>
    </wire>
    <wire loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x2b34ed3ab478"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x2b34ed29b4f0"/></to>
    </wire>
    <wire loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b34ed3b4268"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b34ed3943f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b34ed3943f0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b34edae4268"/></to>
    </wire>
    <wire loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x2b34ed2ec640"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x2b34ecfaea80"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x2b34ed396b70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x2b34edae59a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2b34ed3af020"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2b34edae4e20"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2b34edae26f8"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2b34ed3af8a0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Queue" scoped="" ref="0x2b34edae2e78"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x2b34edae8af8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="grantedTask" scoped="" ref="0x2b34edadf100"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b34eced21c8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x2b34edb22020"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x2b34ed3ab478"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b34edb22740"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b34ed3abb98"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b34edb22cd8"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b34ed3b4268"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2b34edb21908"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2b34ed3b4e20"/></to>
    </wire>
    <wire loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <from><interface-ref name="acquiredData" scoped="" ref="0x2b34ed3d1bf8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b34eced21c8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeRectangle" scoped="" ref="0x2b34ed484628"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b34eced21c8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="222:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeString" scoped="" ref="0x2b34ed48db68"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b34eced21c8"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeCircle" scoped="" ref="0x2b34ed47c4d8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b34eced21c8"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="278:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeLine" scoped="" ref="0x2b34ed497590"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b34eced21c8"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="wait4Controller" scoped="" ref="0x2b34ed455d88"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b34eced21c8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="356:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="writeBar" scoped="" ref="0x2b34ed4c0c78"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b34eced21c8"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="250:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <from><interface-ref name="clearScreenNB" scoped="" ref="0x2b34ed4a0d58"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b34eced21c8"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x2b34ed4fc338"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x2b34ed50c020"/></to>
    </wire>
    <wire loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x2b34ed50c020"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x2b34ed574b90"/></to>
    </wire>
    <wire loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x2b34ed506170"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x2b34ed50d7d8"/></to>
    </wire>
    <wire loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x2b34ed50d7d8"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x2b34ed574430"/></to>
    </wire>
    <wire loc="13:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x2b34ed4fba50"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x2b34ed50d020"/></to>
    </wire>
    <wire loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x2b34ed50d020"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x2b34ed525be8"/></to>
    </wire>
    <wire loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x2b34ed56f2d0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x2b34ed52c080"/></to>
    </wire>
    <wire loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0x2b34ed573c18"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x2b34ed597190"/></to>
    </wire>
    <wire loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0x2b34ed597190"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x2b34ed58e730"/></to>
    </wire>
    <wire loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0x2b34ed572470"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x2b34ed5979e8"/></to>
    </wire>
    <wire loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0x2b34ed5979e8"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x2b34ed58d020"/></to>
    </wire>
    <wire loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0x2b34ed572c10"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x2b34ed596388"/></to>
    </wire>
    <wire loc="66:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0x2b34ed596388"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x2b34ed58d8a0"/></to>
    </wire>
    <wire loc="62:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0x2b34ed599be0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x2b34ed591a10"/></to>
    </wire>
    <wire loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0x2b34ed5993a0"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x2b34ed591190"/></to>
    </wire>
    <wire loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0x2b34ed576a68"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x2b34ed5928a0"/></to>
    </wire>
    <wire loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b34ed58cdf8"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b34ecfcc618"/></to>
    </wire>
    <wire loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x2b34ed58baa0"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x2b34ecfaea80"/></to>
    </wire>
    <wire loc="54:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x2b34ed602510"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2b34ed5f9b68"/></to>
    </wire>
    <wire loc="61:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x2b34ed5f9b68"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b34ed780020"/></to>
    </wire>
    <wire loc="59:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b34ed5fde48"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b34ed6146f0"/></to>
    </wire>
    <wire loc="65:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x2b34ed619108"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x2b34ed79fc38"/></to>
    </wire>
    <wire loc="35:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2b34ed6146f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b34ed721190"/></to>
    </wire>
    <wire loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x2b34ed7a6208"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b34ed749ab0"/></to>
    </wire>
    <wire loc="63:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x2b34ed744c70"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x2b34ed611020"/></to>
    </wire>
    <wire loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x2b34ed611020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x2b34ed721938"/></to>
    </wire>
    <wire loc="66:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x2b34ed79ee48"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x2b34ed62d338"/></to>
    </wire>
    <wire loc="37:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x2b34ed62d338"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x2b34ed71ea90"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Counter" scoped="" ref="0x2b34ed71ea90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x2b34edb56a90"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Init" scoped="" ref="0x2b34ed721190"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2b34edb5a060"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Alarm" scoped="" ref="0x2b34ed721938"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x2b34edb5a808"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x2b34edb54b98"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b34ed6a1e00"/></to>
    </wire>
    <wire loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x2b34ed6a1e00"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2b34ed6b8180"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x2b34edb4fb60"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x2b34ed699020"/></to>
    </wire>
    <wire loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x2b34ed699020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x2b34ed6b2160"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Compare" scoped="" ref="0x2b34edb4db58"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x2b34ed698020"/></to>
    </wire>
    <wire loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x2b34ed698020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x2b34ed6b1190"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerSync" scoped="" ref="0x2b34edb4abb0"/></from>
      <to><interface-ref name="TimerSync" scoped="" ref="0x2b34ed694218"/></to>
    </wire>
    <wire loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <from><interface-ref name="TimerSync" scoped="" ref="0x2b34ed694218"/></from>
      <to><interface-ref name="TimerSync" scoped="" ref="0x2b34ed6ae958"/></to>
    </wire>
    <wire>
      <from><interface-ref name="fired" scoped="" ref="0x2b34ed740cf0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b34eced21c8"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x2b34ed7a1478"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2b34eced21c8"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <documentation loc="45:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
        <short>&#10; Initialisation component for mica-family platforms.</short>
        <long>&#10; Initialisation component for mica-family platforms. See TEP107. Each &#10; mica-family member must also provide a MotePlatformC with initialisation&#10; specific to that member.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
        <short>&#10; Internal platform boot code.</short>
        <long>&#10; Internal platform boot code.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc" safe="">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:59">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:58">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:57">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:56">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:53">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc" safe="">
      <documentation loc="14:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc" safe="">
      <documentation loc="49:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.11 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BlinkC" loc="17:BlinkC.nc" safe="">
      <module/>
    </component>
    <component qname="GLCDC" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDC.nc">
      <configuration/>
    </component>
    <component qname="GLCDP" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDP.nc">
      <module/>
    </component>
    <component qname="TouchScreenC" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <configuration/>
    </component>
    <component qname="TouchScreenP" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <module/>
    </component>
    <component qname="TouchScreenC.AdcReadClientC" loc="21(TouchScreenC.AdcReadClientC):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcP" loc="16:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
        <short>&#10; Support component for AdcReadClientC and AdcReadNowClientC.</short>
        <long>&#10; Support component for AdcReadClientC and AdcReadNowClientC.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcC" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <documentation loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
        <short>&#10; HAL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HAL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcP" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc" safe="">
      <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
        <short>&#10; Internal component of the Atmega128 A/D HAL.</short>
        <long>&#10; Internal component of the Atmega128 A/D HAL.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Phil Buonadonna&#10; @author Hu Siquan &#60;husq@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128AdcC" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128AdcP" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc" safe="">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter" loc="89(Atm128AdcC.AdcArbiter):/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:atm128adc.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Queue" loc="42(Atm128AdcC.AdcArbiter.Queue):/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Arbiter" loc="52(Atm128AdcC.AdcArbiter.Arbiter):/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.PM" loc="67(Atm128AdcC.PM):/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.PM.PowerManager" loc="58(Atm128AdcC.PM.PowerManager):/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AdcP" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc" safe="">
      <documentation loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
        <short>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.</short>
        <long>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcP.ArbitrateRead" loc="23(WireAdcP.ArbitrateRead):/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LCD128x64C" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64C.nc">
      <configuration/>
    </component>
    <component qname="LCD128x64P" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <module/>
    </component>
    <component qname="bigAVR6UART0C" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0C.nc">
      <configuration/>
    </component>
    <component qname="bigAVR6UART0P" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0P.nc">
      <module/>
    </component>
    <component qname="Atm128Uart1C" loc="38:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128Uart1C.nc">
      <documentation loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128Uart1C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2010-06-16 21:45:58 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart1C.UartP" loc="46(Atm128Uart1C.UartP):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <documentation loc="38:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="78:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartP.nc">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega128 serial port HPL.</short>
        <long> &#10; Private component of the Atmega128 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BlinkAppC.TIMER0" loc="44(BlinkAppC.TIMER0):/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmSyncC" loc="30(AlarmCounterMilliP.Atm128AlarmSyncC):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmSyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP" loc="30(AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP):/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmSyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2b34ed627110"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer0SyncC" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer0SyncP" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
        <short>&#10; HPL interface to Atmega128 timer 0 in SYNC mode.</short>
        <long>&#10; HPL interface to Atmega128 timer 0 in SYNC mode. This is a specialised&#10; HPL component that assumes that timer 0 is used in SYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;--> CHANGED TO SYNC-Mode(CPL_CLK)&#9;hglanzer&#10;--> AS0=0 in ASSR&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2b34ed029ba0" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2b34ed033020" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2b34ed033368" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2b34ed037610" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2b34ed037978" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2b34ed037ce0" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2b34ed034060" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2b34ed0cb020" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2b34ed0cb388" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2b34ed0cb6f0" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2b34ed0cba20" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadClientC" loc="21:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc" abstract="">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinArbiterC" loc="89:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc" abstract="">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x2b34ed321b08" loc="89:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
          <component-ref qname="RoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x2b34ed329748" loc="42:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x2b34ed3415c0" loc="52:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ArbitratedReadC" loc="23:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc" abstract="" safe="">
      <documentation loc="10:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0x2b34ed3dd9d0" loc="23:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0x2b34ed3dd9d0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmSyncC" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc" abstract="">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x2b34ed627110" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
          <component-ref qname="Atm128AlarmSyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2b34ed627110"/></type-var>
        </typedef>
        <constant name="divider" ref="0x2b34ed627400" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
          <component-ref qname="Atm128AlarmSyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmSyncP" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc" abstract="" safe="">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x2b34ed61e748" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
          <component-ref qname="Atm128AlarmSyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2b34ed61e748"/></type-var>
        </typedef>
        <constant name="divider" ref="0x2b34ed61ea38" loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
          <component-ref qname="Atm128AlarmSyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b34ed612c68" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b34ed612c68"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b34ed73ecd0" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b34ed73ecd0"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x2b34ed73b020" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b34ed79d510" loc="46:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b34ed79d510"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x2b34ecfc6620" loc="58:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2b34ecfc6620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ecfc6970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2b34ecfc7220" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b34ecfc7220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b34ecfc7570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2b34ecfc4380" loc="52:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2b34ecfc4380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ecfc46d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b34ecfc9620" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b34ecfc9620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ecfc9970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2b34ecfcc618" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b34ecfcc618"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b34ecfcc968"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b34ecfccaf0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b34ecfccc78"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b34ecfcce00"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b34ecfc4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x2b34ecfd8ca0" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x2b34ecfd8ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ecfd7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b34ecfd8600" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b34ecfd8600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ecfd8950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x2b34ecfd7398" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x2b34ecfd7398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ecfd76e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2b34ecfde360" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2b34ecfde360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ecfde6b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2b34ecfd1b98" loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b34ecfd1b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ecfde020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2b34ecfdab08" loc="19:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2b34ecfdab08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ecfdae58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x2b34ecfe28d8" loc="18:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x2b34ecfe28d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecfe2c28"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecfe2db0"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecfda020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecfda1a8"/>
        <function-ref name="get" scoped="" ref="0x2b34ecfda330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecfda4b8"/>
        <function-ref name="set" scoped="" ref="0x2b34ecfda640"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecfda7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2b34ecfdb698" loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b34ecfdb698"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ecfdb9e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x2b34ed023af0" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x2b34ed023af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0225e8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed022770"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0228f8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed022a80"/>
        <function-ref name="get" scoped="" ref="0x2b34ed022c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed022d90"/>
        <function-ref name="set" scoped="" ref="0x2b34ed021020"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0211a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x2b34ed005658" loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x2b34ed005658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0059a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed005b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed005cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed005e40"/>
        <function-ref name="get" scoped="" ref="0x2b34ed004020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0041a8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed004330"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0044b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x2b34ed016658" loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x2b34ed016658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0169a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed016b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed016cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed016e40"/>
        <function-ref name="get" scoped="" ref="0x2b34ed015020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0151a8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed015330"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0154b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x2b34ed01b348" loc="94:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x2b34ed01b348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed01b698"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed01b820"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed01b9a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed01bb30"/>
        <function-ref name="get" scoped="" ref="0x2b34ed01bcb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed01be40"/>
        <function-ref name="set" scoped="" ref="0x2b34ed01a020"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed01a1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x2b34ecff1348" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x2b34ecff1348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecff1698"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecff1820"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecff19a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecff1b30"/>
        <function-ref name="get" scoped="" ref="0x2b34ecff1cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecff1e40"/>
        <function-ref name="set" scoped="" ref="0x2b34ecff0020"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecff01a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x2b34ed01d020" loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x2b34ed01d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed01d370"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed01d4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed01d680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed01d808"/>
        <function-ref name="get" scoped="" ref="0x2b34ed01d990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed01db18"/>
        <function-ref name="set" scoped="" ref="0x2b34ed01dca0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed01de28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x2b34ecfef658" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x2b34ecfef658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecfef9a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecfefb30"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecfefcb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecfefe40"/>
        <function-ref name="get" scoped="" ref="0x2b34ecfee020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecfee1a8"/>
        <function-ref name="set" scoped="" ref="0x2b34ecfee330"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecfee4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x2b34ed0007e0" loc="66:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x2b34ed0007e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed000b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed000cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed000e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecfff020"/>
        <function-ref name="get" scoped="" ref="0x2b34ecfff1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecfff330"/>
        <function-ref name="set" scoped="" ref="0x2b34ecfff4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecfff640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x2b34ed010af0" loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x2b34ed010af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed010e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed00f020"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed00f1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed00f330"/>
        <function-ref name="get" scoped="" ref="0x2b34ed00f4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed00f640"/>
        <function-ref name="set" scoped="" ref="0x2b34ed00f7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed00f950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x2b34ed013af0" loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x2b34ed013af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed013e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed012020"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0121a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed012330"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0124b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed012640"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0127c8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed012950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x2b34ecfe9af0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x2b34ecfe9af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecfe9e40"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecfe8020"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecfe81a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecfe8330"/>
        <function-ref name="get" scoped="" ref="0x2b34ecfe84b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecfe8640"/>
        <function-ref name="set" scoped="" ref="0x2b34ecfe87c8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecfe8950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x2b34ecffaaf0" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x2b34ecffaaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecffae40"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecff9020"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecff91a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecff9330"/>
        <function-ref name="get" scoped="" ref="0x2b34ecff94b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecff9640"/>
        <function-ref name="set" scoped="" ref="0x2b34ecff97c8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecff9950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x2b34ecffdc78" loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x2b34ecffdc78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecffc020"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecffc1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecffc330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecffc4b8"/>
        <function-ref name="get" scoped="" ref="0x2b34ecffc640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecffc7c8"/>
        <function-ref name="set" scoped="" ref="0x2b34ecffc950"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecffcad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x2b34ed00c020" loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x2b34ed00c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed00c370"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed00c4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed00c680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed00c808"/>
        <function-ref name="get" scoped="" ref="0x2b34ed00c990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed00cb18"/>
        <function-ref name="set" scoped="" ref="0x2b34ed00cca0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed00ce28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x2b34ed0187e0" loc="97:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x2b34ed0187e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed018b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed018cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed018e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed024020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0241a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed024330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0244b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed024640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x2b34ed01f7e0" loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x2b34ed01f7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed01fb30"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed01fcb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed01fe40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed02c020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed02c1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed02c330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed02c4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed02c640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x2b34ed00a348" loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x2b34ed00a348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed00a698"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed00a820"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed00a9a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed00ab30"/>
        <function-ref name="get" scoped="" ref="0x2b34ed00acb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed00ae40"/>
        <function-ref name="set" scoped="" ref="0x2b34ed017020"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0171a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x2b34ecff3020" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x2b34ecff3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecff3370"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecff34f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecff3680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecff3808"/>
        <function-ref name="get" scoped="" ref="0x2b34ecff3990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecff3b18"/>
        <function-ref name="set" scoped="" ref="0x2b34ecff3ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecff3e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x2b34ecff61a0" loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x2b34ecff61a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecff64f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecff6678"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecff6800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecff6988"/>
        <function-ref name="get" scoped="" ref="0x2b34ecff6b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecff6c98"/>
        <function-ref name="set" scoped="" ref="0x2b34ecff6e20"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecff5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x2b34ed0214d0" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x2b34ed0214d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed021820"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0219a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed021b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed021cb8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed021e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed020020"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0201a8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed020330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x2b34ed0024d0" loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x2b34ed0024d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed002820"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0029a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed002b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed002cb8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed002e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed001020"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0011a8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed001330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x2b34ed0047e0" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x2b34ed0047e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed004b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed004cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed004e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed003020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0031a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed003330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0034b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed003640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x2b34ed0157e0" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x2b34ed0157e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed015b30"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed015cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed015e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed014020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0141a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed014330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0144b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed014640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x2b34ed01a4d0" loc="95:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x2b34ed01a4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed01a820"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed01a9a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed01ab30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed01acb8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed01ae40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed019020"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0191a8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed019330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x2b34ecff04d0" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x2b34ecff04d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecff0820"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecff09a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecff0b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecff0cb8"/>
        <function-ref name="get" scoped="" ref="0x2b34ecff0e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecfef020"/>
        <function-ref name="set" scoped="" ref="0x2b34ecfef1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecfef330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x2b34ecfee7e0" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x2b34ecfee7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecfeeb30"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecfeecb8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecfeee40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecffb020"/>
        <function-ref name="get" scoped="" ref="0x2b34ecffb1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecffb330"/>
        <function-ref name="set" scoped="" ref="0x2b34ecffb4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecffb640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x2b34ecfff968" loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x2b34ecfff968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecfffcb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecfffe40"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecffe020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecffe1a8"/>
        <function-ref name="get" scoped="" ref="0x2b34ecffe330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecffe4b8"/>
        <function-ref name="set" scoped="" ref="0x2b34ecffe640"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecffe7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x2b34ed00fc78" loc="78:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x2b34ed00fc78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed00e020"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed00e1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed00e330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed00e4b8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed00e640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed00e7c8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed00e950"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed00ead8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x2b34ed012c78" loc="89:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x2b34ed012c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed011020"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0111a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed011330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0114b8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed011640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0117c8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed011950"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed011ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x2b34ecfe8c78" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x2b34ecfe8c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecfe7020"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecfe71a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecfe7330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecfe74b8"/>
        <function-ref name="get" scoped="" ref="0x2b34ecfe7640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecfe77c8"/>
        <function-ref name="set" scoped="" ref="0x2b34ecfe7950"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecfe7ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x2b34ecff9c78" loc="59:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x2b34ecff9c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecff80f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecff8278"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecff8400"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecff8588"/>
        <function-ref name="get" scoped="" ref="0x2b34ecff8710"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecff8898"/>
        <function-ref name="set" scoped="" ref="0x2b34ecff8a20"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecff8ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x2b34ecffce00" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x2b34ecffce00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0091a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed009330"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0094b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed009640"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0097c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed009950"/>
        <function-ref name="set" scoped="" ref="0x2b34ed009ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed009c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x2b34ed024968" loc="98:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x2b34ed024968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed024cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed024e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed023020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0231a8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed023330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0234b8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed023640"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0237c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x2b34ed0061a0" loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x2b34ed0061a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0066f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed006878"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed006a00"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed006b88"/>
        <function-ref name="get" scoped="" ref="0x2b34ed006d10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed005020"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0051a8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed005330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x2b34ed0174d0" loc="84:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x2b34ed0174d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed017820"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0179a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed017b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed017cb8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed017e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed016020"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0161a8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed016330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x2b34ed01c1a0" loc="93:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x2b34ed01c1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed01c4f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed01c678"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed01c800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed01c988"/>
        <function-ref name="get" scoped="" ref="0x2b34ed01cb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed01cc98"/>
        <function-ref name="set" scoped="" ref="0x2b34ed01ce20"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed01b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x2b34ed02c968" loc="104:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x2b34ed02c968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed02ccb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed02ce40"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed02b020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed02b1a8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed02b330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed02b4b8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed02b640"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed02b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x2b34ecff21a0" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x2b34ecff21a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecff24f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecff2678"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecff2800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecff2988"/>
        <function-ref name="get" scoped="" ref="0x2b34ecff2b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecff2c98"/>
        <function-ref name="set" scoped="" ref="0x2b34ecff2e20"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecff1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x2b34ecff5348" loc="62:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x2b34ecff5348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecff5698"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecff5820"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecff59a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecff5b30"/>
        <function-ref name="get" scoped="" ref="0x2b34ecff5cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecff5e40"/>
        <function-ref name="set" scoped="" ref="0x2b34ed002020"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0021a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x2b34ed011e00" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x2b34ed011e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed01e1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed01e330"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed01e4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed01e640"/>
        <function-ref name="get" scoped="" ref="0x2b34ed01e7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed01e950"/>
        <function-ref name="set" scoped="" ref="0x2b34ed01ead8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed01ec60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x2b34ed001658" loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x2b34ed001658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0019a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed001b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed001cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed001e40"/>
        <function-ref name="get" scoped="" ref="0x2b34ed000020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0001a8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed000330"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0004b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x2b34ed003968" loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x2b34ed003968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed003cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed003e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed010020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0101a8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed010330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0104b8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed010640"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0107c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x2b34ed014968" loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x2b34ed014968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed014cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed014e40"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed013020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0131a8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed013330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0134b8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed013640"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0137c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x2b34ed019658" loc="96:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x2b34ed019658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0199a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed019b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed019cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed019e40"/>
        <function-ref name="get" scoped="" ref="0x2b34ed018020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0181a8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed018330"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0184b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x2b34ecfdc870" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x2b34ecfdc870"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecfdcbc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecfdcd48"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecfe9020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecfe91a8"/>
        <function-ref name="get" scoped="" ref="0x2b34ecfe9330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecfe94b8"/>
        <function-ref name="set" scoped="" ref="0x2b34ecfe9640"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecfe97c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x2b34ecffb968" loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x2b34ecffb968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecffbcb8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecffbe40"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecffa020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecffa1a8"/>
        <function-ref name="get" scoped="" ref="0x2b34ecffa330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecffa4b8"/>
        <function-ref name="set" scoped="" ref="0x2b34ecffa640"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecffa7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x2b34ecffeaf0" loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x2b34ecffeaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecffee40"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecffd020"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecffd1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecffd330"/>
        <function-ref name="get" scoped="" ref="0x2b34ecffd4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecffd640"/>
        <function-ref name="set" scoped="" ref="0x2b34ecffd7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecffd950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x2b34ed00ee00" loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x2b34ed00ee00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed00d1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed00d330"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed00d4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed00d640"/>
        <function-ref name="get" scoped="" ref="0x2b34ed00d7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed00d950"/>
        <function-ref name="set" scoped="" ref="0x2b34ed00dad8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed00dc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x2b34ed020658" loc="102:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x2b34ed020658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0209a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed020b30"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed020cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed020e40"/>
        <function-ref name="get" scoped="" ref="0x2b34ed01f020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed01f1a8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed01f330"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed01f4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x2b34ed00b1a0" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x2b34ed00b1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed00b4f0"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed00b678"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed00b800"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed00b988"/>
        <function-ref name="get" scoped="" ref="0x2b34ed00bb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed00bc98"/>
        <function-ref name="set" scoped="" ref="0x2b34ed00be20"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed00a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x2b34ed007020" loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x2b34ed007020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed007370"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0074f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed007680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed007808"/>
        <function-ref name="get" scoped="" ref="0x2b34ed007990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed007b18"/>
        <function-ref name="set" scoped="" ref="0x2b34ed007ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed007e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x2b34ecfe7e00" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x2b34ecfe7e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecff41a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecff4330"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecff44b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecff4640"/>
        <function-ref name="get" scoped="" ref="0x2b34ecff47c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecff4950"/>
        <function-ref name="set" scoped="" ref="0x2b34ecff4ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecff4c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x2b34ecff7020" loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x2b34ecff7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ecff7370"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ecff74f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ecff7680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ecff7808"/>
        <function-ref name="get" scoped="" ref="0x2b34ecff7990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ecff7b18"/>
        <function-ref name="set" scoped="" ref="0x2b34ecff7ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ecff7e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b34ed06e120" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b34ed06e120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed06e470"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed06e5f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed06e780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed06e908"/>
        <function-ref name="get" scoped="" ref="0x2b34ed06ea90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed06ec18"/>
        <function-ref name="set" scoped="" ref="0x2b34ed06eda0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed06d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b34ed07b5b8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b34ed07b5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed07b908"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed07ba90"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed07bc18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed07bda0"/>
        <function-ref name="get" scoped="" ref="0x2b34ed07a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed07a1a8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed07a330"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed07a4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b34ed071dc0" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b34ed071dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed070170"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0702f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed070480"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed070608"/>
        <function-ref name="get" scoped="" ref="0x2b34ed070790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed070918"/>
        <function-ref name="set" scoped="" ref="0x2b34ed070aa0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed070c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b34ed06d2a8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b34ed06d2a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed06d5f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed06d780"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed06d908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed06da90"/>
        <function-ref name="get" scoped="" ref="0x2b34ed06dc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed06dda0"/>
        <function-ref name="set" scoped="" ref="0x2b34ed06c020"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed06c1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b34ed07a740" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b34ed07a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed07aa90"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed07ac18"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed07ada0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed079020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0791a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed079330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0794b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed079640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b34ed06f020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b34ed06f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed06f370"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed06f4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed06f680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed06f808"/>
        <function-ref name="get" scoped="" ref="0x2b34ed06f990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed06fb18"/>
        <function-ref name="set" scoped="" ref="0x2b34ed06fca0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed06fe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b34ed06c430" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b34ed06c430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed06c780"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed06c908"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed06ca90"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed06cc18"/>
        <function-ref name="get" scoped="" ref="0x2b34ed06cda0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed07b020"/>
        <function-ref name="set" scoped="" ref="0x2b34ed07b1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed07b330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b34ed0798c8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b34ed0798c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed079c18"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed079da0"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed078020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0781a8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed078330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0784b8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed078640"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0787c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed7ed6a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed7ed6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed7ed9f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed7edb80"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed7edd08"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed7ec020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed7ec1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed7ec330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed7ec4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed7ec640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed7ea710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed7ea710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed7eaa60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed7eabe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed7ead70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed7e9020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed7e91a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed7e9330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed7e94b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed7e9640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed7e7710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed7e7710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed7e7a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed7e7be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed7e7d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed7e6020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed7e61a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed7e6330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed7e64b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed7e6640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed7e4710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed7e4710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed7e4a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed7e4be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed7e4d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed7e3020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed7e31a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed7e3330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed7e34b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed7e3640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed7e1710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed7e1710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed7e1a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed7e1be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed7e1d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed7df020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed7df1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed7df330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed7df4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed7df640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed80b710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed80b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed80ba60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed80bbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed80bd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed80a020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed80a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed80a330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed80a4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed80a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed808710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed808710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed808a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed808be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed808d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed807020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed8071a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed807330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed8074b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed807640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed805710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed805710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed805a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed805be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed805d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed804020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed8041a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed804330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed8044b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed804640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b34ed080bd8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b34ed080bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed07f020"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed07f1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed07f330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed07f4b8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed07f640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed07f7c8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed07f950"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed07fad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b34ed07c020" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b34ed07c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed07c370"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed07c4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed07c680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed07c808"/>
        <function-ref name="get" scoped="" ref="0x2b34ed07c990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed07cb18"/>
        <function-ref name="set" scoped="" ref="0x2b34ed07cca0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed07ce28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b34ed082930" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b34ed082930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed082c80"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed082e08"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed081020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0811a8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed081330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0814b8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed081640"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0817c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b34ed07fd60" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b34ed07fd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed07e0d8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed07e260"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed07e3e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed07e570"/>
        <function-ref name="get" scoped="" ref="0x2b34ed07e6f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed07e880"/>
        <function-ref name="set" scoped="" ref="0x2b34ed07ea08"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed07eb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b34ed08b120" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b34ed08b120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed08b470"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed08b5f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed08b780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed08b908"/>
        <function-ref name="get" scoped="" ref="0x2b34ed08ba90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed08bc18"/>
        <function-ref name="set" scoped="" ref="0x2b34ed08bda0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed08a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b34ed081a50" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b34ed081a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed081da0"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed080020"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0801a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed080330"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0804b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed080640"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0807c8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed080950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b34ed07ee18" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b34ed07ee18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed07d1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed07d330"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed07d4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed07d640"/>
        <function-ref name="get" scoped="" ref="0x2b34ed07d7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed07d950"/>
        <function-ref name="set" scoped="" ref="0x2b34ed07dad8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed07dc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b34ed08a2a8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b34ed08a2a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed08a5f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed08a780"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed08a908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed08aa90"/>
        <function-ref name="get" scoped="" ref="0x2b34ed08ac18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed08ada0"/>
        <function-ref name="set" scoped="" ref="0x2b34ed089020"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0891a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed83f6a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed83f6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed83f9f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed83fb80"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed83fd08"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed83e020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed83e1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed83e330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed83e4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed83e640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed83c710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed83c710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed83ca60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed83cbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed83cd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed83b020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed83b1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed83b330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed83b4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed83b640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed869710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed869710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed869a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed869be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed869d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed868020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed8681a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed868330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed8684b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed868640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed866710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed866710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed866a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed866be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed866d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed865020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed8651a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed865330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed8654b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed865640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed863710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed863710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed863a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed863be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed863d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed862020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed8621a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed862330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed8624b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed862640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed860710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed860710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed860a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed860be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed860d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed85e020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed85e1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed85e330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed85e4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed85e640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed85c710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed85c710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed85ca60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed85cbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed85cd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed85b020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed85b1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed85b330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed85b4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed85b640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed859710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed859710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed859a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed859be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed859d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed858020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed8581a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed858330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed8584b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed858640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b34ed091740" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b34ed091740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed091a90"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed091c18"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed091da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed090020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0901a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed090330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0904b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed090640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b34ed08ebd8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b34ed08ebd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed08c020"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed08c1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed08c330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed08c4b8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed08c640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed08c7c8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed08c950"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed08cad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b34ed093500" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b34ed093500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed093850"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0939d8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed093b60"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed093ce8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed093e70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed092020"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0921a8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed092330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b34ed0908c8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b34ed0908c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed090c18"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed090da0"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed08f020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed08f1a8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed08f330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed08f4b8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed08f640"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed08f7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b34ed08cd60" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b34ed08cd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed09b0d8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed09b260"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed09b3e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed09b570"/>
        <function-ref name="get" scoped="" ref="0x2b34ed09b6f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed09b880"/>
        <function-ref name="set" scoped="" ref="0x2b34ed09ba08"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed09bb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b34ed0925b8" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b34ed0925b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed092908"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed092a90"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed092c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed092da0"/>
        <function-ref name="get" scoped="" ref="0x2b34ed091020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0911a8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed091330"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0914b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b34ed08fa50" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b34ed08fa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed08fda0"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed08e020"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed08e1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed08e330"/>
        <function-ref name="get" scoped="" ref="0x2b34ed08e4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed08e640"/>
        <function-ref name="set" scoped="" ref="0x2b34ed08e7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed08e950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b34ed09be18" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b34ed09be18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed09a1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed09a330"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed09a4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed09a640"/>
        <function-ref name="get" scoped="" ref="0x2b34ed09a7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed09a950"/>
        <function-ref name="set" scoped="" ref="0x2b34ed09aad8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed09ac60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed8c96a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed8c96a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed8c99f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed8c9b80"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed8c9d08"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed8c8020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed8c81a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed8c8330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed8c84b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed8c8640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed8c6710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed8c6710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed8c6a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed8c6be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed8c6d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed8c5020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed8c51a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed8c5330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed8c54b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed8c5640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed8c3710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed8c3710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed8c3a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed8c3be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed8c3d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed8c2020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed8c21a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed8c2330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed8c24b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed8c2640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed8c0710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed8c0710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed8c0a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed8c0be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed8c0d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed8bf020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed8bf1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed8bf330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed8bf4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed8bf640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed8bd710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed8bd710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed8bda60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed8bdbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed8bdd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed8bc020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed8bc1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed8bc330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed8bc4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed8bc640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed8ba710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed8ba710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed8baa60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed8babe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed8bad70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed8b8020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed8b81a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed8b8330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed8b84b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed8b8640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed8b6710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed8b6710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed8b6a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed8b6be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed8b6d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed8b5020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed8b51a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed8b5330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed8b54b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed8b5640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed8b3710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed8b3710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed8b3a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed8b3be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed8b3d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed8e4020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed8e41a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed8e4330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed8e44b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed8e4640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b34ed0a2120" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b34ed0a2120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0a2470"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0a25f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0a2780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0a2908"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0a2a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0a2c18"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0a2da0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0a0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b34ed09e5b8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b34ed09e5b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed09e908"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed09ea90"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed09ec18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed09eda0"/>
        <function-ref name="get" scoped="" ref="0x2b34ed09d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed09d1a8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed09d330"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed09d4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b34ed095e40" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b34ed095e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0941c0"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed094348"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0944d0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed094658"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0947e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed094968"/>
        <function-ref name="set" scoped="" ref="0x2b34ed094af0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed094c78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b34ed0a02a8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b34ed0a02a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0a05f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0a0780"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0a0908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0a0a90"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0a0c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0a0da0"/>
        <function-ref name="set" scoped="" ref="0x2b34ed09f020"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed09f1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b34ed09d740" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b34ed09d740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed09da90"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed09dc18"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed09dda0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed09c020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed09c1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed09c330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed09c4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed09c640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b34ed0a3020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b34ed0a3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0a3370"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0a34f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0a3680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0a3808"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0a3990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0a3b18"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0a3ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0a3e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b34ed09f430" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b34ed09f430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed09f780"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed09f908"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed09fa90"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed09fc18"/>
        <function-ref name="get" scoped="" ref="0x2b34ed09fda0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed09e020"/>
        <function-ref name="set" scoped="" ref="0x2b34ed09e1a8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed09e330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b34ed09c8c8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b34ed09c8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed09cc18"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed09cda0"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0ab020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0ab1a8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0ab330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0ab4b8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0ab640"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0ab7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed92a6a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed92a6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed92a9f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed92ab80"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed92ad08"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed929020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9291a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed929330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9294b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed929640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed927710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed927710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed927a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed927be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed927d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed926020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9261a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed926330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9264b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed926640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed924710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed924710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed924a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed924be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed924d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed923020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9231a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed923330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9234b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed923640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed921710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed921710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed921a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed921be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed921d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed920020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9201a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed920330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9204b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed920640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed91e710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed91e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed91ea60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed91ebe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed91ed70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed91d020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed91d1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed91d330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed91d4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed91d640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed91b710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed91b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed91ba60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed91bbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed91bd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed91a020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed91a1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed91a330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed91a4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed91a640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed918710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed918710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed918a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed918be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed918d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed949020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9491a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed949330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9494b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed949640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed947710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed947710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed947a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed947be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed947d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed946020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9461a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed946330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9464b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed946640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b34ed0b3bd8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b34ed0b3bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0b2020"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0b21a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0b2330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0b24b8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0b2640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0b27c8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0b2950"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0b2ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b34ed0af020" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b34ed0af020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0af370"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0af4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0af680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0af808"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0af990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0afb18"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0afca0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0afe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b34ed0a5930" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b34ed0a5930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0a5c80"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0a5e08"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0a4020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0a41a8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0a4330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0a44b8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0a4640"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0a47c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b34ed0b2d60" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b34ed0b2d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0b10d8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0b1260"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0b13e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0b1570"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0b16f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0b1880"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0b1a08"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0b1b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b34ed0ae120" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b34ed0ae120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0ae470"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0ae5f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0ae780"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0ae908"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0aea90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0aec18"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0aeda0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0ad020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b34ed0a4a50" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b34ed0a4a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0a4da0"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0b3020"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0b31a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0b3330"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0b34b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0b3640"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0b37c8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0b3950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b34ed0b1e18" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b34ed0b1e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0b01a8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0b0330"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0b04b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0b0640"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0b07c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0b0950"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0b0ad8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0b0c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b34ed0ad2a8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b34ed0ad2a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0ad5f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0ad780"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0ad908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0ada90"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0adc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0adda0"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0ac020"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0ac1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed9926a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed9926a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed9929f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed992b80"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed992d08"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed991020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9911a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed991330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9914b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed991640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed98f710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed98f710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed98fa60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed98fbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed98fd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed98e020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed98e1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed98e330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed98e4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed98e640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed98c710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed98c710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed98ca60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed98cbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed98cd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed98b020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed98b1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed98b330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed98b4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed98b640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed989710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed989710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed989a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed989be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed989d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed988020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9881a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed988330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9884b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed988640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed986710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed986710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed986a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed986be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed986d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed985020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9851a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed985330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9854b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed985640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed983710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed983710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed983a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed983be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed983d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed982020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9821a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed982330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9824b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed982640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed980710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed980710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed980a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed980be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed980d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed97e020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed97e1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed97e330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed97e4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed97e640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed9b0710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed9b0710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed9b0a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed9b0be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed9b0d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed9af020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9af1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed9af330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9af4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed9af640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2b34ed0b5430" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2b34ed0b5430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0b5780"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0b5908"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0b5a90"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0b5c18"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0b5da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0b4020"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0b41a8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0b4330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2b34ed0c48c8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2b34ed0c48c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0c4c18"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0c4da0"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0c3020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0c31a8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0c3330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0c34b8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0c3640"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0c37c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2b34ed0b71e8" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2b34ed0b71e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0b7538"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0b76c0"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0b7848"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0b79d0"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0b7b58"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0b7ce0"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0b7e68"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0b6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2b34ed0b45b8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2b34ed0b45b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0b4908"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0b4a90"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0b4c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0b4da0"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0c5020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0c51a8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0c5330"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0c54b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2b34ed0c3a50" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2b34ed0c3a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0c3da0"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0c2020"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0c21a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0c2330"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0c24b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0c2640"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0c27c8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0c2950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2b34ed0b62a8" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2b34ed0b62a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0b65f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0b6780"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0b6908"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0b6a90"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0b6c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0b6da0"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0b5020"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0b51a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2b34ed0c5740" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2b34ed0c5740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0c5a90"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0c5c18"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0c5da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0c4020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0c41a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0c4330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0c44b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0c4640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2b34ed0c2bd8" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2b34ed0c2bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0c0020"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0c01a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0c0330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0c04b8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0c0640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0c07c8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0c0950"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0c0ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34eda006a8" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34eda006a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34eda009f8"/>
        <function-ref name="isInput" scoped="" ref="0x2b34eda00b80"/>
        <function-ref name="toggle" scoped="" ref="0x2b34eda00d08"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed9ff020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9ff1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed9ff330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9ff4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed9ff640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed9fd710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed9fd710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed9fda60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed9fdbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed9fdd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed9fc020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9fc1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed9fc330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9fc4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed9fc640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed9fa710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed9fa710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed9faa60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed9fabe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed9fad70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed9f9020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9f91a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed9f9330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9f94b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed9f9640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed9f7710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed9f7710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed9f7a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed9f7be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed9f7d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed9f6020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9f61a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed9f6330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9f64b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed9f6640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed9f4710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed9f4710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed9f4a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed9f4be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed9f4d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed9f3020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9f31a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed9f3330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9f34b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed9f3640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed9f1710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed9f1710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed9f1a60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed9f1be8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed9f1d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed9f0020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9f01a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed9f0330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9f04b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed9f0640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed9ee710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed9ee710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed9eea60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed9eebe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed9eed70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed9ed020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9ed1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed9ed330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9ed4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed9ed640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed9eb710" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed9eb710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed9eba60"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed9ebbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed9ebd70"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed9e9020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed9e91a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed9e9330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed9e94b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed9e9640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed0ccac0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed0ccac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0cce10"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0da020"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0da1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0da330"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0da4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0da640"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0da7c8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0da950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed0e9db8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed0e9db8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0e8170"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0e82f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0e8480"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0e8608"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0e8790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0e8918"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0e8aa0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0e8c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed0e33e0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed0e33e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0e3730"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0e38b8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0e3a40"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0e3bc8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0e3d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0e2020"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0e21a8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0e2330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed0f07e8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed0f07e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0f0b38"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0f0cc0"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0f0e48"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0ef020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0ef1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0ef330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0ef4b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0ef640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed0ecc38" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed0ecc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0eb020"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0eb1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0eb330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0eb4b8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0eb640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0eb7c8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0eb950"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0ebad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed0f8020" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed0f8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0f8370"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0f84f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0f8680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0f8808"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0f8990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed0f8b18"/>
        <function-ref name="set" scoped="" ref="0x2b34ed0f8ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed0f8e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed0f3480" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed0f3480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0f37d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0f3958"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed0f3ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed0f3c68"/>
        <function-ref name="get" scoped="" ref="0x2b34ed0f3df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed104020"/>
        <function-ref name="set" scoped="" ref="0x2b34ed1041a8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed104330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed1017e8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed1017e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed101b38"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed101cc0"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed101e48"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed100020"/>
        <function-ref name="get" scoped="" ref="0x2b34ed1001a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed100330"/>
        <function-ref name="set" scoped="" ref="0x2b34ed1004b8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed100640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed0fc970" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed0fc970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed0fccc0"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed0fce48"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed10d020"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed10d1a8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed10d330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed10d4b8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed10d640"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed10d7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed109ab0" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed109ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed109e00"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed108020"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed1081a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed108330"/>
        <function-ref name="get" scoped="" ref="0x2b34ed1084b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed108640"/>
        <function-ref name="set" scoped="" ref="0x2b34ed1087c8"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed108950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed105c38" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed105c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed116020"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed1161a8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed116330"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed1164b8"/>
        <function-ref name="get" scoped="" ref="0x2b34ed116640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed1167c8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed116950"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed116ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed111020" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed111020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed111370"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed1114f8"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed111680"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed111808"/>
        <function-ref name="get" scoped="" ref="0x2b34ed111990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed111b18"/>
        <function-ref name="set" scoped="" ref="0x2b34ed111ca0"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed111e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2b34ed11e180" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2b34ed11e180"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2b34ed11e4d0"/>
        <function-ref name="isInput" scoped="" ref="0x2b34ed11e658"/>
        <function-ref name="toggle" scoped="" ref="0x2b34ed11e7e0"/>
        <function-ref name="isOutput" scoped="" ref="0x2b34ed11e968"/>
        <function-ref name="get" scoped="" ref="0x2b34ed11eaf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2b34ed11ec78"/>
        <function-ref name="set" scoped="" ref="0x2b34ed11ee00"/>
        <function-ref name="clr" scoped="" ref="0x2b34ed11d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b34ed1592c0" loc="27:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b34ed1592c0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x2b34ececa128"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x2b34ececa128"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ed159610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2b34ed1598f0" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b34ed1598f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b34ed159c40"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b34ed159dc8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b34ed158020"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b34ed1581a8"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b34ed158330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x2b34ed176898" loc="60:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2b34ed176898"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ed176be8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2b34ed177198" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b34ed177198"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b34ed1774e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x2b34ed1761d0" loc="59:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2b34ed1761d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ed176520"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x2b34ed1777d0" loc="58:/homes/hglanzer/GIT/tinyos/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b34ed1777d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ed177b20"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b34ed177ca8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b34ed177e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2b34eced21c8" loc="48:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2b34eced21c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b34eced2518"/>
        <function-ref name="runTask" scoped="" ref="0x2b34eced26a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2b34ececf600" loc="47:/homes/hglanzer/GIT/tinyos/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b34ececf600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ececf950"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b34ececfad8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b34ececfc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2b34ecf852b0" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2b34ecf852b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b34ecf85600"/>
        <function-ref name="runTask" scoped="" ref="0x2b34ecf85788"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x2b34ecf8e758" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2b34ecf8e758"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2b34ecf8eaa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2b34ecf86448" loc="55:/homes/hglanzer/GIT/tinyos/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2b34ecf86448"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ecf86798"/>
        <function-ref name="taskLoop" scoped="" ref="0x2b34ecf86920"/>
        <function-ref name="runNextTask" scoped="" ref="0x2b34ecf86aa8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x2b34ecfab2b0" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2b34ecfab2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2b34ecfab600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x2b34ecfa5660" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2b34ecfa5660"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2b34ecfa59b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x2b34ecfaea80" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2b34ecfaea80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2b34ecfaedd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer0" ref="0x2b34ed198578" loc="21:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer0" scoped="" ref="0x2b34ed198578"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b34ed1968f0"/>
        <function-ref name="fired" scoped="" ref="0x2b34ed18e020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b34ed18ed10"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b34ed18e8c0"/>
        <function-ref name="getdt" scoped="" ref="0x2b34ed1a91c0"/>
        <function-ref name="gett0" scoped="" ref="0x2b34ed196d40"/>
        <function-ref name="isRunning" scoped="" ref="0x2b34ed18e470"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b34ed18f0f8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b34ed196320"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b34ed18f598"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed18fa38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x2b34ed17fd60" loc="19:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2b34ed17fd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2b34ed17e0d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="bigAVR6UART0" ref="0x2b34ed1a0548" loc="22:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="bigAVR6UART0" scoped="" ref="0x2b34ed1a0548"/></type-interface>
      <instance>
        <interfacedef-ref qname="bigAVR6UART0"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b34ed1a0898"/>
        <function-ref name="receive" scoped="" ref="0x2b34ed1a0a20"/>
        <function-ref name="receivedByte" scoped="" ref="0x2b34ed1a0ba8"/>
        <function-ref name="receiveDone" scoped="" ref="0x2b34ed1a0d30"/>
        <function-ref name="sendByte" scoped="" ref="0x2b34ed1a8020"/>
        <function-ref name="sendDone" scoped="" ref="0x2b34ed1a81a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="testTask" ref="0x2b34ed1b24d8" loc="29:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="testTask" scoped="" ref="0x2b34ed1b24d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b34ed1b2828"/>
        <function-ref name="runTask" scoped="" ref="0x2b34ed1b29b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GLCD" ref="0x2b34ed17d020" loc="20:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GLCD" scoped="" ref="0x2b34ed17d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GLCD"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b34ed17d370"/>
        <function-ref name="tsPressed" scoped="" ref="0x2b34ed17d4f8"/>
        <function-ref name="initDone" scoped="" ref="0x2b34ed17d680"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b34ed17d808"/>
        <function-ref name="isPressed" scoped="" ref="0x2b34ed17d990"/>
        <function-ref name="calibrated" scoped="" ref="0x2b34ed17db18"/>
        <function-ref name="calibrateTouchScreen" scoped="" ref="0x2b34ed17dca0"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b34ed17de28"/>
        <function-ref name="getXY" scoped="" ref="0x2b34ed17c020"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b34ed17c1a8"/>
        <function-ref name="barWritten" scoped="" ref="0x2b34ed17c330"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b34ed17c4b8"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b34ed17c640"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b34ed17c8c8"/>
        <function-ref name="xyReady" scoped="" ref="0x2b34ed17ca50"/>
        <function-ref name="writeByte" scoped="" ref="0x2b34ed17cbd8"/>
        <function-ref name="setPixel" scoped="" ref="0x2b34ed17cd60"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b34ed190020"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b34ed1901a8"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b34ed190330"/>
        <function-ref name="writePixel" scoped="" ref="0x2b34ed1904b8"/>
        <function-ref name="initLCD" scoped="" ref="0x2b34ed190640"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b34ed1907c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GLCD" ref="0x2b34ed1da020" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDC.nc">
      <component-ref qname="GLCDC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GLCD" scoped="" ref="0x2b34ed1da020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GLCD"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b34ed1da370"/>
        <function-ref name="tsPressed" scoped="" ref="0x2b34ed1da4f8"/>
        <function-ref name="initDone" scoped="" ref="0x2b34ed1da680"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b34ed1da808"/>
        <function-ref name="isPressed" scoped="" ref="0x2b34ed1da990"/>
        <function-ref name="calibrated" scoped="" ref="0x2b34ed1dab18"/>
        <function-ref name="calibrateTouchScreen" scoped="" ref="0x2b34ed1daca0"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b34ed1dae28"/>
        <function-ref name="getXY" scoped="" ref="0x2b34ed1d9020"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b34ed1d91a8"/>
        <function-ref name="barWritten" scoped="" ref="0x2b34ed1d9330"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b34ed1d94b8"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b34ed1d9640"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b34ed1d98c8"/>
        <function-ref name="xyReady" scoped="" ref="0x2b34ed1d9a50"/>
        <function-ref name="writeByte" scoped="" ref="0x2b34ed1d9bd8"/>
        <function-ref name="setPixel" scoped="" ref="0x2b34ed1d9d60"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b34ed1d8020"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b34ed1d81a8"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b34ed1d8330"/>
        <function-ref name="writePixel" scoped="" ref="0x2b34ed1d84b8"/>
        <function-ref name="initLCD" scoped="" ref="0x2b34ed1d8640"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b34ed1d87c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LCD128x64" ref="0x2b34ed1fb330" loc="8:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDP.nc">
      <component-ref qname="GLCDP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LCD128x64" scoped="" ref="0x2b34ed1fb330"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b34ed1fb680"/>
        <function-ref name="initDone" scoped="" ref="0x2b34ed1fb808"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b34ed1fb990"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b34ed1fbb18"/>
        <function-ref name="barWritten" scoped="" ref="0x2b34ed1fbca0"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b34ed1fbe28"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b34ed1e4020"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b34ed1e41a8"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b34ed1e4330"/>
        <function-ref name="writeByte" scoped="" ref="0x2b34ed1e44b8"/>
        <function-ref name="setPixel" scoped="" ref="0x2b34ed1e4640"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b34ed1e47c8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b34ed1e4950"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b34ed1e4bd8"/>
        <function-ref name="writePixel" scoped="" ref="0x2b34ed1e4d60"/>
        <function-ref name="initLCD" scoped="" ref="0x2b34ed1e0020"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b34ed1e01a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GLCD" ref="0x2b34ed1e9a50" loc="5:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDP.nc">
      <component-ref qname="GLCDP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GLCD" scoped="" ref="0x2b34ed1e9a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GLCD"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b34ed1e9da0"/>
        <function-ref name="tsPressed" scoped="" ref="0x2b34ed1e8020"/>
        <function-ref name="initDone" scoped="" ref="0x2b34ed1e81a8"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b34ed1e8330"/>
        <function-ref name="isPressed" scoped="" ref="0x2b34ed1e84b8"/>
        <function-ref name="calibrated" scoped="" ref="0x2b34ed1e8640"/>
        <function-ref name="calibrateTouchScreen" scoped="" ref="0x2b34ed1e87c8"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b34ed1e8950"/>
        <function-ref name="getXY" scoped="" ref="0x2b34ed1e8ad8"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b34ed1e8c60"/>
        <function-ref name="barWritten" scoped="" ref="0x2b34ed1e8de8"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b34ed1e7020"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b34ed1e71a8"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b34ed1e7430"/>
        <function-ref name="xyReady" scoped="" ref="0x2b34ed1e75b8"/>
        <function-ref name="writeByte" scoped="" ref="0x2b34ed1e7740"/>
        <function-ref name="setPixel" scoped="" ref="0x2b34ed1e78c8"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b34ed1e7a50"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b34ed1e7bd8"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b34ed1e7d60"/>
        <function-ref name="writePixel" scoped="" ref="0x2b34ed1e6020"/>
        <function-ref name="initLCD" scoped="" ref="0x2b34ed1e61a8"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b34ed1e6330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TouchScreen" ref="0x2b34ed1e1c58" loc="7:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCDP.nc">
      <component-ref qname="GLCDP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TouchScreen" scoped="" ref="0x2b34ed1e1c58"/></type-interface>
      <instance>
        <interfacedef-ref qname="TouchScreen"/>
      </instance>
      <interface-functions>
        <function-ref name="tsPressed" scoped="" ref="0x2b34ed1e5020"/>
        <function-ref name="isPressed" scoped="" ref="0x2b34ed1e51a8"/>
        <function-ref name="getXY" scoped="" ref="0x2b34ed1e5330"/>
        <function-ref name="xyReady" scoped="" ref="0x2b34ed1e54b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TouchScreen" ref="0x2b34ed24b080" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenC.nc">
      <component-ref qname="TouchScreenC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TouchScreen" scoped="" ref="0x2b34ed24b080"/></type-interface>
      <instance>
        <interfacedef-ref qname="TouchScreen"/>
      </instance>
      <interface-functions>
        <function-ref name="tsPressed" scoped="" ref="0x2b34ed24b3d0"/>
        <function-ref name="isPressed" scoped="" ref="0x2b34ed24b558"/>
        <function-ref name="getXY" scoped="" ref="0x2b34ed24b6e0"/>
        <function-ref name="xyReady" scoped="" ref="0x2b34ed24b868"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read" ref="0x2b34ed25a870" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b34ed25a870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b34ed245458"/>
        <function-ref name="readDone" scoped="" ref="0x2b34ed2458a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcConfig" ref="0x2b34ed256d78" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b34ed256d78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b34ed2580f0"/>
        <function-ref name="getChannel" scoped="" ref="0x2b34ed258278"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b34ed258400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="checkTS" ref="0x2b34ed255e70" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="checkTS" scoped="" ref="0x2b34ed255e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b34ed2531e8"/>
        <function-ref name="runTask" scoped="" ref="0x2b34ed253370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TouchScreen" ref="0x2b34ed2586f8" loc="23:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreenP.nc">
      <component-ref qname="TouchScreenP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TouchScreen" scoped="" ref="0x2b34ed2586f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TouchScreen"/>
      </instance>
      <interface-functions>
        <function-ref name="tsPressed" scoped="" ref="0x2b34ed258a48"/>
        <function-ref name="isPressed" scoped="" ref="0x2b34ed258bd0"/>
        <function-ref name="getXY" scoped="" ref="0x2b34ed258d58"/>
        <function-ref name="xyReady" scoped="" ref="0x2b34ed257020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b34ed4133f0" loc="25:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="TouchScreenC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b34ed4133f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b34ed413740"/>
        <function-ref name="configure" scoped="" ref="0x2b34ed4138c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b34ed415358" loc="22:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="TouchScreenC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b34ed415358"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b34ed414020"/>
        <function-ref name="readDone" scoped="" ref="0x2b34ed414470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2b34ed414a28" loc="24:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="TouchScreenC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b34ed414a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b34ed414d78"/>
        <function-ref name="getChannel" scoped="" ref="0x2b34ed413020"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b34ed4131a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b34ed2761c8" loc="18:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b34ed2761c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b34ed276d10"/>
        <function-ref name="readDone" scoped="" ref="0x2b34ed2751c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2b34ed288df8" loc="19:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2b34ed288df8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b34ed274a18"/>
        <function-ref name="readDone" scoped="" ref="0x2b34ed28b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2b34ed28bba8" loc="22:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b34ed28bba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b34ed287020"/>
        <function-ref name="getChannel" scoped="" ref="0x2b34ed2871a8"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b34ed287330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2b34ed281c28" loc="23:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b34ed281c28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b34ed285020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b34ed2851a8"/>
        <function-ref name="request" scoped="" ref="0x2b34ed285330"/>
        <function-ref name="granted" scoped="" ref="0x2b34ed2854b8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b34ed285640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b34ed28f1c8" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b34ed28f1c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b34ed28f518"/>
        <function-ref name="configure" scoped="" ref="0x2b34ed28f6a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x2b34ed2a2420" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b34ed2a2420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b34ed2a2770"/>
        <function-ref name="dataReady" scoped="" ref="0x2b34ed2a28f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x2b34ed290ac8" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b34ed290ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b34ed290e18"/>
        <function-ref name="cancel" scoped="" ref="0x2b34ed294020"/>
        <function-ref name="dataReady" scoped="" ref="0x2b34ed2941a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b34ed296778" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b34ed296778"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b34ed296ac8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b34ed296c50"/>
        <function-ref name="request" scoped="" ref="0x2b34ed296dd8"/>
        <function-ref name="granted" scoped="" ref="0x2b34ed295020"/>
        <function-ref name="isOwner" scoped="" ref="0x2b34ed2951a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b34ed2a0698" loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b34ed2a0698"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ed2a09e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x2b34ed29e628" loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2b34ed29e628"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b34ed29e978"/>
        <function-ref name="dataReady" scoped="" ref="0x2b34ed29eb00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x2b34ed29bca8" loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b34ed29bca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b34ed29e020"/>
        <function-ref name="cancel" scoped="" ref="0x2b34ed29e1a8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b34ed29e330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Adc" ref="0x2b34ed2a40d0" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b34ed2a40d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2b34ed2a4420"/>
        <function-ref name="getAdmux" scoped="" ref="0x2b34ed2a45a8"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2b34ed2a4730"/>
        <function-ref name="isEnabled" scoped="" ref="0x2b34ed2a48b8"/>
        <function-ref name="enableAdc" scoped="" ref="0x2b34ed2a4a40"/>
        <function-ref name="setAdmux" scoped="" ref="0x2b34ed2a4bc8"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2b34ed2a4d50"/>
        <function-ref name="isComplete" scoped="" ref="0x2b34ed29a020"/>
        <function-ref name="cancel" scoped="" ref="0x2b34ed29a1a8"/>
        <function-ref name="disableAdc" scoped="" ref="0x2b34ed29a330"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2b34ed29a4b8"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2b34ed29a640"/>
        <function-ref name="startConversion" scoped="" ref="0x2b34ed29a7c8"/>
        <function-ref name="isStarted" scoped="" ref="0x2b34ed29aa50"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2b34ed29abd8"/>
        <function-ref name="setContinuous" scoped="" ref="0x2b34ed29ad60"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2b34ed299020"/>
        <function-ref name="getValue" scoped="" ref="0x2b34ed2991a8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b34ed299330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x2b34ed29b4f0" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b34ed29b4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34ed29b840"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed29b9c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x2b34ed299610" loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b34ed299610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b34ed299960"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b34ed299ae8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b34ed299c70"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b34ed299df8"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b34ed2bc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x2b34ed2a1a28" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <component-ref qname="HplAtm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b34ed2a1a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2b34ed2a1d78"/>
        <function-ref name="getAdmux" scoped="" ref="0x2b34ed2d9020"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2b34ed2d91a8"/>
        <function-ref name="isEnabled" scoped="" ref="0x2b34ed2d9330"/>
        <function-ref name="enableAdc" scoped="" ref="0x2b34ed2d94b8"/>
        <function-ref name="setAdmux" scoped="" ref="0x2b34ed2d9640"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2b34ed2d97c8"/>
        <function-ref name="isComplete" scoped="" ref="0x2b34ed2d9950"/>
        <function-ref name="cancel" scoped="" ref="0x2b34ed2d9ad8"/>
        <function-ref name="disableAdc" scoped="" ref="0x2b34ed2d9c60"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2b34ed2d9de8"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2b34ed2d8020"/>
        <function-ref name="startConversion" scoped="" ref="0x2b34ed2d81a8"/>
        <function-ref name="isStarted" scoped="" ref="0x2b34ed2d8430"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2b34ed2d85b8"/>
        <function-ref name="setContinuous" scoped="" ref="0x2b34ed2d8740"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2b34ed2d88c8"/>
        <function-ref name="getValue" scoped="" ref="0x2b34ed2d8a50"/>
        <function-ref name="dataReady" scoped="" ref="0x2b34ed2d8bd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x2b34ed2ee080" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2b34ed2ee080"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2b34ed2ee3d0"/>
        <function-ref name="getAdmux" scoped="" ref="0x2b34ed2ee558"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2b34ed2ee6e0"/>
        <function-ref name="isEnabled" scoped="" ref="0x2b34ed2ee868"/>
        <function-ref name="enableAdc" scoped="" ref="0x2b34ed2ee9f0"/>
        <function-ref name="setAdmux" scoped="" ref="0x2b34ed2eeb78"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2b34ed2eed00"/>
        <function-ref name="isComplete" scoped="" ref="0x2b34ed2ed020"/>
        <function-ref name="cancel" scoped="" ref="0x2b34ed2ed1a8"/>
        <function-ref name="disableAdc" scoped="" ref="0x2b34ed2ed330"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2b34ed2ed4b8"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2b34ed2ed640"/>
        <function-ref name="startConversion" scoped="" ref="0x2b34ed2ed7c8"/>
        <function-ref name="isStarted" scoped="" ref="0x2b34ed2eda50"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2b34ed2edbd8"/>
        <function-ref name="setContinuous" scoped="" ref="0x2b34ed2edd60"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2b34ed2ec020"/>
        <function-ref name="getValue" scoped="" ref="0x2b34ed2ec1a8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b34ed2ec330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x2b34ed2ec640" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2b34ed2ec640"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2b34ed2ec990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2b34ed396b70" loc="92:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2b34ed396b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2b34ed394020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b34ed3941a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b34ed3af8a0" loc="96:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b34ed3af8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b34ed3afc10"/>
        <function-ref name="configure" scoped="" ref="0x2b34ed3afd98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x2b34ed3943f0" loc="93:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b34ed3943f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b34ed394740"/>
        <function-ref name="requested" scoped="" ref="0x2b34ed3948c8"/>
        <function-ref name="granted" scoped="" ref="0x2b34ed394a50"/>
        <function-ref name="isOwner" scoped="" ref="0x2b34ed394bd8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b34ed394d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b34ed397e50" loc="91:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b34ed397e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b34ed3961e8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b34ed396370"/>
        <function-ref name="request" scoped="" ref="0x2b34ed3964f8"/>
        <function-ref name="granted" scoped="" ref="0x2b34ed396680"/>
        <function-ref name="isOwner" scoped="" ref="0x2b34ed396808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2b34ed3af020" loc="94:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b34ed3af020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b34ed3af370"/>
        <function-ref name="userId" scoped="" ref="0x2b34ed3af4f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b34edae8520" loc="44:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b34edae8520"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34edae8870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x2b34edae8af8" loc="45:/homes/hglanzer/GIT/tinyos/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0x2b34edae8af8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2b34edae8e48"/>
        <function-ref name="isEmpty" scoped="" ref="0x2b34edae7020"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2b34edae71a8"/>
        <function-ref name="dequeue" scoped="" ref="0x2b34edae7330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2b34edae59a8" loc="55:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2b34edae59a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2b34edae5d18"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b34edae4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2b34edae26f8" loc="60:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2b34edae26f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2b34edae2a68"/>
        <function-ref name="configure" scoped="" ref="0x2b34edae2bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x2b34edae2e78" loc="61:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x2b34edae2e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2b34edae11f8"/>
        <function-ref name="isEmpty" scoped="" ref="0x2b34edae1380"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2b34edae1508"/>
        <function-ref name="dequeue" scoped="" ref="0x2b34edae1690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x2b34edae4268" loc="56:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b34edae4268"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b34edae45b8"/>
        <function-ref name="requested" scoped="" ref="0x2b34edae4740"/>
        <function-ref name="granted" scoped="" ref="0x2b34edae48c8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b34edae4a50"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b34edae4bd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x2b34edae18d8" loc="62:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x2b34edae18d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x2b34edae1c28"/>
        <function-ref name="led0Toggle" scoped="" ref="0x2b34edae1db0"/>
        <function-ref name="led1On" scoped="" ref="0x2b34edae0020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x2b34edae01a8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x2b34edae0330"/>
        <function-ref name="get" scoped="" ref="0x2b34edae04b8"/>
        <function-ref name="led1Off" scoped="" ref="0x2b34edae0640"/>
        <function-ref name="setPort" scoped="" ref="0x2b34edae07c8"/>
        <function-ref name="led0On" scoped="" ref="0x2b34edae0de8"/>
        <function-ref name="set" scoped="" ref="0x2b34edae0ad8"/>
        <function-ref name="led2On" scoped="" ref="0x2b34edae0950"/>
        <function-ref name="led2Off" scoped="" ref="0x2b34edae0c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2b34edae6bb8" loc="54:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b34edae6bb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b34edae5020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b34edae51a8"/>
        <function-ref name="request" scoped="" ref="0x2b34edae5330"/>
        <function-ref name="granted" scoped="" ref="0x2b34edae54b8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b34edae5640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2b34edae4e20" loc="57:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b34edae4e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b34edae21a8"/>
        <function-ref name="userId" scoped="" ref="0x2b34edae2330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x2b34edadf100" loc="75:/homes/hglanzer/GIT/tinyos/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x2b34edadf100"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b34edadf450"/>
        <function-ref name="runTask" scoped="" ref="0x2b34edadf5d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x2b34ed3abb98" loc="72:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b34ed3abb98"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x2b34ed3b4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x2b34ed3b4268" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b34ed3b4268"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b34ed3b45b8"/>
        <function-ref name="requested" scoped="" ref="0x2b34ed3b4740"/>
        <function-ref name="granted" scoped="" ref="0x2b34ed3b48c8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b34ed3b4a50"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b34ed3b4bd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x2b34ed3ab478" loc="70:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b34ed3ab478"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34ed3ab7c8"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed3ab950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2b34ed3b4e20" loc="74:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b34ed3b4e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b34ed3b21a8"/>
        <function-ref name="userId" scoped="" ref="0x2b34ed3b2330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x2b34edb22740" loc="62:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x2b34edb22740"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x2b34edb22a90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x2b34edb22cd8" loc="63:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2b34edb22cd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b34edb210a0"/>
        <function-ref name="requested" scoped="" ref="0x2b34edb21228"/>
        <function-ref name="granted" scoped="" ref="0x2b34edb213b0"/>
        <function-ref name="isOwner" scoped="" ref="0x2b34edb21538"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2b34edb216c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x2b34edb22020" loc="60:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2b34edb22020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34edb22370"/>
        <function-ref name="stop" scoped="" ref="0x2b34edb224f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2b34edb21908" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2b34edb21908"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2b34edb21c58"/>
        <function-ref name="userId" scoped="" ref="0x2b34edb21de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b34ed3c9c68" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b34ed3c9c68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b34ed3c87e8"/>
        <function-ref name="readDone" scoped="" ref="0x2b34ed3c8c38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2b34ed3c7880" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2b34ed3c7880"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b34ed3c5490"/>
        <function-ref name="readDone" scoped="" ref="0x2b34ed3c5918"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2b34ed3c4e78" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2b34ed3c4e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2b34ed3c31f8"/>
        <function-ref name="getChannel" scoped="" ref="0x2b34ed3c3380"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2b34ed3c3508"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0x2b34ed3c4020" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2b34ed3c4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2b34ed3c4370"/>
        <function-ref name="cancel" scoped="" ref="0x2b34ed3c44f8"/>
        <function-ref name="dataReady" scoped="" ref="0x2b34ed3c4680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="acquiredData" ref="0x2b34ed3d1bf8" loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="acquiredData" scoped="" ref="0x2b34ed3d1bf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b34ed3d0020"/>
        <function-ref name="runTask" scoped="" ref="0x2b34ed3d01a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2b34ed3faa28" loc="24:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2b34ed3faa28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b34ed3f9620"/>
        <function-ref name="readDone" scoped="" ref="0x2b34ed3f9a90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x2b34ed400348" loc="26:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x2b34ed400348"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2b34ed3ff020"/>
        <function-ref name="readDone" scoped="" ref="0x2b34ed3ff490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2b34ed3ffb28" loc="27:/homes/hglanzer/GIT/tinyos/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2b34ed3ffb28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2b34ed3fd020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2b34ed3fd1a8"/>
        <function-ref name="request" scoped="" ref="0x2b34ed3fd330"/>
        <function-ref name="granted" scoped="" ref="0x2b34ed3fd4b8"/>
        <function-ref name="isOwner" scoped="" ref="0x2b34ed3fd640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LCD128x64" ref="0x2b34ed24c7a8" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64C.nc">
      <component-ref qname="LCD128x64C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LCD128x64" scoped="" ref="0x2b34ed24c7a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b34ed24caf8"/>
        <function-ref name="initDone" scoped="" ref="0x2b34ed24cc80"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b34ed24ce08"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b34ed40f020"/>
        <function-ref name="barWritten" scoped="" ref="0x2b34ed40f1a8"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b34ed40f330"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b34ed40f4b8"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b34ed40f640"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b34ed40f7c8"/>
        <function-ref name="writeByte" scoped="" ref="0x2b34ed40f950"/>
        <function-ref name="setPixel" scoped="" ref="0x2b34ed40fad8"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b34ed40fc60"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b34ed40fde8"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b34ed40e120"/>
        <function-ref name="writePixel" scoped="" ref="0x2b34ed40e2a8"/>
        <function-ref name="initLCD" scoped="" ref="0x2b34ed40e430"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b34ed40e5b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeRectangle" ref="0x2b34ed484628" loc="173:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeRectangle" scoped="" ref="0x2b34ed484628"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b34ed484978"/>
        <function-ref name="runTask" scoped="" ref="0x2b34ed484b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LCD128x64" ref="0x2b34ed43a538" loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LCD128x64" scoped="" ref="0x2b34ed43a538"/></type-interface>
      <instance>
        <interfacedef-ref qname="LCD128x64"/>
      </instance>
      <interface-functions>
        <function-ref name="startClearScreen" scoped="" ref="0x2b34ed43a888"/>
        <function-ref name="initDone" scoped="" ref="0x2b34ed43aa10"/>
        <function-ref name="startWriteBar" scoped="" ref="0x2b34ed43ab98"/>
        <function-ref name="startWriteLine" scoped="" ref="0x2b34ed43ad20"/>
        <function-ref name="barWritten" scoped="" ref="0x2b34ed439020"/>
        <function-ref name="startWriteRectangle" scoped="" ref="0x2b34ed4391a8"/>
        <function-ref name="screenCleared" scoped="" ref="0x2b34ed439330"/>
        <function-ref name="lineWritten" scoped="" ref="0x2b34ed4394b8"/>
        <function-ref name="startWriteString" scoped="" ref="0x2b34ed439640"/>
        <function-ref name="writeByte" scoped="" ref="0x2b34ed4397c8"/>
        <function-ref name="setPixel" scoped="" ref="0x2b34ed439950"/>
        <function-ref name="circleWritten" scoped="" ref="0x2b34ed439ad8"/>
        <function-ref name="startWriteCircle" scoped="" ref="0x2b34ed439c60"/>
        <function-ref name="rectangleWritten" scoped="" ref="0x2b34ed438020"/>
        <function-ref name="writePixel" scoped="" ref="0x2b34ed4381a8"/>
        <function-ref name="initLCD" scoped="" ref="0x2b34ed438330"/>
        <function-ref name="stringWritten" scoped="" ref="0x2b34ed4384b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeString" ref="0x2b34ed48db68" loc="222:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeString" scoped="" ref="0x2b34ed48db68"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b34ed48c020"/>
        <function-ref name="runTask" scoped="" ref="0x2b34ed48c1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeCircle" ref="0x2b34ed47c4d8" loc="189:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeCircle" scoped="" ref="0x2b34ed47c4d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b34ed47c828"/>
        <function-ref name="runTask" scoped="" ref="0x2b34ed47c9b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeLine" ref="0x2b34ed497590" loc="278:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeLine" scoped="" ref="0x2b34ed497590"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b34ed4978e0"/>
        <function-ref name="runTask" scoped="" ref="0x2b34ed497a68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="wait4Controller" ref="0x2b34ed455d88" loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="wait4Controller" scoped="" ref="0x2b34ed455d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b34ed453170"/>
        <function-ref name="runTask" scoped="" ref="0x2b34ed4532f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="writeBar" ref="0x2b34ed4c0c78" loc="356:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="writeBar" scoped="" ref="0x2b34ed4c0c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b34ed4bf020"/>
        <function-ref name="runTask" scoped="" ref="0x2b34ed4bf1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="clearScreenNB" ref="0x2b34ed4a0d58" loc="250:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64P.nc">
      <component-ref qname="LCD128x64P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="clearScreenNB" scoped="" ref="0x2b34ed4a0d58"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b34ed49f0d8"/>
        <function-ref name="runTask" scoped="" ref="0x2b34ed49f260"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="bigAVR6UART0" ref="0x2b34ed4f1ad0" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0C.nc">
      <component-ref qname="bigAVR6UART0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="bigAVR6UART0" scoped="" ref="0x2b34ed4f1ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="bigAVR6UART0"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b34ed4f1e20"/>
        <function-ref name="receive" scoped="" ref="0x2b34ed4ee020"/>
        <function-ref name="receivedByte" scoped="" ref="0x2b34ed4ee1a8"/>
        <function-ref name="receiveDone" scoped="" ref="0x2b34ed4ee330"/>
        <function-ref name="sendByte" scoped="" ref="0x2b34ed4ee4b8"/>
        <function-ref name="sendDone" scoped="" ref="0x2b34ed4ee640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="bigAVR6UART0" ref="0x2b34ed4eb140" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0P.nc">
      <component-ref qname="bigAVR6UART0P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="bigAVR6UART0" scoped="" ref="0x2b34ed4eb140"/></type-interface>
      <instance>
        <interfacedef-ref qname="bigAVR6UART0"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b34ed4eb490"/>
        <function-ref name="receive" scoped="" ref="0x2b34ed4eb618"/>
        <function-ref name="receivedByte" scoped="" ref="0x2b34ed4eb7a0"/>
        <function-ref name="receiveDone" scoped="" ref="0x2b34ed4eb928"/>
        <function-ref name="sendByte" scoped="" ref="0x2b34ed4ebab0"/>
        <function-ref name="sendDone" scoped="" ref="0x2b34ed4ebc38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartByte" ref="0x2b34ed506170" loc="5:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0P.nc">
      <component-ref qname="bigAVR6UART0P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x2b34ed506170"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b34ed5064c0"/>
        <function-ref name="receive" scoped="" ref="0x2b34ed506648"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x2b34ed4fc338" loc="6:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0P.nc">
      <component-ref qname="bigAVR6UART0P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x2b34ed4fc338"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b34ed4fc688"/>
        <function-ref name="receivedByte" scoped="" ref="0x2b34ed4fc810"/>
        <function-ref name="receive" scoped="" ref="0x2b34ed4fc998"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x2b34ed4fcb20"/>
        <function-ref name="receiveDone" scoped="" ref="0x2b34ed4fcca8"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x2b34ed4fce30"/>
        <function-ref name="sendDone" scoped="" ref="0x2b34ed50b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StdControl" ref="0x2b34ed4fba50" loc="7:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0P.nc">
      <component-ref qname="bigAVR6UART0P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x2b34ed4fba50"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34ed4fbda0"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed50a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x2b34ed50d7d8" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128Uart1C.nc">
      <component-ref qname="Atm128Uart1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x2b34ed50d7d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b34ed50db28"/>
        <function-ref name="receive" scoped="" ref="0x2b34ed50dcb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x2b34ed50c020" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128Uart1C.nc">
      <component-ref qname="Atm128Uart1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x2b34ed50c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b34ed50c370"/>
        <function-ref name="receivedByte" scoped="" ref="0x2b34ed50c4f8"/>
        <function-ref name="receive" scoped="" ref="0x2b34ed50c680"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x2b34ed50c808"/>
        <function-ref name="receiveDone" scoped="" ref="0x2b34ed50c990"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x2b34ed50cb18"/>
        <function-ref name="sendDone" scoped="" ref="0x2b34ed50cca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x2b34ed52c080" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128Uart1C.nc">
      <component-ref qname="Atm128Uart1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2b34ed52c080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf54430"/>
            <typename><typedef-ref name="TMicro" ref="0x2b34ecf54788"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b34ed52cdd0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b34ed528738"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b34ed5282b0"/>
        <function-ref name="overflow" scoped="" ref="0x2b34ed528bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x2b34ed50d020" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128Uart1C.nc">
      <component-ref qname="Atm128Uart1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x2b34ed50d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34ed50d370"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed50d4f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x2b34ed574430" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x2b34ed574430"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b34ed574780"/>
        <function-ref name="receive" scoped="" ref="0x2b34ed574908"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0x2b34ed573c18" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0x2b34ed573c18"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34ed572020"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed5721a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b34ed525610" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b34ed525610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ed525960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x2b34ed574b90" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x2b34ed574b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2b34ed573020"/>
        <function-ref name="receivedByte" scoped="" ref="0x2b34ed5731a8"/>
        <function-ref name="receive" scoped="" ref="0x2b34ed573330"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x2b34ed5734b8"/>
        <function-ref name="receiveDone" scoped="" ref="0x2b34ed573640"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x2b34ed5737c8"/>
        <function-ref name="sendDone" scoped="" ref="0x2b34ed573950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x2b34ed56f2d0" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2b34ed56f2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf54430"/>
            <typename><typedef-ref name="TMicro" ref="0x2b34ecf54788"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b34ed56e088"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b34ed56e998"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b34ed56e510"/>
        <function-ref name="overflow" scoped="" ref="0x2b34ed56ee20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0x2b34ed572c10" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0x2b34ed572c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x2b34ed570020"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x2b34ed5701a8"/>
        <function-ref name="rxDone" scoped="" ref="0x2b34ed570330"/>
        <function-ref name="txDone" scoped="" ref="0x2b34ed5704b8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x2b34ed570640"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x2b34ed5707c8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x2b34ed570950"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x2b34ed570ad8"/>
        <function-ref name="tx" scoped="" ref="0x2b34ed570c60"/>
        <function-ref name="rx" scoped="" ref="0x2b34ed570de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x2b34ed525be8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x2b34ed525be8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34ed574020"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed5741a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0x2b34ed572470" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0x2b34ed572470"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34ed5727c0"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed572948"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x2b34ed599be0" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x2b34ed599be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x2b34ed598020"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x2b34ed5981a8"/>
        <function-ref name="rxDone" scoped="" ref="0x2b34ed598330"/>
        <function-ref name="txDone" scoped="" ref="0x2b34ed5984b8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x2b34ed598640"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x2b34ed5987c8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x2b34ed598950"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x2b34ed598ad8"/>
        <function-ref name="tx" scoped="" ref="0x2b34ed598c60"/>
        <function-ref name="rx" scoped="" ref="0x2b34ed598de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x2b34ed596388" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x2b34ed596388"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x2b34ed5966d8"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x2b34ed596860"/>
        <function-ref name="rxDone" scoped="" ref="0x2b34ed5969e8"/>
        <function-ref name="txDone" scoped="" ref="0x2b34ed596b70"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x2b34ed596cf8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x2b34ed596e80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x2b34ed595030"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x2b34ed5951b8"/>
        <function-ref name="tx" scoped="" ref="0x2b34ed595340"/>
        <function-ref name="rx" scoped="" ref="0x2b34ed5954c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x2b34ed5993a0" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x2b34ed5993a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34ed5996f0"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed599878"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x2b34ed597190" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x2b34ed597190"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34ed5974e0"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed597668"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x2b34ed5979e8" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x2b34ed5979e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34ed597d38"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed596020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x2b34ed576a68" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x2b34ed576a68"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34ed576db8"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed599020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0x2b34ed592190" loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0x2b34ed592190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ed5924e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x2b34ed591a10" loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x2b34ed591a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x2b34ed591d60"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x2b34ed58f020"/>
        <function-ref name="rxDone" scoped="" ref="0x2b34ed58f1a8"/>
        <function-ref name="txDone" scoped="" ref="0x2b34ed58f330"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x2b34ed58f4b8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x2b34ed58f640"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x2b34ed58f7c8"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x2b34ed58f950"/>
        <function-ref name="tx" scoped="" ref="0x2b34ed58fad8"/>
        <function-ref name="rx" scoped="" ref="0x2b34ed58fc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0x2b34ed58e020" loc="85:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0x2b34ed58e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ed58e370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x2b34ed58d8a0" loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x2b34ed58d8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x2b34ed58dbf0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x2b34ed58dd78"/>
        <function-ref name="rxDone" scoped="" ref="0x2b34ed58c020"/>
        <function-ref name="txDone" scoped="" ref="0x2b34ed58c1a8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x2b34ed58c330"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x2b34ed58c4b8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x2b34ed58c640"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x2b34ed58c7c8"/>
        <function-ref name="tx" scoped="" ref="0x2b34ed58c950"/>
        <function-ref name="rx" scoped="" ref="0x2b34ed58cad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x2b34ed591190" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x2b34ed591190"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34ed5914e0"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed591668"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x2b34ed58e730" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x2b34ed58e730"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34ed58ea80"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed58ec08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x2b34ed58d020" loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x2b34ed58d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34ed58d370"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed58d4f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x2b34ed58cdf8" loc="90:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2b34ed58cdf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2b34ed58b170"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2b34ed58b2f8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2b34ed58b480"/>
        <function-ref name="actualMicro" scoped="" ref="0x2b34ed58b608"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2b34ed58b790"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x2b34ed58baa0" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2b34ed58baa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2b34ed58bdf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x2b34ed5928a0" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x2b34ed5928a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2b34ed592bf0"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed592d78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b34ed5e5420" loc="45:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliC.nc">
      <component-ref qname="BlinkAppC.TIMER0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b34ed5e5420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b34ed7b66c8"/>
        <function-ref name="fired" scoped="" ref="0x2b34ed7b8db0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b34ed7b7ad8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b34ed7b7688"/>
        <function-ref name="getdt" scoped="" ref="0x2b34ed7b5020"/>
        <function-ref name="gett0" scoped="" ref="0x2b34ed7b6b18"/>
        <function-ref name="isRunning" scoped="" ref="0x2b34ed7b7238"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b34ed7b8020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b34ed7b60f8"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b34ed7b84c0"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed7b8960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x2b34ed602510" loc="49:/homes/hglanzer/GIT/tinyos/tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x2b34ed602510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b34ed5fe768"/>
        <function-ref name="fired" scoped="" ref="0x2b34ed601e18"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b34ed600b78"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b34ed600728"/>
        <function-ref name="getdt" scoped="" ref="0x2b34ed5fd088"/>
        <function-ref name="gett0" scoped="" ref="0x2b34ed5febb8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b34ed6002d8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b34ed601088"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b34ed5fe198"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b34ed601528"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed6019c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x2b34ed5f9b68" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x2b34ed5f9b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b34ed61cd98"/>
        <function-ref name="fired" scoped="" ref="0x2b34ed5f74d8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b34ed61c1f8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b34ed5f7d78"/>
        <function-ref name="getdt" scoped="" ref="0x2b34ed61a688"/>
        <function-ref name="gett0" scoped="" ref="0x2b34ed61a238"/>
        <function-ref name="isRunning" scoped="" ref="0x2b34ed5f7928"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b34ed5f86f0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b34ed61c7c8"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b34ed5f8b90"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed5f7088"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x2b34ed619108" loc="47:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x2b34ed619108"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b34ed619c88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b34ed5fde48" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b34ed5fde48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ed5f91c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x2b34ed62d338" loc="29:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x2b34ed62d338"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b34ed62c0c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b34ed62c9d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b34ed62c548"/>
        <function-ref name="overflow" scoped="" ref="0x2b34ed62ce58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b34ed6146f0" loc="27:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b34ed6146f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ed614a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x2b34ed611020" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x2b34ed611020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b34ed62e690"/>
        <function-ref name="fired" scoped="" ref="0x2b34ed6106f8"/>
        <function-ref name="startAt" scoped="" ref="0x2b34ed62e088"/>
        <function-ref name="isRunning" scoped="" ref="0x2b34ed610b80"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b34ed62eb18"/>
        <function-ref name="start" scoped="" ref="0x2b34ed611d70"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed610270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x2b34ed721938" loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2b34ed721938"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b34ed71e020"/>
        <function-ref name="fired" scoped="" ref="0x2b34ed71f088"/>
        <function-ref name="startAt" scoped="" ref="0x2b34ed71f998"/>
        <function-ref name="isRunning" scoped="" ref="0x2b34ed71f510"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b34ed71e4a8"/>
        <function-ref name="start" scoped="" ref="0x2b34ed7206b0"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed720b88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b34ed721190" loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b34ed721190"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x2b34ececbd88"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x2b34ececbd88"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34ed7214e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x2b34ed71ea90" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2b34ed71ea90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b34ed71c828"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b34ed71b190"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b34ed71ccb0"/>
        <function-ref name="overflow" scoped="" ref="0x2b34ed71b618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x2b34edb4fb60" loc="38:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2b34edb4fb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2b34edb4d020"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2b34edb4d1a8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2b34edb4d330"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2b34edb4d4b8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2b34edb4d640"/>
        <function-ref name="setControl" scoped="" ref="0x2b34edb4d7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x2b34edb5a808" loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2b34edb5a808"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b34edb56020"/>
        <function-ref name="fired" scoped="" ref="0x2b34edb58020"/>
        <function-ref name="startAt" scoped="" ref="0x2b34edb58930"/>
        <function-ref name="isRunning" scoped="" ref="0x2b34edb584a8"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b34edb564a8"/>
        <function-ref name="start" scoped="" ref="0x2b34edb59598"/>
        <function-ref name="stop" scoped="" ref="0x2b34edb59a70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2b34edb5a060" loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2b34edb5a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2b34edb5a3b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x2b34edb56a90" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2b34edb56a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b34edb55828"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b34edb54190"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b34edb55cb0"/>
        <function-ref name="overflow" scoped="" ref="0x2b34edb54618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerSync" ref="0x2b34edb4abb0" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerSync" scoped="" ref="0x2b34edb4abb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
      </instance>
      <interface-functions>
        <function-ref name="setAssr" scoped="" ref="0x2b34edb497c8"/>
        <function-ref name="controlBusy" scoped="" ref="0x2b34edb491a8"/>
        <function-ref name="compareBusy" scoped="" ref="0x2b34edb49330"/>
        <function-ref name="countBusy" scoped="" ref="0x2b34edb494b8"/>
        <function-ref name="getAssr" scoped="" ref="0x2b34edb49640"/>
        <function-ref name="setTimer0Synchronous" scoped="" ref="0x2b34edb49020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x2b34edb4db58" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2b34edb4db58"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2b34edb4a310"/>
        <function-ref name="fired" scoped="" ref="0x2b34edb4b0c0"/>
        <function-ref name="get" scoped="" ref="0x2b34edb4c728"/>
        <function-ref name="reset" scoped="" ref="0x2b34edb4b548"/>
        <function-ref name="isOn" scoped="" ref="0x2b34edb4a798"/>
        <function-ref name="set" scoped="" ref="0x2b34edb4cbb0"/>
        <function-ref name="start" scoped="" ref="0x2b34edb4b9d0"/>
        <function-ref name="stop" scoped="" ref="0x2b34edb4be58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x2b34edb54b98" loc="37:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128AlarmSyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmSyncC.Atm128AlarmSyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b34edb54b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2b34edb50db8"/>
        <function-ref name="test" scoped="" ref="0x2b34edb504a8"/>
        <function-ref name="get" scoped="" ref="0x2b34edb53760"/>
        <function-ref name="setScale" scoped="" ref="0x2b34edb4f270"/>
        <function-ref name="getScale" scoped="" ref="0x2b34edb4f748"/>
        <function-ref name="reset" scoped="" ref="0x2b34edb51580"/>
        <function-ref name="overflow" scoped="" ref="0x2b34edb510f8"/>
        <function-ref name="isOn" scoped="" ref="0x2b34edb50930"/>
        <function-ref name="set" scoped="" ref="0x2b34edb53be8"/>
        <function-ref name="start" scoped="" ref="0x2b34edb51a08"/>
        <function-ref name="stop" scoped="" ref="0x2b34edb50020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x2b34ed699020" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2b34ed699020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2b34ed699370"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2b34ed6994f8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2b34ed699680"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2b34ed699808"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2b34ed699990"/>
        <function-ref name="setControl" scoped="" ref="0x2b34ed699b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerSync" ref="0x2b34ed694218" loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerSync" scoped="" ref="0x2b34ed694218"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
      </instance>
      <interface-functions>
        <function-ref name="setAssr" scoped="" ref="0x2b34ed694d10"/>
        <function-ref name="controlBusy" scoped="" ref="0x2b34ed6946f0"/>
        <function-ref name="compareBusy" scoped="" ref="0x2b34ed694878"/>
        <function-ref name="countBusy" scoped="" ref="0x2b34ed694a00"/>
        <function-ref name="getAssr" scoped="" ref="0x2b34ed694b88"/>
        <function-ref name="setTimer0Synchronous" scoped="" ref="0x2b34ed694568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x2b34ed698020" loc="56:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2b34ed698020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2b34ed6957a8"/>
        <function-ref name="fired" scoped="" ref="0x2b34ed696560"/>
        <function-ref name="get" scoped="" ref="0x2b34ed698ba0"/>
        <function-ref name="reset" scoped="" ref="0x2b34ed6969e8"/>
        <function-ref name="isOn" scoped="" ref="0x2b34ed695c30"/>
        <function-ref name="set" scoped="" ref="0x2b34ed696088"/>
        <function-ref name="start" scoped="" ref="0x2b34ed696e70"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed695320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b34ed6a1e00" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncC.nc">
      <component-ref qname="HplAtm128Timer0SyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b34ed6a1e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2b34ed69a0f8"/>
        <function-ref name="test" scoped="" ref="0x2b34ed69b798"/>
        <function-ref name="get" scoped="" ref="0x2b34ed69ea18"/>
        <function-ref name="setScale" scoped="" ref="0x2b34ed69a580"/>
        <function-ref name="getScale" scoped="" ref="0x2b34ed69aa58"/>
        <function-ref name="reset" scoped="" ref="0x2b34ed69d980"/>
        <function-ref name="overflow" scoped="" ref="0x2b34ed69d4f8"/>
        <function-ref name="isOn" scoped="" ref="0x2b34ed69bc20"/>
        <function-ref name="set" scoped="" ref="0x2b34ed69d020"/>
        <function-ref name="start" scoped="" ref="0x2b34ed69de08"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed69b310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x2b34ed6b2160" loc="62:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2b34ed6b2160"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2b34ed6b24b0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2b34ed6b2638"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2b34ed6b27c0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2b34ed6b2948"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2b34ed6b2ad0"/>
        <function-ref name="setControl" scoped="" ref="0x2b34ed6b2c58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x2b34ed6ae268" loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2b34ed6ae268"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2b34ed6ae5b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerSync" ref="0x2b34ed6ae958" loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerSync" scoped="" ref="0x2b34ed6ae958"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
      </instance>
      <interface-functions>
        <function-ref name="setAssr" scoped="" ref="0x2b34ed6ac4b8"/>
        <function-ref name="controlBusy" scoped="" ref="0x2b34ed6aee30"/>
        <function-ref name="compareBusy" scoped="" ref="0x2b34ed6ac020"/>
        <function-ref name="countBusy" scoped="" ref="0x2b34ed6ac1a8"/>
        <function-ref name="getAssr" scoped="" ref="0x2b34ed6ac330"/>
        <function-ref name="setTimer0Synchronous" scoped="" ref="0x2b34ed6aeca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x2b34ed6b1190" loc="63:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2b34ed6b1190"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2b34ed6af930"/>
        <function-ref name="fired" scoped="" ref="0x2b34ed6b06d0"/>
        <function-ref name="get" scoped="" ref="0x2b34ed6b1d10"/>
        <function-ref name="reset" scoped="" ref="0x2b34ed6b0b58"/>
        <function-ref name="isOn" scoped="" ref="0x2b34ed6afdb8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed6b01f8"/>
        <function-ref name="start" scoped="" ref="0x2b34ed6af020"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed6af4a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b34ed6b8180" loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer0SyncP.nc">
      <component-ref qname="HplAtm128Timer0SyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b34ed6b8180"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2b34ed6b4270"/>
        <function-ref name="test" scoped="" ref="0x2b34ed6b5930"/>
        <function-ref name="get" scoped="" ref="0x2b34ed6b8d00"/>
        <function-ref name="setScale" scoped="" ref="0x2b34ed6b46f8"/>
        <function-ref name="getScale" scoped="" ref="0x2b34ed6b4bd0"/>
        <function-ref name="reset" scoped="" ref="0x2b34ed6b6b58"/>
        <function-ref name="overflow" scoped="" ref="0x2b34ed6b66d0"/>
        <function-ref name="isOn" scoped="" ref="0x2b34ed6b5db8"/>
        <function-ref name="set" scoped="" ref="0x2b34ed6b61f8"/>
        <function-ref name="start" scoped="" ref="0x2b34ed6b5020"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed6b54a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x2b34ed740cf0" loc="74:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x2b34ed740cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b34ed73f0a0"/>
        <function-ref name="runTask" scoped="" ref="0x2b34ed73f228"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x2b34ed744c70" loc="49:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2b34ed744c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b34ed740410"/>
        <function-ref name="fired" scoped="" ref="0x2b34ed7424a8"/>
        <function-ref name="startAt" scoped="" ref="0x2b34ed742db8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b34ed742930"/>
        <function-ref name="getAlarm" scoped="" ref="0x2b34ed740898"/>
        <function-ref name="start" scoped="" ref="0x2b34ed7439f0"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed742020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b34ed749ab0" loc="48:/homes/hglanzer/GIT/tinyos/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b34ed749ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b34ed745d60"/>
        <function-ref name="fired" scoped="" ref="0x2b34ed747470"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b34ed7451c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b34ed747d10"/>
        <function-ref name="getdt" scoped="" ref="0x2b34ed744648"/>
        <function-ref name="gett0" scoped="" ref="0x2b34ed7441f8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b34ed7478c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b34ed748620"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b34ed745790"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b34ed748ac0"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed747020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x2b34ed7a1478" loc="71:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x2b34ed7a1478"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2b34ed7a17c8"/>
        <function-ref name="runTask" scoped="" ref="0x2b34ed7a1950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x2b34ed7a6208" loc="49:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x2b34ed7a6208"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b34ed7a25f0"/>
        <function-ref name="fired" scoped="" ref="0x2b34ed7a5b28"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b34ed7a48c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b34ed7a4470"/>
        <function-ref name="getdt" scoped="" ref="0x2b34ed7a1020"/>
        <function-ref name="gett0" scoped="" ref="0x2b34ed7a2a40"/>
        <function-ref name="isRunning" scoped="" ref="0x2b34ed7a4020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b34ed7a6d50"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b34ed7a2020"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b34ed7a5238"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed7a56d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2b34ed780020" loc="48:/homes/hglanzer/GIT/tinyos/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2b34ed780020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2b34ed77c358"/>
        <function-ref name="fired" scoped="" ref="0x2b34ed77f9b8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2b34ed77d748"/>
        <function-ref name="isOneShot" scoped="" ref="0x2b34ed77d2d8"/>
        <function-ref name="getdt" scoped="" ref="0x2b34ed77cc38"/>
        <function-ref name="gett0" scoped="" ref="0x2b34ed77c7c8"/>
        <function-ref name="isRunning" scoped="" ref="0x2b34ed77fe28"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2b34ed780b88"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2b34ed77dd38"/>
        <function-ref name="startOneShot" scoped="" ref="0x2b34ed77f088"/>
        <function-ref name="stop" scoped="" ref="0x2b34ed77f548"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x2b34ed79fc38" loc="48:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x2b34ed79fc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b34ed79e820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x2b34ed79ee48" loc="49:/homes/hglanzer/GIT/tinyos/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2b34ed79ee48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2b34ecf4b530"/>
            <typename><typedef-ref name="TMilli" ref="0x2b34ecf4b888"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2b34ed794be8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2b34ed792548"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2b34ed7920c0"/>
        <function-ref name="overflow" scoped="" ref="0x2b34ed7929d0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:/homes/hglanzer/GIT/tinyos/tos/interfaces/Init.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2b34ecfc6178" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/Init.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x2b34ecfbee40" loc="60:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
        <documentation loc="51:/homes/hglanzer/GIT/tinyos/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x2b34ecfcc290" loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x2b34ecfcc020" loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x2b34ecfd0940" loc="31:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="27:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x2b34ecfcf378" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2b34ecfcf108" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x2b34ecfcfe00" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2b34ecfcfb90" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x2b34ecfce698" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x2b34ecfe30d8" loc="44:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x2b34ecfe37a0" loc="45:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x2b34ecfe4328" loc="42:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x2b34ecfe2570" loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b34ecfe49c8" loc="43:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x2b34ecfe3e58" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b34ecfe65a8" loc="40:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x2b34ecfe6c18" loc="41:/homes/hglanzer/GIT/tinyos/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2b34eced13a0" loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="54:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x2b34ececf290" loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x2b34eced1ab8" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x2b34ecedb070" loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x2b34ecedb860" loc="75:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
        <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
      <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x2b34ecf8e450" loc="76:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x2b34ecfa4d28" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x2b34ecf2a1a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
      <documentation loc="35:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x2b34ecfae6d8" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b34ed18d338" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b34ed18d338"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2b34ed199020" loc="136:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="132:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2b34ed19e710" loc="83:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="80:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x2b34ed19c5b8" loc="114:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="100:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b34ed19c020" loc="114:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2b34ed19c338" loc="114:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x2b34ed19d7b8" loc="98:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="94:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x2b34ed198020" loc="151:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="146:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x2b34ed199740" loc="144:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="138:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2b34ed19d020" loc="92:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="86:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x2b34ed18de08" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b34ed18db98" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x2b34ed19a5b8" loc="129:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="116:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b34ed19a020" loc="129:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2b34ed19a338" loc="129:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x2b34ed19f8a0" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b34ed19f630" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b34ed19e070" loc="78:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="bigAVR6UART0" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
      <function command="" provided="0" name="send" ref="0x2b34ed1a6cf8" loc="5:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
        <interfacedef-ref qname="bigAVR6UART0"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="str" ref="0x2b34ed1a6758" loc="5:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b34ed1a6a78" loc="5:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x2b34ed1a4988" loc="7:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
        <interfacedef-ref qname="bigAVR6UART0"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x2b34ed1a43e8" loc="7:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b34ed1a4708" loc="7:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x2b34ed1a32d0" loc="13:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
        <interfacedef-ref qname="bigAVR6UART0"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x2b34ed1a3060" loc="13:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x2b34ed1a22b0" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
        <interfacedef-ref qname="bigAVR6UART0"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x2b34ed1a3960" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b34ed1a3c80" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x2b34ed1a2020" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendByte" ref="0x2b34ed1a6108" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
        <interfacedef-ref qname="bigAVR6UART0"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x2b34ed1a9e50" loc="3:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x2b34ed1a02b0" loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
        <interfacedef-ref qname="bigAVR6UART0"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x2b34ed1a2928" loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b34ed1a2c48" loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x2b34ed1a0020" loc="17:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/uart/bigAVR6UART0.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GLCD" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
      <function command="" provided="0" name="startClearScreen" ref="0x2b34ed195d80" loc="66:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2b34ed195b10" loc="66:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="tsPressed" ref="0x2b34ed1794d0" loc="24:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initDone" ref="0x2b34ed194438" loc="68:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteBar" ref="0x2b34ed187c18" loc="56:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b34ed187020" loc="56:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed187320" loc="56:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x2b34ed187650" loc="56:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="width" ref="0x2b34ed187978" loc="56:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isPressed" ref="0x2b34ed17bb40" loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x2b34ed17b8d0" loc="12:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="calibrated" ref="0x2b34ed17ae18" loc="22:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateTouchScreen" ref="0x2b34ed17ec30" loc="8:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteLine" ref="0x2b34ed195410" loc="64:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b34ed1827d8" loc="64:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed182ad8" loc="64:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="xEnd" ref="0x2b34ed182df8" loc="64:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="yEnd" ref="0x2b34ed195170" loc="64:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getXY" ref="0x2b34ed17b2a8" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteRectangle" ref="0x2b34ed185020" loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b34ed186320" loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed186620" loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="a" ref="0x2b34ed186920" loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="b" ref="0x2b34ed186c20" loc="58:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="barWritten" ref="0x2b34ed1916a0" loc="78:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="lineWritten" ref="0x2b34ed191020" loc="76:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="screenCleared" ref="0x2b34ed191d40" loc="80:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteString" ref="0x2b34ed182128" loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b34ed184818" loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="x" ref="0x2b34ed184b18" loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed184e18" loc="62:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="xyReady" ref="0x2b34ed17a798" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b34ed17a218" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed17a518" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="writeByte" ref="0x2b34ed18bce8" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b34ed18b438" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed18b738" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x2b34ed18ba58" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPixel" ref="0x2b34ed189868" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b34ed1892e8" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed1895e8" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="circleWritten" ref="0x2b34ed194ad8" loc="70:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteCircle" ref="0x2b34ed184040" loc="60:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="xcenter" ref="0x2b34ed185720" loc="60:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="ycenter" ref="0x2b34ed185a58" loc="60:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="radius" ref="0x2b34ed185d88" loc="60:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="rectangleWritten" ref="0x2b34ed193860" loc="74:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writePixel" ref="0x2b34ed18ac38" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b34ed18a3a0" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed18a6a0" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="on" ref="0x2b34ed18a9a8" loc="45:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initLCD" ref="0x2b34ed179db8" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2b34ed179b48" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stringWritten" ref="0x2b34ed1931a0" loc="72:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/GLCD/GLCD.nc">
        <interfacedef-ref qname="GLCD"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LCD128x64" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
      <function command="" provided="0" name="startClearScreen" ref="0x2b34ed1ff020" loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2b34ed1ebc98" loc="36:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="initDone" ref="0x2b34ed1ff690" loc="38:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteBar" ref="0x2b34ed1f0148" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b34ed1f1528" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed1f1828" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="length" ref="0x2b34ed1f1b58" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="width" ref="0x2b34ed1f1e80" loc="26:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteLine" ref="0x2b34ed1eb5e0" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b34ed1ec958" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed1ecc58" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="xEnd" ref="0x2b34ed1eb020" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="yEnd" ref="0x2b34ed1eb340" loc="34:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="barWritten" ref="0x2b34ed1fd9a8" loc="48:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteRectangle" ref="0x2b34ed1ef3a8" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b34ed1f07e0" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed1f0ae0" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="a" ref="0x2b34ed1f0de0" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="b" ref="0x2b34ed1ef108" loc="28:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="screenCleared" ref="0x2b34ed1fb098" loc="50:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="lineWritten" ref="0x2b34ed1fd328" loc="46:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteString" ref="0x2b34ed1ec2f0" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b34ed1eda28" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="x" ref="0x2b34ed1edd28" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed1ec060" loc="32:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="writeByte" ref="0x2b34ed1f42b0" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b34ed1f58e8" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed1f5be8" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x2b34ed1f4020" loc="10:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPixel" ref="0x2b34ed1f2e80" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b34ed1f2900" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed1f2c00" loc="20:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="circleWritten" ref="0x2b34ed1ffd30" loc="40:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startWriteCircle" ref="0x2b34ed1ed398" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="xcenter" ref="0x2b34ed1efa60" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="ycenter" ref="0x2b34ed1efd98" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="radius" ref="0x2b34ed1ed108" loc="30:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="rectangleWritten" ref="0x2b34ed1fec28" loc="44:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writePixel" ref="0x2b34ed1f22b0" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b34ed1f4910" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed1f4c10" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="on" ref="0x2b34ed1f2020" loc="15:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="initLCD" ref="0x2b34ed1f5290" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="pattern" ref="0x2b34ed1f5020" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stringWritten" ref="0x2b34ed1fe468" loc="42:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/lcd128x64/LCD128x64.nc">
        <interfacedef-ref qname="LCD128x64"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TouchScreen" loc="1:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
      <function event="" provided="0" name="tsPressed" ref="0x2b34ed1e19c0" loc="13:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isPressed" ref="0x2b34ed1e36f0" loc="6:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on" ref="0x2b34ed1e3480" loc="6:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getXY" ref="0x2b34ed1e6e18" loc="4:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="xyReady" ref="0x2b34ed1e1348" loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
        <interfacedef-ref qname="TouchScreen"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b34ed1e3d40" loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </variable>
          <variable name="y" ref="0x2b34ed1e10c8" loc="11:/homes/hglanzer/GIT/tinyos/tos/platforms/bigAVR6/TouchScreen/TouchScreen.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x2b34ed247e78" loc="49:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b34ed247e78"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x2b34ed25b6e0" loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
        <documentation loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x2b34ed25a3a8" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b34ed247e78"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x2b34ed25bdf0" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x2b34ed25a128" loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b34ed247e78"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcConfig" loc="19:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
      <documentation loc="13:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <short>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.</short>
        <long>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRefVoltage" ref="0x2b34ed256258" loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="27:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain reference voltage&#10; </short>
          <long>&#10; Obtain reference voltage&#10; @return The reference voltage to use. Must be one of the &#10;   ATM128_ADC_VREF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x2b34ed259a00" loc="25:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="20:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain channel.</short>
          <long>&#10; Obtain channel.&#10; @return The A/D channel to use. Must be one of the ATM128_ADC_SNGL_xxx&#10;   or ATM128_ADC_DIFF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPrescaler" ref="0x2b34ed256a38" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain prescaler value.</short>
          <long>&#10; Obtain prescaler value.&#10; @return The prescaler value to use. Must be one of the &#10;   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x2b34ed2787d0" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x2b34ed278020" loc="59:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x2b34ed275e60" loc="52:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b34ed275e60"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x2b34ed289708" loc="58:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x2b34ed288418" loc="66:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
        <documentation loc="60:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b34ed275e60"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x2b34ed289e50" loc="66:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x2b34ed288198" loc="66:/homes/hglanzer/GIT/tinyos/tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2b34ed275e60"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
      <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x2b34ed282938" loc="120:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="104:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x2b34ed283a00" loc="97:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="90:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x2b34ed283110" loc="88:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="78:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x2b34ed2821d8" loc="102:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="99:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x2b34ed281360" loc="128:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
        <documentation loc="122:/homes/hglanzer/GIT/tinyos/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcMultiple" loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.&#10; &#60;p>&#10; Because of the possibility that samples may be imprecise after &#10; switching channels and/or reference voltages, and because there&#10; is a one sample delay on swithcing channels and reference voltages,&#10; Atm128ADCMultiple is complex. Two straightforward uses are:&#10; &#60;ol type=&#34;A&#34;>&#10; &#60;li>Acquire N samples from channel C:&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C at the desired rate&#10;       (note that the choice of prescalers is very limited, so you&#10;       don't have many choices for sampling rate)&#10;    &#60;li>ignore the first dataReady event&#10;    &#60;li>use the results of the next N dataReady() events, return FALSE&#10;       on the last one&#10;    &#60;/ol>&#10; &#60;li>Acquire one sample each from channels C1, ..., Cn (this pseudocode&#10;    assumes that none of these channels are differential)&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C1&#10;    &#60;li>on the ith dataReady event switch to channel Ci+1 by changing&#10;       *newChannel&#10;    &#60;li>the data passed to the ith dataReady event is for channel Ci-1&#10;       (the data from the first dataReady event is ignored)&#10;    &#60;/ol>&#10; &#60;/ol>&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x2b34ed28c138" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.</short>
          <long>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.&#10;&#10; @param channel Initial A/D conversion channel. The channel can &#10;   be changed in the dataReady event, though these changes happen&#10;   with a one-sample delay (this is a hardware restriction).&#10; @param refVoltage Initial A/D reference voltage. See the&#10;   ATM128_ADC_VREF_xxx constants in Atm128ADC.h. Like the channel,&#10;   the reference voltage can be changed in the dataReady event with&#10;   a one-sample delay.&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in reference voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x2b34ed28d420" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x2b34ed28d778" loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x2b34ed28dae0" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x2b34ed28de30" loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b34ed2a3da8" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="103:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Returns the next sample in a free-running conversion.</short>
          <long>&#10; Returns the next sample in a free-running conversion. Allow the user&#10; to switch channels and/or reference voltages with a one sample delay.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if this conversion was precise, FALSE if it wasn't &#10;   (we assume that the second conversion after a change of reference&#10;   voltage or after switching to a differential channel is precise)&#10; @param channel Channel this sample was from.&#10; @param newChannel Change this parameter to switch to a new channel&#10;   for the second next sample.&#10; @param newRefVoltage Change this parameter to change the reference &#10;   voltage for the second next sample.&#10;&#10; @return TRUE to continue sampling, FALSE to stop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b34ed28cd00" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x2b34ed2a3060" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0x2b34ed2a3398" loc="119:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="newChannel" ref="0x2b34ed2a3748" loc="120:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="newRefVoltage" ref="0x2b34ed2a3af8" loc="120:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcSingle" loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
      <documentation loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x2b34ed292cd0" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Initiates an ADC conversion on a given channel.</short>
          <long>&#10; Initiates an ADC conversion on a given channel.&#10;&#10; @param channel A/D conversion channel.&#10; @param refVoltage Select reference voltage for A/D conversion. See&#10;   the ATM128_ADC_VREF_xxx constants in Atm128ADC.h&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in refernce voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x2b34ed292020" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x2b34ed292378" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x2b34ed2926e0" loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x2b34ed292a30" loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2b34ed2906a8" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Cancel an outstanding getData operation.</short>
          <long>&#10; Cancel an outstanding getData operation. Use with care, to&#10; avoid problems with races between the dataReady event and cancel.&#10; @return TRUE if a conversion was in-progress or an interrupt&#10;   was pending. dataReady will not be signaled. FALSE if the&#10;   conversion was already complete. dataReady will be (or has&#10;   already been) signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b34ed291e08" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="73:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.</short>
          <long>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if the conversion precise, FALSE if it wasn't. This&#10;   values matches the result from the &#60;code>getData&#60;/code> call.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b34ed291868" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x2b34ed291b88" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Adc" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <short>&#10; HPL interface to the Atmega128 A/D conversion subsystem.</short>
        <long>&#10; HPL interface to the Atmega128 A/D conversion subsystem. Please see the&#10; Atmega128 manual for full details on the functioning of this subsystem.&#10; &#60;p>&#10; A word of warning: the Atmega128 SLEEP instruction initiates an A/D&#10; conversion when the ADC and ADC interrupt are enabled.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0x2b34ed2aa868" loc="114:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="111:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdmux" ref="0x2b34ed29d9f0" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Read the ADMUX (ADC selection) register&#10; @return Current ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b34ecf44478"/>
            <typename><typedef-ref name="Atm128Admux_t" ref="0x2b34ecf44930"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPrescaler" ref="0x2b34ed2a7a88" loc="140:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="135:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set ADC prescaler selection bits&#10; </short>
          <long>&#10; Set ADC prescaler selection bits&#10; @param scale New ADC prescaler. Must be one of the ATM128_ADC_PRESCALE_xxx&#10;   values from Atm128Adc.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x2b34ed2a7818" loc="140:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x2b34ed2a80d8" loc="122:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="118:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is ADC enabled?&#10; </short>
          <long>&#10; Is ADC enabled?&#10; @return TRUE if the ADC is enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAdc" ref="0x2b34ed2ad548" loc="82:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="79:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdmux" ref="0x2b34ed2983e8" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Set the ADMUX (ADC selection) register&#10; @param admux New ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b34ecf44478"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x2b34ecf44930"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="admux" ref="0x2b34ed298178" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b34ecf44478"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x2b34ecf44930"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterruption" ref="0x2b34ed2ac3a0" loc="91:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="88:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isComplete" ref="0x2b34ed2a7020" loc="133:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="128:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.</short>
          <long>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.&#10; @return TRUE if the A/D conversion is complete, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2b34ed2a6258" loc="150:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="142:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Cancel A/D conversion and any pending A/D interrupt.</short>
          <long>&#10; Cancel A/D conversion and any pending A/D interrupt. Also disables the&#10; ADC interruption (otherwise a sample might start at the next sleep&#10; instruction). This command can assume that the A/D converter is enabled. &#10; @return TRUE if an A/D conversion was in progress or an A/D interrupt&#10;   was pending, FALSE otherwise. In single conversion mode, a return&#10;   of TRUE implies that the dataReady event will not be signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAdc" ref="0x2b34ed2adc38" loc="86:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetInterrupt" ref="0x2b34ed2ab258" loc="99:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="96:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Clear the ADC interrupt flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterruption" ref="0x2b34ed2acae8" loc="95:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="92:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x2b34ed2ab980" loc="106:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="101:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Start ADC conversion.</short>
          <long>&#10; Start ADC conversion. If ADC interrupts are enabled, the dataReady event&#10; will be signaled once (in non-continuous mode) or repeatedly (in&#10; continuous mode).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isStarted" ref="0x2b34ed2a8838" loc="127:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="123:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion in progress?&#10; </short>
          <long>&#10; Is A/D conversion in progress?&#10; @return TRUE if the A/D conversion is in progress, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdcsra" ref="0x2b34ed2af608" loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Set the ADCSRA (ADC control) register&#10; @param adcsra New ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b34ecf4c020"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2b34ecf4c6e8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adcsra" ref="0x2b34ed2af398" loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b34ecf4c020"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2b34ecf4c6e8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setContinuous" ref="0x2b34ed2aa178" loc="110:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="107:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdcsra" ref="0x2b34ed298bc0" loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="60:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Read the ADCSRA (ADC control) register&#10; @return Current ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2b34ecf4c020"/>
            <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2b34ecf4c6e8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x2b34ed2afda8" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="71:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the latest A/D conversion result&#10; </short>
          <long>&#10; Read the latest A/D conversion result&#10; @return A/D value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2b34ed2a6d68" loc="156:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="152:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; A/D interrupt occured&#10; </short>
          <long>&#10; A/D interrupt occured&#10; @param data Latest A/D conversion result&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b34ed2a6af8" loc="156:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x2b34ed29c8c8" loc="95:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b34ed29b0d8" loc="105:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:/homes/hglanzer/GIT/tinyos/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x2b34ed31cc98" loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x2b34ed3195c0" loc="61:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x2b34ed331a78" loc="56:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x2b34ed330a70" loc="73:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x2b34ed331258" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x2b34ed3302a8" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x2b34ed32e360" loc="81:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x2b34ed32c020" loc="90:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x2b34ed32c810" loc="98:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:/homes/hglanzer/GIT/tinyos/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x2b34ed33d020" loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b34ed329218"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x2b34ed33ec60" loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b34ed329218"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x2b34ed33f0d8" loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x2b34ed33fb58" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b34ed329218"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x2b34ed33f8e8" loc="62:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2b34ed329218"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x2b34ed33e428" loc="70:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:/homes/hglanzer/GIT/tinyos/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x2b34ed329218"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
      <documentation loc="33:/homes/hglanzer/GIT/tinyos/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x2b34ed351550" loc="61:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="58:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x2b34ed351c88" loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x2b34ed350420" loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x2b34ed34f2a8" loc="83:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x2b34ed34e8b0" loc="100:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="96:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b34ed368070" loc="117:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="103:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x2b34ed350b38" loc="77:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="74:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b34ed368b70" loc="134:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="120:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x2b34ed368900" loc="134:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setPort" ref="0x2b34ed367a08" loc="137:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x2b34ed367468" loc="137:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
          <variable name="pval" ref="0x2b34ed367788" loc="137:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x2b34ed353df8" loc="56:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x2b34ed34fa18" loc="89:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="86:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x2b34ed34e178" loc="94:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
        <documentation loc="91:/homes/hglanzer/GIT/tinyos/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x2b34ed3a7110" loc="62:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="37:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartByte.nc">
      <documentation loc="32:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x2b34ed4eaa90" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartByte.nc">
        <documentation loc="39:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x2b34ed4ea820" loc="46:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x2b34ed508860" loc="56:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartByte.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x2b34ed5082a8" loc="56:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x2b34ed5085e0" loc="56:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
      <documentation loc="32:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x2b34ed507800" loc="48:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
        <documentation loc="39:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x2b34ed507260" loc="48:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b34ed507580" loc="48:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x2b34ed501290" loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
        <documentation loc="74:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x2b34ed501020" loc="79:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x2b34ed4ff020" loc="90:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
        <documentation loc="81:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x2b34ed501a08" loc="90:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b34ed501d28" loc="90:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x2b34ed502020" loc="65:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x2b34ed4fe8f8" loc="99:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
        <documentation loc="92:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x2b34ed4fe020" loc="99:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b34ed4fe340" loc="99:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x2b34ed4fe668" loc="99:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x2b34ed502898" loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
        <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x2b34ed503020" loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
        <documentation loc="50:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x2b34ed5046c8" loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2b34ed5049e8" loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2b34ecccd378"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x2b34ed504d10" loc="57:/homes/hglanzer/GIT/tinyos/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:/homes/hglanzer/GIT/tinyos/tos/interfaces/StdControl.nc">
      <documentation loc="72:/homes/hglanzer/GIT/tinyos/tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x2b34ed50be68" loc="95:/homes/hglanzer/GIT/tinyos/tos/interfaces/StdControl.nc">
        <documentation loc="88:/homes/hglanzer/GIT/tinyos/tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b34ed4fb638" loc="105:/homes/hglanzer/GIT/tinyos/tos/interfaces/StdControl.nc">
        <documentation loc="97:/homes/hglanzer/GIT/tinyos/tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b34ed52d7b8" loc="57:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b34ed52d7b8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2b34ed52d9e8" loc="57:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b34ed52d9e8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x2b34ed52a2a8" loc="64:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b34ed52d9e8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x2b34ed529328" loc="76:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x2b34ed52aac0" loc="71:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x2b34ed529a18" loc="82:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
        <documentation loc="78:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x2b34ed51de70" loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x2b34ed51d070" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x2b34ed53c4a8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b34ed53c238" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x2b34ed53d4e8" loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x2b34ed51e1d8" loc="40:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x2b34ed51e8f8" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x2b34ed51d790" loc="43:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2b34eced5ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0x2b34ed53e578" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x2b34ed53ee30" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2b34ed53ebc0" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x2b34ed53db98" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b34ed616340" loc="53:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b34ed616340"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x2b34ed616bd0" loc="61:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
        <documentation loc="55:/homes/hglanzer/GIT/tinyos/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2b34ecccddb0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
      <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2b34ed60f528" loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2b34ed60f528"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2b34ed60f758" loc="56:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b34ed60f758"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2b34ed60a020" loc="109:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="105:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b34ed60f758"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2b34ed60d1d8" loc="78:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="75:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x2b34ed60c6c0" loc="103:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="90:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b34ed60f758"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b34ed60f758"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2b34ed60c120" loc="103:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b34ed60f758"/></type-var>
          </variable>
          <variable name="dt" ref="0x2b34ed60c440" loc="103:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b34ed60f758"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2b34ed60d948" loc="88:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="81:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x2b34ed60a7a0" loc="116:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="111:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b34ed60f758"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2b34ed60e290" loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="59:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b34ed60f758"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2b34ed60e020" loc="66:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b34ed60f758"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b34ed60ea60" loc="73:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
        <documentation loc="68:/homes/hglanzer/GIT/tinyos/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="42:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControl" ref="0x2b34ed653020" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <documentation loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b34ecf57a08"/>
            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2b34ecf57e10"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x2b34ed650360" loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <documentation loc="52:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b34ecf64100"/>
            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2b34ecf64508"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x2b34ed6521d8" loc="49:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <documentation loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b34ecf5b980"/>
            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2b34ecf5bd88"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x2b34ed652b90" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b34ecf5b980"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2b34ecf5bd88"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x2b34ed652920" loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b34ecf5b980"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2b34ecf5bd88"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x2b34ed650d18" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b34ecf64100"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2b34ecf64508"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x2b34ed650aa8" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b34ecf64100"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2b34ecf64508"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x2b34ed6539f0" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b34ecf57a08"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2b34ecf57e10"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x2b34ed653780" loc="46:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b34ecf57a08"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2b34ecf57e10"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerSync" loc="22:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
      <documentation loc="11:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setTimer0Synchronous" ref="0x2b34ed66b4e8" loc="39:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="36:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Turn on timer 0 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBusy" ref="0x2b34ed66bbf0" loc="45:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; @return TRUE if TCCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareBusy" ref="0x2b34ed6693e0" loc="51:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="47:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; @return TRUE if OCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x2b34ed669b90" loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="53:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; @return TRUE if TCNT0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x2b34ed644328" loc="28:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="24:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Read timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer0 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b34ecf5e118"/>
            <typename><typedef-ref name="Atm128Assr_t" ref="0x2b34ecf5e520"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x2b34ed644cd8" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
        <documentation loc="30:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
          <short>&#10; Set timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer0 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerSync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b34ecf5e118"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x2b34ecf5e520"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2b34ed644a68" loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128TimerSync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2b34ecf5e118"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x2b34ecf5e520"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x2b34ed654420" loc="41:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b34ed654420"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x2b34ed64aa40" loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2b34ed64dd88" loc="58:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b34ed654cd8" loc="48:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="44:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b34ed654420"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x2b34ed64b4c0" loc="62:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x2b34ed6491d8" loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="76:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b34ed64d648" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="50:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b34ed654420"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x2b34ed64d3d8" loc="54:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2b34ed654420"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2b34ed64bbb8" loc="65:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="64:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b34ed64a328" loc="68:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
        <documentation loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
      <documentation loc="34:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x2b34ed63b680" loc="55:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b34ed63b680"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x2b34ed634cf0" loc="98:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="97:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x2b34ed635e20" loc="87:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="83:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2b34ed637020" loc="61:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="57:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b34ed63b680"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x2b34ed632690" loc="104:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="100:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x2b34ed632420" loc="104:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x2b34ed632e10" loc="110:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="106:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2b34ecccb910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x2b34ed6367f8" loc="75:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="74:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x2b34ed6360d8" loc="70:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="69:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x2b34ed6345c8" loc="93:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="89:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2b34ececc4c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2b34ed637958" loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="63:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b34ed63b680"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x2b34ed6376e8" loc="67:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2b34ed63b680"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2b34ed635020" loc="78:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="77:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2b34ed635708" loc="81:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
        <documentation loc="80:/homes/hglanzer/GIT/tinyos/tos/chips/atm128/timerSync/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
